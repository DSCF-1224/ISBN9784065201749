<?xml version="1.0" encoding="utf-8"  standalone="no"?>
<svg  onload="if (typeof(gnuplot_svg)!='undefined') gnuplot_svg.Init(evt)" 
 width="600" height="480"
 viewBox="0 0 600 480"
 xmlns="http://www.w3.org/2000/svg"
 xmlns:xlink="http://www.w3.org/1999/xlink"
>

<title>Gnuplot</title>
<desc>Produced by GNUPLOT 5.4 patchlevel 2 </desc>

<script type="text/javascript" > <![CDATA[
// From:	Marko Karjalainen <markokarjalainen@kolumbus.fi>
// Date:	27 Aug 2018
// Experimental gnuplot plugin for svg
//
// All svg elements on page get own gnuplot plugin attached by js, so no conflict with global variables.
//
// Javascript variables are read from second script tag and converted to json for import to plugin.
// Inline events are removed from xml and new ones are attached with addEventListener function.
// Inline events should be removed from xml and xml should have better id/class names to attach events from js.
//
// Improved mouseover text and image handling
//   content changed to xml only if it really changed and bouncing is calculated once.
//
// Convert functions are same as before, maybe renamed better.
//
// Javascript routines for mouse and keyboard interaction with
// SVG documents produced by gnuplot SVG terminal driver.

// TODO do not create inline events to svg and give id or classes for getting elements
// TODO make own svg layer x/y range sized for coordinates?

if (window) {
    window.addEventListener('load', function () {
        // Find svg elements
        var svg = document.querySelectorAll('svg');
        for (var i = 0; i < svg.length; i++) {
            // Init plugin
            if (!svg[i].gnuplot) {
                // Check if gnuplot generated svg
                if(svg[i].getElementById('gnuplot_canvas')){
                    svg[i].gnuplot = new gnuplot_svg(svg[i]);
                }
            }
        }
    });
}

gnuplot_svg = function (svgElement) {

    var version = '09 April 2019';

    var settings = {};

    var viewBoxResetValue = [];

    var drag = {
        'enabled': false,
        'offset': { 'x': 0, 'y': 0 },
        'change': svgElement.createSVGPoint(),
        'timeout': null
    };

    var coordinateText = {
        'enabled': false,
        'element': svgElement.getElementById('coord_text')
    };

    var popoverContainer = {
        'element': null,
        'content': null,
    };

    var popoverImage = {
        'element': null,
        'content': null,
        'width': 300,
        'height': 200,
        'defaultWidth': 300,
        'defaultHeight': 200,
    };

    var popoverText = {
        'element': null,
        'content': null,
        'width': 11,
        'height': 16,
        'defaultWidth': 11,
        'defaultHeight': 16,
    };

    var point = svgElement.createSVGPoint();

    var axisDate = new Date();

    var gridEnabled = false;

    // Get plot boundaries and axis scaling information for mousing from current object script tag
    // TODO add these to svg xml custom attribute for reading(json format)
    var parseSettings = function () {
        var script = svgElement.querySelectorAll('script');
        if (script && script[1]) {
            var scriptText = script[1].firstChild.nodeValue;
            // Remove inline comments
            scriptText = scriptText.replace(/^\s*\/\/.*\n/g, '');
            // Change prefix to "
            scriptText = scriptText.replace(/gnuplot_svg\./g, '"');
            // Change = to " :
            scriptText = scriptText.replace(/ = /g, '" : ');
            // Change line endings to comma
            scriptText = scriptText.replace(/;\n|\n/g, ',');
            // Remove last comma
            scriptText = scriptText.replace(/,+$/, '');
            // Parse as json string
            settings = JSON.parse("{\n" + scriptText + "\n}");
        }
    };

    // Add interactive events
    var addEvents = function () {
        var i;

        // Get keyentry elements
        var toggleVisibility = svgElement.querySelectorAll('g[id$="_keyentry"]');
        for (i = 0; i < toggleVisibility.length; i++) {
            // ------- Remove inline events
            toggleVisibility[i].removeAttribute('onclick');
            // -------

            // Add keyentry event to toggle visibility
            toggleVisibility[i].addEventListener('click', key.bind(null, toggleVisibility[i].getAttribute('id'), null));
        }

        // ------- Remove inline events from bounding box
        var boundingBox = svgElement.querySelector('rect[onclick^="gnuplot_svg.toggleCoordBox"]');
        if (boundingBox) {
            boundingBox.removeAttribute('onclick');
            boundingBox.removeAttribute('onmousemove');
        }
        // ------- Remove inline events from canvas
        var canvas = svgElement.getElementById('gnuplot_canvas');
        if (canvas) {
            canvas.removeAttribute('onclick');
            canvas.removeAttribute('onmousemove');
        }
        // -------

        // Get grid image
        var toggleGrid = svgElement.querySelector('image[onclick^="gnuplot_svg.toggleGrid"]');
        if (toggleGrid) {
            // ------- Remove inline events
            toggleGrid.removeAttribute('onclick');
            // -------

            // Add Toggle grid image event
            toggleGrid.addEventListener('click', function (evt) {
                grid();
                evt.preventDefault();
                evt.stopPropagation();
            });
        }

        // Get hypertexts
        var hyperText = svgElement.querySelectorAll('g[onmousemove^="gnuplot_svg.showHypertext"]');

        // Set view element variables
        if (hyperText.length) {
            popoverContainer.element = svgElement.getElementById('hypertextbox');
            popoverText.element = svgElement.getElementById('hypertext');
            popoverImage.element = svgElement.getElementById('hyperimage');
            popoverImage.defaultWidth = popoverImage.element.getAttribute('width');
            popoverImage.defaultHeight = popoverImage.element.getAttribute('height');
        }

        for (i = 0; i < hyperText.length; i++) {
            // Get text from attr uggly way, svg has empty title element
            var text = hyperText[i].getAttribute('onmousemove').substr(31).slice(0, -2);

            // ------- Remove inline events
            hyperText[i].removeAttribute('onmousemove');
            hyperText[i].removeAttribute('onmouseout');
            // -------

            // Add event
            hyperText[i].addEventListener('mousemove', popover.bind(null, text, true));
            hyperText[i].addEventListener('mouseout', popover.bind(null, null, false));
        }

        // Toggle coordinates visibility on left click on boundingBox element
        svgElement.addEventListener('click', function (evt) {
            if (!drag.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                coordinate();
                setCoordinateLabel(evt);
            }
        });

        // Save move start position, enable drag after delay
        svgElement.addEventListener('mousedown', function (evt) {

            drag.offset = { 'x': evt.clientX, 'y': evt.clientY };

            // Delay for moving, so not move accidentally if only click
            drag.timeout = setTimeout(function () {
                drag.enabled = true;
            }, 250);

            // Cancel draggable
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Disable drag
        svgElement.addEventListener('mouseup', function (evt) {
            drag.enabled = false;
            clearTimeout(drag.timeout);
        });

        // Mouse move
        svgElement.addEventListener('mousemove', function (evt) {

            // Drag svg element
            if (evt.buttons == 1 && drag.enabled) {

                // Position change
                drag.change.x = evt.clientX - drag.offset.x;
                drag.change.y = evt.clientY - drag.offset.y;

                // Set current mouse position
                drag.offset.x = evt.clientX;
                drag.offset.y = evt.clientY;

                // Convert to svg position
                drag.change.matrixTransform(svgElement.getScreenCTM().inverse());

                var viewBoxValues = getViewBox();

                viewBoxValues[0] -= drag.change.x;
                viewBoxValues[1] -= drag.change.y;

                setViewBox(viewBoxValues);
            }

            // View coordinates on mousemove over svg element
            if (coordinateText.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                setCoordinateLabel(evt);
            }

        });

        // Zoom with wheel
        svgElement.addEventListener('wheel', function (evt) {
            // x or y scroll zoom both axels
            var delta = Math.max(-1, Math.min(1, (evt.deltaY || evt.deltaX)));

            if (delta > 0) {
                setViewBox(zoom('in'));
            }
            else {
                setViewBox(zoom('out'));
            }

            // Disable scroll the entire webpage
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Reset on right click or hold tap
        svgElement.addEventListener('contextmenu', function (evt) {

            setViewBox(viewBoxResetValue);

            // Disable native context menu
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Keyboard actions, old svg version not support key events so must listen window
        window.addEventListener('keydown', function (evt) {

            // Not capture event from inputs
            // body = svg inline in page, svg = plain svg file, window = delegated events to object
            if (evt.target.nodeName != 'BODY' && evt.target.nodeName != 'svg' && evt.target != window) {
                return true;
            }

            var viewBoxValues = [];

            switch (evt.key) {
                // Move, Edge sends without Arrow word
                case 'ArrowLeft':
                case 'Left':
                case 'ArrowRight':
                case 'Right':
                case 'ArrowUp':
                case 'Up':
                case 'ArrowDown':
                case 'Down':
                    viewBoxValues = pan(evt.key.replace('Arrow', '').toLowerCase());
                    break;
                // Zoom in
                case '+':
                case 'Add':
                    viewBoxValues = zoom('in');
                    break;
                // Zoom out
                case '-':
                case 'Subtract':
                    viewBoxValues = zoom('out');
                    break;
                // Reset
                case 'Home':
                    viewBoxValues = viewBoxResetValue;
                    break;
                // Toggle grid
                case '#':
                    grid();
                    break;
            }

            if (viewBoxValues.length) {
                setViewBox(viewBoxValues);
            }
        });
    };

    // Get svg viewbox details
    var getViewBox = function () {
        var viewBoxValues = svgElement.getAttribute('viewBox').split(' ');
        viewBoxValues[0] = parseFloat(viewBoxValues[0]);
        viewBoxValues[1] = parseFloat(viewBoxValues[1]);
        viewBoxValues[2] = parseFloat(viewBoxValues[2]);
        viewBoxValues[3] = parseFloat(viewBoxValues[3]);
        return viewBoxValues;
    };

    // Set svg viewbox details
    var setViewBox = function (viewBoxValues) {
        svgElement.setAttribute('viewBox', viewBoxValues.join(' '));
    };

    // Set coordinate label position and text
    var setCoordinateLabel = function (evt) {
        var position = convertDOMToSVG({ 'x': evt.clientX, 'y': evt.clientY });

        // Set coordinate label position
        coordinateText.element.setAttribute('x', position.x);
        coordinateText.element.setAttribute('y', position.y);

        // Convert svg position to plot coordinates
        var plotcoord = convertSVGToPlot(position);

        // Parse label to view
        var label = parseCoordinateLabel(plotcoord);

        // Set coordinate label text
        coordinateText.element.textContent = label.x + ' ' + label.y;
    };

    // Convert position DOM to SVG
    var convertDOMToSVG = function (position) {
        point.x = position.x;
        point.y = position.y;
        return point.matrixTransform(svgElement.getScreenCTM().inverse());
    };

    // Convert position SVG to Plot
    var convertSVGToPlot = function (position) {
        var plotcoord = {};
        var plotx = position.x - settings.plot_xmin;
        var ploty = position.y - settings.plot_ybot;
        var x, y;

        if (settings.plot_logaxis_x !== 0) {
            x = Math.log(settings.plot_axis_xmax)
                - Math.log(settings.plot_axis_xmin);
            x = x * (plotx / (settings.plot_xmax - settings.plot_xmin))
                + Math.log(settings.plot_axis_xmin);
            x = Math.exp(x);
        } else {
            x = settings.plot_axis_xmin + (plotx / (settings.plot_xmax - settings.plot_xmin)) * (settings.plot_axis_xmax - settings.plot_axis_xmin);
        }

        if (settings.plot_logaxis_y !== 0) {
            y = Math.log(settings.plot_axis_ymax)
                - Math.log(settings.plot_axis_ymin);
            y = y * (ploty / (settings.plot_ytop - settings.plot_ybot))
                + Math.log(settings.plot_axis_ymin);
            y = Math.exp(y);
        } else {
            y = settings.plot_axis_ymin + (ploty / (settings.plot_ytop - settings.plot_ybot)) * (settings.plot_axis_ymax - settings.plot_axis_ymin);
        }

        plotcoord.x = x;
        plotcoord.y = y;
        return plotcoord;
    };

    // Parse plot x/y values to label
    var parseCoordinateLabel = function (plotcoord) {
        var label = { 'x': 0, 'y': 0 };

        if (settings.plot_timeaxis_x == 'DMS' || settings.plot_timeaxis_y == 'DMS') {
            if (settings.plot_timeaxis_x == 'DMS') {
                label.x = convertToDMS(plotcoord.x);
            }
            else {
                label.x = plotcoord.x.toFixed(2);
            }

            if (settings.plot_timeaxis_y == 'DMS') {
                label.y = convertToDMS(plotcoord.y);
            }
            else {
                label.y = plotcoord.y.toFixed(2);
            }

        } else if (settings.polar_mode) {
            polar = convertToPolar(plotcoord.x, plotcoord.y);
            label.x = 'ang= ' + polar.ang.toPrecision(4);
            label.y = 'R= ' + polar.r.toPrecision(4);

        } else if (settings.plot_timeaxis_x == 'Date') {
            axisDate.setTime(1000 * plotcoord.x);
            var year = axisDate.getUTCFullYear();
            var month = axisDate.getUTCMonth();
            var date = axisDate.getUTCDate();
            label.x = (' ' + date).slice(-2) + '/' + ('0' + (month + 1)).slice(-2) + '/' + year;
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'Time') {
            axisDate.setTime(1000 * plotcoord.x);
            var hour = axisDate.getUTCHours();
            var minute = axisDate.getUTCMinutes();
            var second = axisDate.getUTCSeconds();
            label.x = ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2) + ':' + ('0' + second).slice(-2);
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'DateTime') {
            axisDate.setTime(1000 * plotcoord.x);
            label.x = axisDate.toUTCString();
            label.y = plotcoord.y.toFixed(2);
        } else {
            label.x = plotcoord.x.toFixed(2);
            label.y = plotcoord.y.toFixed(2);
        }

        return label;
    };

    // Convert position to Polar
    var convertToPolar = function (x, y) {
        polar = {};
        var phi, r;
        phi = Math.atan2(y, x);
        if (settings.plot_logaxis_r) {
            r = Math.exp((x / Math.cos(phi) + Math.log(settings.plot_axis_rmin) / Math.LN10) * Math.LN10);
        }
        else if (settings.plot_axis_rmin > settings.plot_axis_rmax) {
            r = settings.plot_axis_rmin - x / Math.cos(phi);
        } else {
            r = settings.plot_axis_rmin + x / Math.cos(phi);
        }
        phi = phi * (180 / Math.PI);
        if (settings.polar_sense < 0) {
            phi = -phi;
        }
        if (settings.polar_theta0 !== undefined) {
            phi = phi + settings.polar_theta0;
        }
        if (phi > 180) { phi = phi - 360; }
        polar.r = r;
        polar.ang = phi;
        return polar;
    };

    // Convert position to DMS
    var convertToDMS = function (x) {
        var dms = { d: 0, m: 0, s: 0 };
        var deg = Math.abs(x);
        dms.d = Math.floor(deg);
        dms.m = Math.floor((deg - dms.d) * 60);
        dms.s = Math.floor((deg - dms.d) * 3600 - dms.m * 60);
        fmt = ((x < 0) ? '-' : ' ') + dms.d.toFixed(0) + '°' + dms.m.toFixed(0) + '"' + dms.s.toFixed(0) + "'";
        return fmt;
    };

    // Set popover text to show
    var setPopoverText = function (content) {

        // Minimum length
        popoverText.width = popoverText.defaultWidth;

        // Remove old texts
        while (null !== popoverText.element.firstChild) {
            popoverText.element.removeChild(popoverText.element.firstChild);
        }

        var lines = content.split(/\n|\\n/g);

        // Single line
        if (lines.length <= 1) {
            popoverText.element.textContent = content;
            popoverText.width = popoverText.element.getComputedTextLength() + 8;
        }
        // Multiple lines
        else {
            var lineWidth = 0;
            var tspanElement;

            for (var l = 0; l < lines.length; l++) {
                tspanElement = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
                // Y relative position
                if (l > 0) {
                    tspanElement.setAttribute('dy', popoverText.defaultHeight);
                }
                // Append text
                tspanElement.appendChild(document.createTextNode(lines[l]));
                popoverText.element.appendChild(tspanElement);

                // Max line width
                lineWidth = tspanElement.getComputedTextLength() + 8;
                if (popoverText.width < lineWidth) {
                    popoverText.width = lineWidth;
                }
            }
        }

        // Box Height
        popoverText.height = 2 + popoverText.defaultHeight * lines.length;
        popoverContainer.element.setAttribute('height', popoverText.height);

        // Box Width
        popoverContainer.element.setAttribute('width', popoverText.width);
    };

    // Set popover image to show
    var setPopoverImage = function (content) {

        // Set default image size
        popoverImage.width = popoverImage.defaultWidth;
        popoverImage.height = popoverImage.defaultHeight;

        // Pick up height and width from image(width,height):name
        if (content.charAt(5) == '(') {
            popoverImage.width = parseInt(content.slice(6));
            popoverImage.height = parseInt(content.slice(content.indexOf(',') + 1));
        }

        popoverImage.element.setAttribute('width', popoverImage.width);
        popoverImage.element.setAttribute('height', popoverImage.height);
        popoverImage.element.setAttribute('preserveAspectRatio', 'none');

        // attach image URL as a link
        content = content.slice(content.indexOf(':') + 1);
        popoverImage.element.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', content);
    };

    // Show popover text in given position
    var showPopoverText = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverText.height + 16 > domRect.y) {
            position.y = domRect.y - popoverText.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverText.width + 14 > domRect.x) {
            position.x = domRect.x - popoverText.width - 14;
        }

        // Change Box position
        popoverContainer.element.setAttribute('x', position.x + 10);
        popoverContainer.element.setAttribute('y', position.y + 4);
        popoverContainer.element.setAttribute('visibility', 'visible');

        // Change Text position
        popoverText.element.setAttribute('x', position.x + 14);
        popoverText.element.setAttribute('y', position.y + 18);
        popoverText.element.setAttribute('visibility', 'visible');

        // Change multiline text position
        var tspan = popoverText.element.querySelectorAll('tspan');
        for (var i = 0; i < tspan.length; i++) {
            tspan[i].setAttribute('x', position.x + 14);
        }

        // Font properties
        if (settings.hypertext_fontFamily != null)
            popoverText.element.setAttribute('font-family', settings.hypertext_fontFamily);
        if (settings.hypertext_fontStyle != null)
            popoverText.element.setAttribute('font-style', settings.hypertext_fontStyle);
        if (settings.hypertext_fontWeight != null)
            popoverText.element.setAttribute('font-weight', settings.hypertext_fontWeight);
        if (settings.hypertext_fontSize > 0)
            popoverText.element.setAttribute('font-size', settings.hypertext_fontSize);
    };

    // Show popover image in given position
    var showPopoverImage = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverImage.height + 16 > domRect.y) {
            position.y = domRect.y - popoverImage.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverImage.width + 14 > domRect.x) {
            position.x = domRect.x - popoverImage.width - 14;
        }

        popoverImage.element.setAttribute('x', position.x);
        popoverImage.element.setAttribute('y', position.y);
        popoverImage.element.setAttribute('visibility', 'visible');
    };

    // Hide all popovers
    var hidePopover = function () {
        popoverContainer.element.setAttribute('visibility', 'hidden');
        popoverText.element.setAttribute('visibility', 'hidden');
        popoverImage.element.setAttribute('visibility', 'hidden');
    };

    // Zoom svg inside viewbox
    var zoom = function (direction) {
        var zoomRate = 1.1;
        var viewBoxValues = getViewBox();

        var widthBefore = viewBoxValues[2];
        var heightBefore = viewBoxValues[3];

        if (direction == 'in') {
            viewBoxValues[2] /= zoomRate;
            viewBoxValues[3] /= zoomRate;
            // Pan to center
            viewBoxValues[0] -= (viewBoxValues[2] - widthBefore) / 2;
            viewBoxValues[1] -= (viewBoxValues[3] - heightBefore) / 2;
        }
        else if (direction == 'out') {
            viewBoxValues[2] *= zoomRate;
            viewBoxValues[3] *= zoomRate;
            // Pan to center
            viewBoxValues[0] += (widthBefore - viewBoxValues[2]) / 2;
            viewBoxValues[1] += (heightBefore - viewBoxValues[3]) / 2;
        }

        return viewBoxValues;
    };

    // Pan svg inside viewbox
    var pan = function (direction) {
        var panRate = 10;
        var viewBoxValues = getViewBox();

        switch (direction) {
            case 'left':
                viewBoxValues[0] += panRate;
                break;
            case 'right':
                viewBoxValues[0] -= panRate;
                break;
            case 'up':
                viewBoxValues[1] += panRate;
                break;
            case 'down':
                viewBoxValues[1] -= panRate;
                break;
        }

        return viewBoxValues;
    };

    // Toggle key and chart on/off or set manually to wanted
    var key = function (id, set, evt) {
        var visibility = null;

        // Chart element
        var chartElement = svgElement.getElementById(id.replace('_keyentry', ''));
        if (chartElement) {
            // Set on/off
            if (set === true || set === false) {
                visibility = set ? 'visible' : 'hidden';
            }
            // Toggle
            else {
                visibility = chartElement.getAttribute('visibility') == 'hidden' ? 'visible' : 'hidden';
            }
            chartElement.setAttribute('visibility', visibility);
        }

        // Key element
        var keyElement = svgElement.getElementById(id);
        if (keyElement && visibility) {
            keyElement.setAttribute('style', visibility == 'hidden' ? 'filter:url(#greybox)' : 'none');
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Toggle coordinates on/off or set manually to wanted
    var coordinate = function (set) {
        if (coordinateText.element) {
            // Set on/off
            if (set === true || set === false) {
                coordinateText.enabled = set;
            }
            // Toggle
            else {
                coordinateText.enabled = coordinateText.element.getAttribute('visibility') == 'hidden' ? true : false;
            }
            coordinateText.element.setAttribute('visibility', coordinateText.enabled ? 'visible' : 'hidden');
        }
    };

    // Toggle grid on/off or set manually to wanted
    var grid = function (set) {
        var grid = svgElement.getElementsByClassName('gridline');

        // Set on/off
        if (set === true || set === false) {
            gridEnabled = set;
        }
        // Toggle, get state from first element
        else if (grid.length) {
            gridEnabled = grid[0].getAttribute('visibility') == 'hidden' ? true : false;
        }

        for (i = 0; i < grid.length; i++) {
            grid[i].setAttribute('visibility', gridEnabled ? 'visible' : 'hidden');
        }
    };

    // Show popover text or image
    var popover = function (content, set, evt) {

        // Hide popover
        if (set === false) {
            hidePopover();

            if (evt !== undefined) {
                evt.stopPropagation();
                evt.preventDefault();
            }

            return;
        }

        var position = null;

        // Change content only if changed
        if (popoverContainer.content != content) {

            // Set current text
            popoverContainer.content = content;

            popoverImage.content = '';
            popoverText.content = content;

            // If text starts with image: process it as an xlinked bitmap
            if (content.substring(0, 5) == 'image') {
                var lines = content.split(/\n|\\n/g);
                var nameindex = lines[0].indexOf(':');
                if (nameindex > 0) {
                    popoverImage.content = lines.shift();
                    popoverText.content = '';

                    // Additional text lines
                    if (lines !== undefined && lines.length > 0) {
                        popoverText.content = lines.join('\n');
                    }
                }
            }

            // Set image content
            if(popoverImage.content){
                setPopoverImage(popoverImage.content);
            }

            // Set text content
            if(popoverText.content){
                setPopoverText(popoverText.content);
            }
        }

        if(popoverImage.content || popoverText.content){
            position = convertDOMToSVG({'x': evt.clientX, 'y': evt.clientY });
        }

        // Show popover image on mouse position
        if(popoverImage.content){
            showPopoverImage(position);
        }

        // Show popover on mouse position
        if(popoverText.content){
            showPopoverText(position);
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Parse plot settings
    parseSettings();

    // viewBox initial position and size
    viewBoxResetValue = getViewBox();

    // Set focusable for event focusing, not work on old svg version
    svgElement.setAttribute('focusable', true);

    // Disable native draggable
    svgElement.setAttribute('draggable', false);

    // Add events
    addEvents();

    // Return functions to outside use
    return {
        zoom: function (direction) {
            setViewBox(zoom(direction));
            return this;
        },
        pan: function (direction) {
            setViewBox(pan(direction));
            return this;
        },
        reset: function () {
            setViewBox(viewBoxResetValue);
            return this;
        },
        key: function (id, set) {
            key(id, set);
            return this;
        },
        coordinate: function (set) {
            coordinate(set);
            return this;
        },
        grid: function (set) {
            grid(set);
            return this;
        }
    };
};

// Old init function, remove when svg inline events removed
gnuplot_svg.Init = function() { };
]]>
</script>

<!-- Tie mousing to entire bounding box of the plot -->
<rect x="0" y="0" width="600" height="480" fill="#ffffff" stroke="black" stroke-width="1"
onclick="gnuplot_svg.toggleCoordBox(evt)"  onmousemove="gnuplot_svg.moveCoordBox(evt)"/>

<!-- Also track mouse when it is on a plot element -->
<g id="gnuplot_canvas" onclick="gnuplot_svg.toggleCoordBox(evt)" onmousemove="gnuplot_svg.moveCoordBox(evt)">

<defs>

	<circle id='gpDot' r='0.5' stroke-width='0.5' stroke='currentColor'/>
	<path id='gpPt0' stroke-width='0.222' stroke='currentColor' d='M-1,0 h2 M0,-1 v2'/>
	<path id='gpPt1' stroke-width='0.222' stroke='currentColor' d='M-1,-1 L1,1 M1,-1 L-1,1'/>
	<path id='gpPt2' stroke-width='0.222' stroke='currentColor' d='M-1,0 L1,0 M0,-1 L0,1 M-1,-1 L1,1 M-1,1 L1,-1'/>
	<rect id='gpPt3' stroke-width='0.222' stroke='currentColor' x='-1' y='-1' width='2' height='2'/>
	<rect id='gpPt4' stroke-width='0.222' stroke='currentColor' fill='currentColor' x='-1' y='-1' width='2' height='2'/>
	<circle id='gpPt5' stroke-width='0.222' stroke='currentColor' cx='0' cy='0' r='1'/>
	<use xlink:href='#gpPt5' id='gpPt6' fill='currentColor' stroke='none'/>
	<path id='gpPt7' stroke-width='0.222' stroke='currentColor' d='M0,-1.33 L-1.33,0.67 L1.33,0.67 z'/>
	<use xlink:href='#gpPt7' id='gpPt8' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt7' id='gpPt9' stroke='currentColor' transform='rotate(180)'/>
	<use xlink:href='#gpPt9' id='gpPt10' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt3' id='gpPt11' stroke='currentColor' transform='rotate(45)'/>
	<use xlink:href='#gpPt11' id='gpPt12' fill='currentColor' stroke='none'/>
	<path id='gpPt13' stroke-width='0.222' stroke='currentColor' d='M0,1.330 L1.265,0.411 L0.782,-1.067 L-0.782,-1.076 L-1.265,0.411 z'/>
	<use xlink:href='#gpPt13' id='gpPt14' fill='currentColor' stroke='none'/>
	<filter id='textbox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='white' flood-opacity='1' result='bgnd'/>
	  <feComposite in='SourceGraphic' in2='bgnd' operator='atop'/>
	</filter>
	<filter id='greybox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='lightgrey' flood-opacity='1' result='grey'/>
	  <feComposite in='SourceGraphic' in2='grey' operator='atop'/>
	</filter>
</defs>
<g fill="none" color="white" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,422.40 L73.14,422.40 M481.31,422.40 L472.31,422.40  '/>	<g transform="translate(55.75,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.0</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,348.72 L73.14,348.72 M481.31,348.72 L472.31,348.72  '/>	<g transform="translate(55.75,352.62)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.1</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,275.04 L73.14,275.04 M481.31,275.04 L472.31,275.04  '/>	<g transform="translate(55.75,278.94)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.2</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,201.37 L73.14,201.37 M481.31,201.37 L472.31,201.37  '/>	<g transform="translate(55.75,205.27)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.3</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,127.69 L73.14,127.69 M481.31,127.69 L472.31,127.69  '/>	<g transform="translate(55.75,131.59)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.4</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,54.01 L73.14,54.01 M481.31,54.01 L472.31,54.01  '/>	<g transform="translate(55.75,57.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.5</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M93.94,422.40 L93.94,413.40 M93.94,54.01 L93.94,63.01  '/>	<g transform="translate(93.94,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >-6</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M153.53,422.40 L153.53,413.40 M153.53,54.01 L153.53,63.01  '/>	<g transform="translate(153.53,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >-4</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M213.13,422.40 L213.13,413.40 M213.13,54.01 L213.13,63.01  '/>	<g transform="translate(213.13,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >-2</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M272.73,422.40 L272.73,413.40 M272.73,54.01 L272.73,63.01  '/>	<g transform="translate(272.73,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M332.32,422.40 L332.32,413.40 M332.32,54.01 L332.32,63.01  '/>	<g transform="translate(332.32,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 2</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M391.92,422.40 L391.92,413.40 M391.92,54.01 L391.92,63.01  '/>	<g transform="translate(391.92,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 4</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M451.51,422.40 L451.51,413.40 M451.51,54.01 L451.51,63.01  '/>	<g transform="translate(451.51,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 6</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,54.01 L64.14,422.40 L481.31,422.40 L481.31,54.01 L64.14,54.01 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(19.18,238.21) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >relative frequency</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(489.71,238.21) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(272.72,471.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >sample</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(272.72,57.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
	<g id="gnuplot_plot_1" ><title>103</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<g transform="translate(566.43,215.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">3</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(148,   0, 211)'  d='M515.48,211.21 L558.04,211.21  '/>	</g>
	<path stroke='rgb(148,   0, 211)'  d='M64.14,422.40 L65.63,422.40 L68.61,422.40 L71.59,422.40 L74.57,422.40 L77.55,422.40 L80.53,422.40 L83.51,422.40
		L86.49,422.40 L89.47,422.40 L92.45,422.40 L95.43,422.40 L98.41,422.40 L101.39,422.40 L104.37,422.40 L107.35,422.40
		L110.33,422.40 L113.31,422.40 L116.29,422.40 L119.27,422.40 L122.25,422.40 L125.23,422.40 L128.21,422.40 L131.19,422.40
		L134.16,422.40 L137.14,422.40 L140.12,422.40 L143.10,422.40 L146.08,422.40 L149.06,422.40 L152.04,422.40 L155.02,422.40
		L158.00,422.40 L160.98,422.40 L163.96,422.40 L166.94,422.40 L169.92,422.40 L172.90,422.40 L175.88,422.40 L178.86,422.40
		L181.84,422.40 L184.82,422.40 L187.80,422.40 L190.78,422.40 L193.76,422.40 L196.74,422.40 L199.72,422.40 L202.70,422.40
		L205.68,422.40 L208.66,422.40 L211.64,422.40 L214.62,422.40 L217.60,422.40 L220.58,422.40 L223.56,422.40 L226.54,422.40
		L229.52,422.40 L232.50,422.40 L235.48,422.40 L238.46,422.40 L241.44,422.40 L244.42,422.40 L247.40,422.40 L250.38,422.40
		L253.36,422.40 L256.34,422.40 L259.32,422.40 L262.30,422.40 L265.28,422.40 L268.26,422.40 L271.24,422.40 L271.24,407.66
		L274.21,407.66 L274.21,422.40 L277.19,422.40 L277.19,415.03 L280.17,415.03 L283.15,415.03 L283.15,407.66 L286.13,407.66
		L286.13,415.03 L289.11,415.03 L289.11,407.66 L292.09,407.66 L292.09,400.30 L295.07,400.30 L295.07,341.35 L298.05,341.35
		L298.05,385.56 L301.03,385.56 L301.03,378.19 L304.01,378.19 L304.01,297.15 L306.99,297.15 L306.99,341.35 L309.97,341.35
		L312.95,341.35 L312.95,289.78 L315.93,289.78 L315.93,326.62 L318.91,326.62 L318.91,356.09 L321.89,356.09 L321.89,311.88
		L324.87,311.88 L324.87,356.09 L327.85,356.09 L327.85,311.88 L330.83,311.88 L330.83,245.57 L333.81,245.57 L333.81,275.04
		L336.79,275.04 L336.79,260.31 L339.77,260.31 L339.77,230.84 L342.75,230.84 L342.75,157.16 L345.73,157.16 L345.73,171.89
		L348.71,171.89 L348.71,149.79 L351.69,149.79 L351.69,297.15 L354.67,297.15 L354.67,157.16 L357.65,157.16 L357.65,267.68
		L360.63,267.68 L360.63,216.10 L363.61,216.10 L363.61,171.89 L366.59,171.89 L366.59,194.00 L369.57,194.00 L369.57,208.73
		L372.55,208.73 L372.55,216.10 L375.53,216.10 L375.53,208.73 L378.51,208.73 L378.51,194.00 L381.49,194.00 L381.49,157.16
		L384.47,157.16 L384.47,186.63 L387.45,186.63 L387.45,201.37 L390.43,201.37 L390.43,194.00 L393.41,194.00 L393.41,201.37
		L396.39,201.37 L396.39,275.04 L399.37,275.04 L399.37,297.15 L402.35,297.15 L402.35,275.04 L405.33,275.04 L405.33,245.57
		L408.31,245.57 L408.31,319.25 L411.29,319.25 L411.29,289.78 L414.26,289.78 L414.26,326.62 L417.24,326.62 L417.24,319.25
		L420.22,319.25 L420.22,326.62 L423.20,326.62 L423.20,341.35 L426.18,341.35 L426.18,356.09 L429.16,356.09 L429.16,363.46
		L432.14,363.46 L432.14,392.93 L435.12,392.93 L435.12,356.09 L438.10,356.09 L438.10,400.30 L441.08,400.30 L441.08,422.40
		L444.06,422.40 L444.06,385.56 L447.04,385.56 L447.04,400.30 L450.02,400.30 L450.02,422.40 L453.00,422.40 L455.98,422.40
		L458.96,422.40 L458.96,407.66 L461.94,407.66 L461.94,422.40 L464.92,422.40 L467.90,422.40 L470.88,422.40 L473.86,422.40
		L476.84,422.40 L479.82,422.40 L481.31,422.40  '/></g>
	</g>
	<g id="gnuplot_plot_2" ><title>105</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_2_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_2')">
	<g transform="translate(566.43,233.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">5</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(  0, 158, 115)'  d='M515.48,229.21 L558.04,229.21  '/>	</g>
	<path stroke='rgb(  0, 158, 115)'  d='M64.14,422.40 L65.63,422.40 L68.61,422.40 L71.59,422.40 L71.59,422.33 L74.57,422.33 L74.57,422.40 L77.55,422.40
		L77.55,422.25 L80.53,422.25 L80.53,422.11 L83.51,422.11 L83.51,422.18 L86.49,422.18 L86.49,421.59 L89.47,421.59
		L92.45,421.59 L92.45,421.44 L95.43,421.44 L95.43,421.22 L98.41,421.22 L98.41,420.85 L101.39,420.85 L101.39,418.27
		L104.37,418.27 L104.37,418.05 L107.35,418.05 L107.35,414.66 L110.33,414.66 L110.33,416.06 L113.31,416.06 L113.31,412.53
		L116.29,412.53 L116.29,408.03 L119.27,408.03 L119.27,407.37 L122.25,407.37 L122.25,402.51 L125.23,402.51 L125.23,400.52
		L128.21,400.52 L128.21,392.78 L131.19,392.78 L131.19,392.12 L134.16,392.12 L134.16,385.63 L137.14,385.63 L137.14,375.98
		L140.12,375.98 L140.12,366.11 L143.10,366.11 L143.10,361.98 L146.08,361.98 L146.08,352.85 L149.06,352.85 L149.06,342.16
		L152.04,342.16 L152.04,333.77 L155.02,333.77 L155.02,319.55 L158.00,319.55 L158.00,302.45 L160.98,302.45 L160.98,301.49
		L163.96,301.49 L163.96,297.00 L166.94,297.00 L166.94,285.80 L169.92,285.80 L169.92,279.02 L172.90,279.02 L172.90,272.83
		L175.88,272.83 L175.88,257.80 L178.86,257.80 L178.86,265.10 L181.84,265.10 L181.84,255.74 L184.82,255.74 L184.82,257.66
		L187.80,257.66 L187.80,256.18 L190.78,256.18 L190.78,264.51 L193.76,264.51 L193.76,276.89 L196.74,276.89 L196.74,272.69
		L199.72,272.69 L199.72,283.59 L202.70,283.59 L202.70,287.42 L205.68,287.42 L205.68,304.96 L208.66,304.96 L208.66,311.81
		L211.64,311.81 L211.64,318.88 L214.62,318.88 L214.62,330.52 L217.60,330.52 L217.60,346.36 L220.58,346.36 L220.58,352.11
		L223.56,352.11 L223.56,358.15 L226.54,358.15 L226.54,369.35 L229.52,369.35 L229.52,375.03 L232.50,375.03 L232.50,381.95
		L235.48,381.95 L235.48,391.97 L238.46,391.97 L238.46,398.09 L241.44,398.09 L241.44,404.28 L244.42,404.28 L244.42,406.85
		L247.40,406.85 L247.40,410.02 L250.38,410.02 L250.38,411.79 L253.36,411.79 L253.36,415.47 L256.34,415.47 L256.34,416.51
		L259.32,416.51 L259.32,417.54 L262.30,417.54 L262.30,418.13 L265.28,418.13 L265.28,418.35 L268.26,418.35 L268.26,419.38
		L271.24,419.38 L271.24,419.45 L274.21,419.45 L274.21,418.94 L277.19,418.94 L277.19,417.54 L280.17,417.54 L283.15,417.54
		L283.15,416.36 L286.13,416.36 L286.13,416.28 L289.11,416.28 L289.11,413.63 L292.09,413.63 L292.09,411.72 L295.07,411.72
		L295.07,409.58 L298.05,409.58 L298.05,405.68 L301.03,405.68 L301.03,401.11 L304.01,401.11 L304.01,396.32 L306.99,396.32
		L306.99,393.52 L309.97,393.52 L309.97,387.70 L312.95,387.70 L312.95,380.40 L315.93,380.40 L315.93,374.21 L318.91,374.21
		L318.91,368.69 L321.89,368.69 L321.89,356.46 L324.87,356.46 L324.87,352.85 L327.85,352.85 L327.85,345.04 L330.83,345.04
		L330.83,336.57 L333.81,336.57 L333.81,328.39 L336.79,328.39 L336.79,317.85 L339.77,317.85 L339.77,311.81 L342.75,311.81
		L342.75,313.65 L345.73,313.65 L345.73,307.02 L348.71,307.02 L348.71,297.22 L351.69,297.22 L351.69,302.16 L354.67,302.16
		L354.67,286.83 L357.65,286.83 L357.65,294.49 L360.63,294.49 L360.63,292.58 L363.61,292.58 L363.61,296.12 L366.59,296.12
		L366.59,288.01 L369.57,288.01 L369.57,292.36 L372.55,292.36 L372.55,301.42 L375.53,301.42 L375.53,302.45 L378.51,302.45
		L378.51,305.33 L381.49,305.33 L381.49,314.68 L384.47,314.68 L384.47,327.87 L387.45,327.87 L387.45,332.59 L390.43,332.59
		L390.43,342.46 L393.41,342.46 L393.41,351.30 L396.39,351.30 L396.39,361.62 L399.37,361.62 L399.37,366.48 L402.35,366.48
		L402.35,372.15 L405.33,372.15 L405.33,383.42 L408.31,383.42 L408.31,388.21 L411.29,388.21 L411.29,392.19 L414.26,392.19
		L414.26,396.98 L417.24,396.98 L417.24,402.36 L420.22,402.36 L420.22,405.82 L423.20,405.82 L423.20,406.04 L426.18,406.04
		L426.18,409.73 L429.16,409.73 L429.16,412.67 L432.14,412.67 L432.14,414.88 L435.12,414.88 L435.12,414.96 L438.10,414.96
		L438.10,418.05 L441.08,418.05 L441.08,419.08 L444.06,419.08 L444.06,418.86 L447.04,418.86 L447.04,419.67 L450.02,419.67
		L450.02,420.85 L453.00,420.85 L453.00,421.37 L455.98,421.37 L455.98,422.25 L458.96,422.25 L458.96,421.44 L461.94,421.44
		L461.94,421.96 L464.92,421.96 L464.92,422.03 L467.90,422.03 L467.90,422.33 L470.88,422.33 L470.88,422.11 L473.86,422.11
		L473.86,422.25 L476.84,422.25 L476.84,422.40 L479.82,422.40 L481.31,422.40  '/></g>
	</g>
	<g id="gnuplot_plot_3" ><title>107</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_3_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_3')">
	<g transform="translate(566.43,251.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">7</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb( 86, 180, 233)'  d='M515.48,247.21 L558.04,247.21  '/>	</g>
	<path stroke='rgb( 86, 180, 233)'  d='M64.14,422.35 L65.63,422.35 L65.63,422.34 L68.61,422.34 L68.61,422.30 L71.59,422.30 L71.59,422.27 L74.57,422.27
		L74.57,422.20 L77.55,422.20 L77.55,422.09 L80.53,422.09 L80.53,421.98 L83.51,421.98 L83.51,421.78 L86.49,421.78
		L86.49,421.58 L89.47,421.58 L89.47,421.28 L92.45,421.28 L92.45,420.86 L95.43,420.86 L95.43,420.35 L98.41,420.35
		L98.41,419.78 L101.39,419.78 L101.39,418.86 L104.37,418.86 L104.37,417.69 L107.35,417.69 L107.35,416.13 L110.33,416.13
		L110.33,414.56 L113.31,414.56 L113.31,412.64 L116.29,412.64 L116.29,410.24 L119.27,410.24 L119.27,407.17 L122.25,407.17
		L122.25,403.68 L125.23,403.68 L125.23,399.35 L128.21,399.35 L128.21,394.54 L131.19,394.54 L131.19,389.34 L134.16,389.34
		L134.16,383.01 L137.14,383.01 L137.14,376.38 L140.12,376.38 L140.12,369.40 L143.10,369.40 L143.10,362.29 L146.08,362.29
		L146.08,353.69 L149.06,353.69 L149.06,345.03 L152.04,345.03 L152.04,337.41 L155.02,337.41 L155.02,328.71 L158.00,328.71
		L158.00,320.03 L160.98,320.03 L160.98,311.51 L163.96,311.51 L163.96,305.00 L166.94,305.00 L166.94,298.14 L169.92,298.14
		L169.92,292.40 L172.90,292.40 L172.90,287.75 L175.88,287.75 L175.88,284.64 L178.86,284.64 L178.86,282.34 L181.84,282.34
		L181.84,280.78 L184.82,280.78 L184.82,281.43 L187.80,281.43 L187.80,284.07 L190.78,284.07 L190.78,287.38 L193.76,287.38
		L193.76,291.68 L196.74,291.68 L196.74,297.23 L199.72,297.23 L199.72,304.75 L202.70,304.75 L202.70,311.65 L205.68,311.65
		L205.68,319.64 L208.66,319.64 L208.66,328.46 L211.64,328.46 L211.64,337.03 L214.62,337.03 L214.62,345.09 L217.60,345.09
		L217.60,353.42 L220.58,353.42 L220.58,362.01 L223.56,362.01 L223.56,369.48 L226.54,369.48 L226.54,376.65 L229.52,376.65
		L229.52,382.93 L232.50,382.93 L232.50,389.20 L235.48,389.20 L235.48,394.46 L238.46,394.46 L238.46,399.16 L241.44,399.16
		L241.44,403.09 L244.42,403.09 L244.42,406.66 L247.40,406.66 L247.40,409.71 L250.38,409.71 L250.38,412.13 L253.36,412.13
		L253.36,414.23 L256.34,414.23 L256.34,415.90 L259.32,415.90 L259.32,417.19 L262.30,417.19 L262.30,418.11 L265.28,418.11
		L265.28,418.73 L268.26,418.73 L268.26,419.15 L271.24,419.15 L271.24,419.18 L274.21,419.18 L274.21,419.08 L277.19,419.08
		L277.19,418.66 L280.17,418.66 L280.17,417.94 L283.15,417.94 L283.15,416.90 L286.13,416.90 L286.13,415.56 L289.11,415.56
		L289.11,413.58 L292.09,413.58 L292.09,411.26 L295.07,411.26 L295.07,408.89 L298.05,408.89 L298.05,405.56 L301.03,405.56
		L301.03,401.54 L304.01,401.54 L304.01,397.21 L306.99,397.21 L306.99,391.93 L309.97,391.93 L309.97,386.30 L312.95,386.30
		L312.95,379.70 L315.93,379.70 L315.93,372.25 L318.91,372.25 L318.91,364.58 L321.89,364.58 L321.89,356.28 L324.87,356.28
		L324.87,347.79 L327.85,347.79 L327.85,338.17 L330.83,338.17 L330.83,329.57 L333.81,329.57 L333.81,319.77 L336.79,319.77
		L336.79,311.81 L339.77,311.81 L339.77,302.56 L342.75,302.56 L342.75,294.74 L345.73,294.74 L345.73,287.01 L348.71,287.01
		L348.71,280.83 L351.69,280.83 L351.69,275.51 L354.67,275.51 L354.67,272.35 L357.65,272.35 L357.65,270.01 L360.63,270.01
		L360.63,269.42 L363.61,269.42 L363.61,269.94 L366.59,269.94 L366.59,272.07 L369.57,272.07 L369.57,276.37 L372.55,276.37
		L372.55,281.06 L375.53,281.06 L375.53,287.63 L378.51,287.63 L378.51,295.09 L381.49,295.09 L381.49,303.26 L384.47,303.26
		L384.47,311.93 L387.45,311.93 L387.45,320.59 L390.43,320.59 L390.43,330.20 L393.41,330.20 L393.41,339.24 L396.39,339.24
		L396.39,348.00 L399.37,348.00 L399.37,356.88 L402.35,356.88 L402.35,364.98 L405.33,364.98 L405.33,372.97 L408.31,372.97
		L408.31,379.70 L411.29,379.70 L411.29,386.49 L414.26,386.49 L414.26,392.34 L417.24,392.34 L417.24,397.22 L420.22,397.22
		L420.22,401.96 L423.20,401.96 L423.20,405.83 L426.18,405.83 L426.18,409.10 L429.16,409.10 L429.16,411.74 L432.14,411.74
		L432.14,413.81 L435.12,413.81 L435.12,415.75 L438.10,415.75 L438.10,417.40 L441.08,417.40 L441.08,418.46 L444.06,418.46
		L444.06,419.41 L447.04,419.41 L447.04,420.17 L450.02,420.17 L450.02,420.67 L453.00,420.67 L453.00,421.23 L455.98,421.23
		L455.98,421.53 L458.96,421.53 L458.96,421.78 L461.94,421.78 L461.94,421.98 L464.92,421.98 L464.92,422.11 L467.90,422.11
		L467.90,422.21 L470.88,422.21 L470.88,422.25 L473.86,422.25 L473.86,422.31 L476.84,422.31 L476.84,422.34 L479.82,422.34
		L479.82,422.37 L481.31,422.37  '/></g>
	</g>
	<g id="gnuplot_plot_4" ><title>pdf</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_4_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_4')">
	<g transform="translate(566.43,269.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >pdf</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black' stroke-dasharray='10.0,5.0'  d='M515.48,265.21 L558.04,265.21  '/>	</g>
	<path stroke='black' stroke-dasharray='10.0,5.0'  d='M64.14,422.35 L68.35,422.31 L72.57,422.25 L76.78,422.15 L81.00,422.00 L85.21,421.75 L89.42,421.38 L93.64,420.82
		L97.85,420.00 L102.06,418.83 L106.28,417.21 L110.49,414.99 L114.71,412.04 L118.92,408.19 L123.13,403.30 L127.35,397.24
		L131.56,389.91 L135.78,381.27 L139.99,371.37 L144.20,360.34 L148.42,348.42 L152.63,335.96 L156.84,323.40 L161.06,311.25
		L165.27,300.09 L169.49,290.47 L173.70,282.91 L177.91,277.84 L182.13,275.55 L186.34,276.18 L190.56,279.69 L194.77,285.87
		L198.98,294.37 L203.20,304.72 L207.41,316.37 L211.62,328.76 L215.84,341.34 L220.05,353.62 L224.27,365.19 L228.48,375.76
		L232.69,385.12 L236.91,393.19 L241.12,399.95 L245.34,405.47 L249.55,409.84 L253.76,413.21 L257.98,415.70 L262.19,417.44
		L266.40,418.54 L270.62,419.07 L274.83,419.07 L279.05,418.54 L283.26,417.44 L287.47,415.70 L291.69,413.21 L295.90,409.84
		L300.11,405.47 L304.33,399.95 L308.54,393.19 L312.76,385.12 L316.97,375.76 L321.18,365.19 L325.40,353.62 L329.61,341.34
		L333.83,328.76 L338.04,316.37 L342.25,304.72 L346.47,294.37 L350.68,285.87 L354.89,279.69 L359.11,276.18 L363.32,275.55
		L367.54,277.84 L371.75,282.91 L375.96,290.47 L380.18,300.09 L384.39,311.25 L388.61,323.40 L392.82,335.96 L397.03,348.42
		L401.25,360.34 L405.46,371.37 L409.67,381.27 L413.89,389.91 L418.10,397.24 L422.32,403.30 L426.53,408.19 L430.74,412.04
		L434.96,414.99 L439.17,417.21 L443.39,418.83 L447.60,420.00 L451.81,420.82 L456.03,421.38 L460.24,421.75 L464.45,422.00
		L468.67,422.15 L472.88,422.25 L477.10,422.31 L481.31,422.35  '/></g>
	</g>
<g fill="none" color="white" stroke="black" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="black" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,54.01 L64.14,422.40 L481.31,422.40 L481.31,54.01 L64.14,54.01 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(272.72,30.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >step size : 0.5</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>

<script type="text/javascript"><![CDATA[
// plot boundaries and axis scaling information for mousing 
gnuplot_svg.plot_term_xmax = 600;
gnuplot_svg.plot_term_ymax = 480;
gnuplot_svg.plot_xmin = 64.1;
gnuplot_svg.plot_xmax = 481.3;
gnuplot_svg.plot_ybot = 422.4;
gnuplot_svg.plot_ytop = 54.0;
gnuplot_svg.plot_width = 417.2;
gnuplot_svg.plot_height = 368.4;
gnuplot_svg.plot_axis_xmin = -7;
gnuplot_svg.plot_axis_xmax = 7;
gnuplot_svg.plot_axis_ymin = 0;
gnuplot_svg.plot_axis_ymax = 0.5;
gnuplot_svg.polar_mode = false;
gnuplot_svg.plot_axis_x2min = "none";
gnuplot_svg.plot_axis_y2min = "none";
gnuplot_svg.plot_logaxis_x = 0;
gnuplot_svg.plot_logaxis_y = 0;
gnuplot_svg.plot_timeaxis_x = "";
gnuplot_svg.plot_timeaxis_y = "";
gnuplot_svg.hypertext_fontSize = 0;
gnuplot_svg.hypertext_fontName = null;
gnuplot_svg.hypertext_fontStyle = null;
gnuplot_svg.hypertext_fontWeight = null;
]]>
</script>
</g>

  <text id="coord_text" text-anchor="start" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <rect id="hypertextbox" class="hypertextbox" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="16" visibility="hidden" />

  <text id="hypertext" class="hypertext" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <image id="hyperimage" class="hyperimage" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="200" width="300" visibility="hidden" />
</svg>

