<?xml version="1.0" encoding="utf-8"  standalone="no"?>
<svg  onload="if (typeof(gnuplot_svg)!='undefined') gnuplot_svg.Init(evt)" 
 width="800" height="450"
 viewBox="0 0 800 450"
 xmlns="http://www.w3.org/2000/svg"
 xmlns:xlink="http://www.w3.org/1999/xlink"
>

<title>Gnuplot</title>
<desc>Produced by GNUPLOT 5.4 patchlevel 2 </desc>

<script type="text/javascript" > <![CDATA[
// From:	Marko Karjalainen <markokarjalainen@kolumbus.fi>
// Date:	27 Aug 2018
// Experimental gnuplot plugin for svg
//
// All svg elements on page get own gnuplot plugin attached by js, so no conflict with global variables.
//
// Javascript variables are read from second script tag and converted to json for import to plugin.
// Inline events are removed from xml and new ones are attached with addEventListener function.
// Inline events should be removed from xml and xml should have better id/class names to attach events from js.
//
// Improved mouseover text and image handling
//   content changed to xml only if it really changed and bouncing is calculated once.
//
// Convert functions are same as before, maybe renamed better.
//
// Javascript routines for mouse and keyboard interaction with
// SVG documents produced by gnuplot SVG terminal driver.

// TODO do not create inline events to svg and give id or classes for getting elements
// TODO make own svg layer x/y range sized for coordinates?

if (window) {
    window.addEventListener('load', function () {
        // Find svg elements
        var svg = document.querySelectorAll('svg');
        for (var i = 0; i < svg.length; i++) {
            // Init plugin
            if (!svg[i].gnuplot) {
                // Check if gnuplot generated svg
                if(svg[i].getElementById('gnuplot_canvas')){
                    svg[i].gnuplot = new gnuplot_svg(svg[i]);
                }
            }
        }
    });
}

gnuplot_svg = function (svgElement) {

    var version = '09 April 2019';

    var settings = {};

    var viewBoxResetValue = [];

    var drag = {
        'enabled': false,
        'offset': { 'x': 0, 'y': 0 },
        'change': svgElement.createSVGPoint(),
        'timeout': null
    };

    var coordinateText = {
        'enabled': false,
        'element': svgElement.getElementById('coord_text')
    };

    var popoverContainer = {
        'element': null,
        'content': null,
    };

    var popoverImage = {
        'element': null,
        'content': null,
        'width': 300,
        'height': 200,
        'defaultWidth': 300,
        'defaultHeight': 200,
    };

    var popoverText = {
        'element': null,
        'content': null,
        'width': 11,
        'height': 16,
        'defaultWidth': 11,
        'defaultHeight': 16,
    };

    var point = svgElement.createSVGPoint();

    var axisDate = new Date();

    var gridEnabled = false;

    // Get plot boundaries and axis scaling information for mousing from current object script tag
    // TODO add these to svg xml custom attribute for reading(json format)
    var parseSettings = function () {
        var script = svgElement.querySelectorAll('script');
        if (script && script[1]) {
            var scriptText = script[1].firstChild.nodeValue;
            // Remove inline comments
            scriptText = scriptText.replace(/^\s*\/\/.*\n/g, '');
            // Change prefix to "
            scriptText = scriptText.replace(/gnuplot_svg\./g, '"');
            // Change = to " :
            scriptText = scriptText.replace(/ = /g, '" : ');
            // Change line endings to comma
            scriptText = scriptText.replace(/;\n|\n/g, ',');
            // Remove last comma
            scriptText = scriptText.replace(/,+$/, '');
            // Parse as json string
            settings = JSON.parse("{\n" + scriptText + "\n}");
        }
    };

    // Add interactive events
    var addEvents = function () {
        var i;

        // Get keyentry elements
        var toggleVisibility = svgElement.querySelectorAll('g[id$="_keyentry"]');
        for (i = 0; i < toggleVisibility.length; i++) {
            // ------- Remove inline events
            toggleVisibility[i].removeAttribute('onclick');
            // -------

            // Add keyentry event to toggle visibility
            toggleVisibility[i].addEventListener('click', key.bind(null, toggleVisibility[i].getAttribute('id'), null));
        }

        // ------- Remove inline events from bounding box
        var boundingBox = svgElement.querySelector('rect[onclick^="gnuplot_svg.toggleCoordBox"]');
        if (boundingBox) {
            boundingBox.removeAttribute('onclick');
            boundingBox.removeAttribute('onmousemove');
        }
        // ------- Remove inline events from canvas
        var canvas = svgElement.getElementById('gnuplot_canvas');
        if (canvas) {
            canvas.removeAttribute('onclick');
            canvas.removeAttribute('onmousemove');
        }
        // -------

        // Get grid image
        var toggleGrid = svgElement.querySelector('image[onclick^="gnuplot_svg.toggleGrid"]');
        if (toggleGrid) {
            // ------- Remove inline events
            toggleGrid.removeAttribute('onclick');
            // -------

            // Add Toggle grid image event
            toggleGrid.addEventListener('click', function (evt) {
                grid();
                evt.preventDefault();
                evt.stopPropagation();
            });
        }

        // Get hypertexts
        var hyperText = svgElement.querySelectorAll('g[onmousemove^="gnuplot_svg.showHypertext"]');

        // Set view element variables
        if (hyperText.length) {
            popoverContainer.element = svgElement.getElementById('hypertextbox');
            popoverText.element = svgElement.getElementById('hypertext');
            popoverImage.element = svgElement.getElementById('hyperimage');
            popoverImage.defaultWidth = popoverImage.element.getAttribute('width');
            popoverImage.defaultHeight = popoverImage.element.getAttribute('height');
        }

        for (i = 0; i < hyperText.length; i++) {
            // Get text from attr uggly way, svg has empty title element
            var text = hyperText[i].getAttribute('onmousemove').substr(31).slice(0, -2);

            // ------- Remove inline events
            hyperText[i].removeAttribute('onmousemove');
            hyperText[i].removeAttribute('onmouseout');
            // -------

            // Add event
            hyperText[i].addEventListener('mousemove', popover.bind(null, text, true));
            hyperText[i].addEventListener('mouseout', popover.bind(null, null, false));
        }

        // Toggle coordinates visibility on left click on boundingBox element
        svgElement.addEventListener('click', function (evt) {
            if (!drag.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                coordinate();
                setCoordinateLabel(evt);
            }
        });

        // Save move start position, enable drag after delay
        svgElement.addEventListener('mousedown', function (evt) {

            drag.offset = { 'x': evt.clientX, 'y': evt.clientY };

            // Delay for moving, so not move accidentally if only click
            drag.timeout = setTimeout(function () {
                drag.enabled = true;
            }, 250);

            // Cancel draggable
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Disable drag
        svgElement.addEventListener('mouseup', function (evt) {
            drag.enabled = false;
            clearTimeout(drag.timeout);
        });

        // Mouse move
        svgElement.addEventListener('mousemove', function (evt) {

            // Drag svg element
            if (evt.buttons == 1 && drag.enabled) {

                // Position change
                drag.change.x = evt.clientX - drag.offset.x;
                drag.change.y = evt.clientY - drag.offset.y;

                // Set current mouse position
                drag.offset.x = evt.clientX;
                drag.offset.y = evt.clientY;

                // Convert to svg position
                drag.change.matrixTransform(svgElement.getScreenCTM().inverse());

                var viewBoxValues = getViewBox();

                viewBoxValues[0] -= drag.change.x;
                viewBoxValues[1] -= drag.change.y;

                setViewBox(viewBoxValues);
            }

            // View coordinates on mousemove over svg element
            if (coordinateText.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                setCoordinateLabel(evt);
            }

        });

        // Zoom with wheel
        svgElement.addEventListener('wheel', function (evt) {
            // x or y scroll zoom both axels
            var delta = Math.max(-1, Math.min(1, (evt.deltaY || evt.deltaX)));

            if (delta > 0) {
                setViewBox(zoom('in'));
            }
            else {
                setViewBox(zoom('out'));
            }

            // Disable scroll the entire webpage
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Reset on right click or hold tap
        svgElement.addEventListener('contextmenu', function (evt) {

            setViewBox(viewBoxResetValue);

            // Disable native context menu
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Keyboard actions, old svg version not support key events so must listen window
        window.addEventListener('keydown', function (evt) {

            // Not capture event from inputs
            // body = svg inline in page, svg = plain svg file, window = delegated events to object
            if (evt.target.nodeName != 'BODY' && evt.target.nodeName != 'svg' && evt.target != window) {
                return true;
            }

            var viewBoxValues = [];

            switch (evt.key) {
                // Move, Edge sends without Arrow word
                case 'ArrowLeft':
                case 'Left':
                case 'ArrowRight':
                case 'Right':
                case 'ArrowUp':
                case 'Up':
                case 'ArrowDown':
                case 'Down':
                    viewBoxValues = pan(evt.key.replace('Arrow', '').toLowerCase());
                    break;
                // Zoom in
                case '+':
                case 'Add':
                    viewBoxValues = zoom('in');
                    break;
                // Zoom out
                case '-':
                case 'Subtract':
                    viewBoxValues = zoom('out');
                    break;
                // Reset
                case 'Home':
                    viewBoxValues = viewBoxResetValue;
                    break;
                // Toggle grid
                case '#':
                    grid();
                    break;
            }

            if (viewBoxValues.length) {
                setViewBox(viewBoxValues);
            }
        });
    };

    // Get svg viewbox details
    var getViewBox = function () {
        var viewBoxValues = svgElement.getAttribute('viewBox').split(' ');
        viewBoxValues[0] = parseFloat(viewBoxValues[0]);
        viewBoxValues[1] = parseFloat(viewBoxValues[1]);
        viewBoxValues[2] = parseFloat(viewBoxValues[2]);
        viewBoxValues[3] = parseFloat(viewBoxValues[3]);
        return viewBoxValues;
    };

    // Set svg viewbox details
    var setViewBox = function (viewBoxValues) {
        svgElement.setAttribute('viewBox', viewBoxValues.join(' '));
    };

    // Set coordinate label position and text
    var setCoordinateLabel = function (evt) {
        var position = convertDOMToSVG({ 'x': evt.clientX, 'y': evt.clientY });

        // Set coordinate label position
        coordinateText.element.setAttribute('x', position.x);
        coordinateText.element.setAttribute('y', position.y);

        // Convert svg position to plot coordinates
        var plotcoord = convertSVGToPlot(position);

        // Parse label to view
        var label = parseCoordinateLabel(plotcoord);

        // Set coordinate label text
        coordinateText.element.textContent = label.x + ' ' + label.y;
    };

    // Convert position DOM to SVG
    var convertDOMToSVG = function (position) {
        point.x = position.x;
        point.y = position.y;
        return point.matrixTransform(svgElement.getScreenCTM().inverse());
    };

    // Convert position SVG to Plot
    var convertSVGToPlot = function (position) {
        var plotcoord = {};
        var plotx = position.x - settings.plot_xmin;
        var ploty = position.y - settings.plot_ybot;
        var x, y;

        if (settings.plot_logaxis_x !== 0) {
            x = Math.log(settings.plot_axis_xmax)
                - Math.log(settings.plot_axis_xmin);
            x = x * (plotx / (settings.plot_xmax - settings.plot_xmin))
                + Math.log(settings.plot_axis_xmin);
            x = Math.exp(x);
        } else {
            x = settings.plot_axis_xmin + (plotx / (settings.plot_xmax - settings.plot_xmin)) * (settings.plot_axis_xmax - settings.plot_axis_xmin);
        }

        if (settings.plot_logaxis_y !== 0) {
            y = Math.log(settings.plot_axis_ymax)
                - Math.log(settings.plot_axis_ymin);
            y = y * (ploty / (settings.plot_ytop - settings.plot_ybot))
                + Math.log(settings.plot_axis_ymin);
            y = Math.exp(y);
        } else {
            y = settings.plot_axis_ymin + (ploty / (settings.plot_ytop - settings.plot_ybot)) * (settings.plot_axis_ymax - settings.plot_axis_ymin);
        }

        plotcoord.x = x;
        plotcoord.y = y;
        return plotcoord;
    };

    // Parse plot x/y values to label
    var parseCoordinateLabel = function (plotcoord) {
        var label = { 'x': 0, 'y': 0 };

        if (settings.plot_timeaxis_x == 'DMS' || settings.plot_timeaxis_y == 'DMS') {
            if (settings.plot_timeaxis_x == 'DMS') {
                label.x = convertToDMS(plotcoord.x);
            }
            else {
                label.x = plotcoord.x.toFixed(2);
            }

            if (settings.plot_timeaxis_y == 'DMS') {
                label.y = convertToDMS(plotcoord.y);
            }
            else {
                label.y = plotcoord.y.toFixed(2);
            }

        } else if (settings.polar_mode) {
            polar = convertToPolar(plotcoord.x, plotcoord.y);
            label.x = 'ang= ' + polar.ang.toPrecision(4);
            label.y = 'R= ' + polar.r.toPrecision(4);

        } else if (settings.plot_timeaxis_x == 'Date') {
            axisDate.setTime(1000 * plotcoord.x);
            var year = axisDate.getUTCFullYear();
            var month = axisDate.getUTCMonth();
            var date = axisDate.getUTCDate();
            label.x = (' ' + date).slice(-2) + '/' + ('0' + (month + 1)).slice(-2) + '/' + year;
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'Time') {
            axisDate.setTime(1000 * plotcoord.x);
            var hour = axisDate.getUTCHours();
            var minute = axisDate.getUTCMinutes();
            var second = axisDate.getUTCSeconds();
            label.x = ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2) + ':' + ('0' + second).slice(-2);
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'DateTime') {
            axisDate.setTime(1000 * plotcoord.x);
            label.x = axisDate.toUTCString();
            label.y = plotcoord.y.toFixed(2);
        } else {
            label.x = plotcoord.x.toFixed(2);
            label.y = plotcoord.y.toFixed(2);
        }

        return label;
    };

    // Convert position to Polar
    var convertToPolar = function (x, y) {
        polar = {};
        var phi, r;
        phi = Math.atan2(y, x);
        if (settings.plot_logaxis_r) {
            r = Math.exp((x / Math.cos(phi) + Math.log(settings.plot_axis_rmin) / Math.LN10) * Math.LN10);
        }
        else if (settings.plot_axis_rmin > settings.plot_axis_rmax) {
            r = settings.plot_axis_rmin - x / Math.cos(phi);
        } else {
            r = settings.plot_axis_rmin + x / Math.cos(phi);
        }
        phi = phi * (180 / Math.PI);
        if (settings.polar_sense < 0) {
            phi = -phi;
        }
        if (settings.polar_theta0 !== undefined) {
            phi = phi + settings.polar_theta0;
        }
        if (phi > 180) { phi = phi - 360; }
        polar.r = r;
        polar.ang = phi;
        return polar;
    };

    // Convert position to DMS
    var convertToDMS = function (x) {
        var dms = { d: 0, m: 0, s: 0 };
        var deg = Math.abs(x);
        dms.d = Math.floor(deg);
        dms.m = Math.floor((deg - dms.d) * 60);
        dms.s = Math.floor((deg - dms.d) * 3600 - dms.m * 60);
        fmt = ((x < 0) ? '-' : ' ') + dms.d.toFixed(0) + '°' + dms.m.toFixed(0) + '"' + dms.s.toFixed(0) + "'";
        return fmt;
    };

    // Set popover text to show
    var setPopoverText = function (content) {

        // Minimum length
        popoverText.width = popoverText.defaultWidth;

        // Remove old texts
        while (null !== popoverText.element.firstChild) {
            popoverText.element.removeChild(popoverText.element.firstChild);
        }

        var lines = content.split(/\n|\\n/g);

        // Single line
        if (lines.length <= 1) {
            popoverText.element.textContent = content;
            popoverText.width = popoverText.element.getComputedTextLength() + 8;
        }
        // Multiple lines
        else {
            var lineWidth = 0;
            var tspanElement;

            for (var l = 0; l < lines.length; l++) {
                tspanElement = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
                // Y relative position
                if (l > 0) {
                    tspanElement.setAttribute('dy', popoverText.defaultHeight);
                }
                // Append text
                tspanElement.appendChild(document.createTextNode(lines[l]));
                popoverText.element.appendChild(tspanElement);

                // Max line width
                lineWidth = tspanElement.getComputedTextLength() + 8;
                if (popoverText.width < lineWidth) {
                    popoverText.width = lineWidth;
                }
            }
        }

        // Box Height
        popoverText.height = 2 + popoverText.defaultHeight * lines.length;
        popoverContainer.element.setAttribute('height', popoverText.height);

        // Box Width
        popoverContainer.element.setAttribute('width', popoverText.width);
    };

    // Set popover image to show
    var setPopoverImage = function (content) {

        // Set default image size
        popoverImage.width = popoverImage.defaultWidth;
        popoverImage.height = popoverImage.defaultHeight;

        // Pick up height and width from image(width,height):name
        if (content.charAt(5) == '(') {
            popoverImage.width = parseInt(content.slice(6));
            popoverImage.height = parseInt(content.slice(content.indexOf(',') + 1));
        }

        popoverImage.element.setAttribute('width', popoverImage.width);
        popoverImage.element.setAttribute('height', popoverImage.height);
        popoverImage.element.setAttribute('preserveAspectRatio', 'none');

        // attach image URL as a link
        content = content.slice(content.indexOf(':') + 1);
        popoverImage.element.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', content);
    };

    // Show popover text in given position
    var showPopoverText = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverText.height + 16 > domRect.y) {
            position.y = domRect.y - popoverText.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverText.width + 14 > domRect.x) {
            position.x = domRect.x - popoverText.width - 14;
        }

        // Change Box position
        popoverContainer.element.setAttribute('x', position.x + 10);
        popoverContainer.element.setAttribute('y', position.y + 4);
        popoverContainer.element.setAttribute('visibility', 'visible');

        // Change Text position
        popoverText.element.setAttribute('x', position.x + 14);
        popoverText.element.setAttribute('y', position.y + 18);
        popoverText.element.setAttribute('visibility', 'visible');

        // Change multiline text position
        var tspan = popoverText.element.querySelectorAll('tspan');
        for (var i = 0; i < tspan.length; i++) {
            tspan[i].setAttribute('x', position.x + 14);
        }

        // Font properties
        if (settings.hypertext_fontFamily != null)
            popoverText.element.setAttribute('font-family', settings.hypertext_fontFamily);
        if (settings.hypertext_fontStyle != null)
            popoverText.element.setAttribute('font-style', settings.hypertext_fontStyle);
        if (settings.hypertext_fontWeight != null)
            popoverText.element.setAttribute('font-weight', settings.hypertext_fontWeight);
        if (settings.hypertext_fontSize > 0)
            popoverText.element.setAttribute('font-size', settings.hypertext_fontSize);
    };

    // Show popover image in given position
    var showPopoverImage = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverImage.height + 16 > domRect.y) {
            position.y = domRect.y - popoverImage.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverImage.width + 14 > domRect.x) {
            position.x = domRect.x - popoverImage.width - 14;
        }

        popoverImage.element.setAttribute('x', position.x);
        popoverImage.element.setAttribute('y', position.y);
        popoverImage.element.setAttribute('visibility', 'visible');
    };

    // Hide all popovers
    var hidePopover = function () {
        popoverContainer.element.setAttribute('visibility', 'hidden');
        popoverText.element.setAttribute('visibility', 'hidden');
        popoverImage.element.setAttribute('visibility', 'hidden');
    };

    // Zoom svg inside viewbox
    var zoom = function (direction) {
        var zoomRate = 1.1;
        var viewBoxValues = getViewBox();

        var widthBefore = viewBoxValues[2];
        var heightBefore = viewBoxValues[3];

        if (direction == 'in') {
            viewBoxValues[2] /= zoomRate;
            viewBoxValues[3] /= zoomRate;
            // Pan to center
            viewBoxValues[0] -= (viewBoxValues[2] - widthBefore) / 2;
            viewBoxValues[1] -= (viewBoxValues[3] - heightBefore) / 2;
        }
        else if (direction == 'out') {
            viewBoxValues[2] *= zoomRate;
            viewBoxValues[3] *= zoomRate;
            // Pan to center
            viewBoxValues[0] += (widthBefore - viewBoxValues[2]) / 2;
            viewBoxValues[1] += (heightBefore - viewBoxValues[3]) / 2;
        }

        return viewBoxValues;
    };

    // Pan svg inside viewbox
    var pan = function (direction) {
        var panRate = 10;
        var viewBoxValues = getViewBox();

        switch (direction) {
            case 'left':
                viewBoxValues[0] += panRate;
                break;
            case 'right':
                viewBoxValues[0] -= panRate;
                break;
            case 'up':
                viewBoxValues[1] += panRate;
                break;
            case 'down':
                viewBoxValues[1] -= panRate;
                break;
        }

        return viewBoxValues;
    };

    // Toggle key and chart on/off or set manually to wanted
    var key = function (id, set, evt) {
        var visibility = null;

        // Chart element
        var chartElement = svgElement.getElementById(id.replace('_keyentry', ''));
        if (chartElement) {
            // Set on/off
            if (set === true || set === false) {
                visibility = set ? 'visible' : 'hidden';
            }
            // Toggle
            else {
                visibility = chartElement.getAttribute('visibility') == 'hidden' ? 'visible' : 'hidden';
            }
            chartElement.setAttribute('visibility', visibility);
        }

        // Key element
        var keyElement = svgElement.getElementById(id);
        if (keyElement && visibility) {
            keyElement.setAttribute('style', visibility == 'hidden' ? 'filter:url(#greybox)' : 'none');
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Toggle coordinates on/off or set manually to wanted
    var coordinate = function (set) {
        if (coordinateText.element) {
            // Set on/off
            if (set === true || set === false) {
                coordinateText.enabled = set;
            }
            // Toggle
            else {
                coordinateText.enabled = coordinateText.element.getAttribute('visibility') == 'hidden' ? true : false;
            }
            coordinateText.element.setAttribute('visibility', coordinateText.enabled ? 'visible' : 'hidden');
        }
    };

    // Toggle grid on/off or set manually to wanted
    var grid = function (set) {
        var grid = svgElement.getElementsByClassName('gridline');

        // Set on/off
        if (set === true || set === false) {
            gridEnabled = set;
        }
        // Toggle, get state from first element
        else if (grid.length) {
            gridEnabled = grid[0].getAttribute('visibility') == 'hidden' ? true : false;
        }

        for (i = 0; i < grid.length; i++) {
            grid[i].setAttribute('visibility', gridEnabled ? 'visible' : 'hidden');
        }
    };

    // Show popover text or image
    var popover = function (content, set, evt) {

        // Hide popover
        if (set === false) {
            hidePopover();

            if (evt !== undefined) {
                evt.stopPropagation();
                evt.preventDefault();
            }

            return;
        }

        var position = null;

        // Change content only if changed
        if (popoverContainer.content != content) {

            // Set current text
            popoverContainer.content = content;

            popoverImage.content = '';
            popoverText.content = content;

            // If text starts with image: process it as an xlinked bitmap
            if (content.substring(0, 5) == 'image') {
                var lines = content.split(/\n|\\n/g);
                var nameindex = lines[0].indexOf(':');
                if (nameindex > 0) {
                    popoverImage.content = lines.shift();
                    popoverText.content = '';

                    // Additional text lines
                    if (lines !== undefined && lines.length > 0) {
                        popoverText.content = lines.join('\n');
                    }
                }
            }

            // Set image content
            if(popoverImage.content){
                setPopoverImage(popoverImage.content);
            }

            // Set text content
            if(popoverText.content){
                setPopoverText(popoverText.content);
            }
        }

        if(popoverImage.content || popoverText.content){
            position = convertDOMToSVG({'x': evt.clientX, 'y': evt.clientY });
        }

        // Show popover image on mouse position
        if(popoverImage.content){
            showPopoverImage(position);
        }

        // Show popover on mouse position
        if(popoverText.content){
            showPopoverText(position);
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Parse plot settings
    parseSettings();

    // viewBox initial position and size
    viewBoxResetValue = getViewBox();

    // Set focusable for event focusing, not work on old svg version
    svgElement.setAttribute('focusable', true);

    // Disable native draggable
    svgElement.setAttribute('draggable', false);

    // Add events
    addEvents();

    // Return functions to outside use
    return {
        zoom: function (direction) {
            setViewBox(zoom(direction));
            return this;
        },
        pan: function (direction) {
            setViewBox(pan(direction));
            return this;
        },
        reset: function () {
            setViewBox(viewBoxResetValue);
            return this;
        },
        key: function (id, set) {
            key(id, set);
            return this;
        },
        coordinate: function (set) {
            coordinate(set);
            return this;
        },
        grid: function (set) {
            grid(set);
            return this;
        }
    };
};

// Old init function, remove when svg inline events removed
gnuplot_svg.Init = function() { };
]]>
</script>

<!-- Tie mousing to entire bounding box of the plot -->
<rect x="0" y="0" width="800" height="450" fill="#ffffff" stroke="black" stroke-width="1"
onclick="gnuplot_svg.toggleCoordBox(evt)"  onmousemove="gnuplot_svg.moveCoordBox(evt)"/>

<!-- Also track mouse when it is on a plot element -->
<g id="gnuplot_canvas" onclick="gnuplot_svg.toggleCoordBox(evt)" onmousemove="gnuplot_svg.moveCoordBox(evt)">

<defs>

	<circle id='gpDot' r='0.5' stroke-width='0.5' stroke='currentColor'/>
	<path id='gpPt0' stroke-width='0.222' stroke='currentColor' d='M-1,0 h2 M0,-1 v2'/>
	<path id='gpPt1' stroke-width='0.222' stroke='currentColor' d='M-1,-1 L1,1 M1,-1 L-1,1'/>
	<path id='gpPt2' stroke-width='0.222' stroke='currentColor' d='M-1,0 L1,0 M0,-1 L0,1 M-1,-1 L1,1 M-1,1 L1,-1'/>
	<rect id='gpPt3' stroke-width='0.222' stroke='currentColor' x='-1' y='-1' width='2' height='2'/>
	<rect id='gpPt4' stroke-width='0.222' stroke='currentColor' fill='currentColor' x='-1' y='-1' width='2' height='2'/>
	<circle id='gpPt5' stroke-width='0.222' stroke='currentColor' cx='0' cy='0' r='1'/>
	<use xlink:href='#gpPt5' id='gpPt6' fill='currentColor' stroke='none'/>
	<path id='gpPt7' stroke-width='0.222' stroke='currentColor' d='M0,-1.33 L-1.33,0.67 L1.33,0.67 z'/>
	<use xlink:href='#gpPt7' id='gpPt8' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt7' id='gpPt9' stroke='currentColor' transform='rotate(180)'/>
	<use xlink:href='#gpPt9' id='gpPt10' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt3' id='gpPt11' stroke='currentColor' transform='rotate(45)'/>
	<use xlink:href='#gpPt11' id='gpPt12' fill='currentColor' stroke='none'/>
	<path id='gpPt13' stroke-width='0.222' stroke='currentColor' d='M0,1.330 L1.265,0.411 L0.782,-1.067 L-0.782,-1.076 L-1.265,0.411 z'/>
	<use xlink:href='#gpPt13' id='gpPt14' fill='currentColor' stroke='none'/>
	<filter id='textbox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='white' flood-opacity='1' result='bgnd'/>
	  <feComposite in='SourceGraphic' in2='bgnd' operator='atop'/>
	</filter>
	<filter id='greybox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='lightgrey' flood-opacity='1' result='grey'/>
	  <feComposite in='SourceGraphic' in2='grey' operator='atop'/>
	</filter>
</defs>
<g fill="none" color="white" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,392.40 L73.14,392.40 M656.14,392.40 L647.14,392.40  '/>	<g transform="translate(55.75,396.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.4</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,330.00 L73.14,330.00 M656.14,330.00 L647.14,330.00  '/>	<g transform="translate(55.75,333.90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.5</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,267.60 L73.14,267.60 M656.14,267.60 L647.14,267.60  '/>	<g transform="translate(55.75,271.50)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.6</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,205.21 L73.14,205.21 M656.14,205.21 L647.14,205.21  '/>	<g transform="translate(55.75,209.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.7</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,142.81 L73.14,142.81 M656.14,142.81 L647.14,142.81  '/>	<g transform="translate(55.75,146.71)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.8</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,80.41 L73.14,80.41 M656.14,80.41 L647.14,80.41  '/>	<g transform="translate(55.75,84.31)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.9</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,18.01 L73.14,18.01 M656.14,18.01 L647.14,18.01  '/>	<g transform="translate(55.75,21.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >1.0</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,392.40 L64.14,383.40 M64.14,18.01 L64.14,27.01  '/>	<g transform="translate(64.14,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">0</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M89.60,392.40 L89.60,387.90 M89.60,18.01 L89.60,22.51 M104.49,392.40 L104.49,387.90 M104.49,18.01 L104.49,22.51
		M115.06,392.40 L115.06,387.90 M115.06,18.01 L115.06,22.51 M123.25,392.40 L123.25,387.90 M123.25,18.01 L123.25,22.51
		M129.95,392.40 L129.95,387.90 M129.95,18.01 L129.95,22.51 M135.61,392.40 L135.61,387.90 M135.61,18.01 L135.61,22.51
		M140.52,392.40 L140.52,387.90 M140.52,18.01 L140.52,22.51 M144.84,392.40 L144.84,387.90 M144.84,18.01 L144.84,22.51
		M148.71,392.40 L148.71,383.40 M148.71,18.01 L148.71,27.01  '/>	<g transform="translate(148.71,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">1</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M174.17,392.40 L174.17,387.90 M174.17,18.01 L174.17,22.51 M189.06,392.40 L189.06,387.90 M189.06,18.01 L189.06,22.51
		M199.63,392.40 L199.63,387.90 M199.63,18.01 L199.63,22.51 M207.82,392.40 L207.82,387.90 M207.82,18.01 L207.82,22.51
		M214.52,392.40 L214.52,387.90 M214.52,18.01 L214.52,22.51 M220.18,392.40 L220.18,387.90 M220.18,18.01 L220.18,22.51
		M225.09,392.40 L225.09,387.90 M225.09,18.01 L225.09,22.51 M229.41,392.40 L229.41,387.90 M229.41,18.01 L229.41,22.51
		M233.28,392.40 L233.28,383.40 M233.28,18.01 L233.28,27.01  '/>	<g transform="translate(233.28,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">2</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M258.74,392.40 L258.74,387.90 M258.74,18.01 L258.74,22.51 M273.63,392.40 L273.63,387.90 M273.63,18.01 L273.63,22.51
		M284.20,392.40 L284.20,387.90 M284.20,18.01 L284.20,22.51 M292.40,392.40 L292.40,387.90 M292.40,18.01 L292.40,22.51
		M299.09,392.40 L299.09,387.90 M299.09,18.01 L299.09,22.51 M304.75,392.40 L304.75,387.90 M304.75,18.01 L304.75,22.51
		M309.66,392.40 L309.66,387.90 M309.66,18.01 L309.66,22.51 M313.98,392.40 L313.98,387.90 M313.98,18.01 L313.98,22.51
		M317.85,392.40 L317.85,383.40 M317.85,18.01 L317.85,27.01  '/>	<g transform="translate(317.85,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">3</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M343.31,392.40 L343.31,387.90 M343.31,18.01 L343.31,22.51 M358.21,392.40 L358.21,387.90 M358.21,18.01 L358.21,22.51
		M368.77,392.40 L368.77,387.90 M368.77,18.01 L368.77,22.51 M376.97,392.40 L376.97,387.90 M376.97,18.01 L376.97,22.51
		M383.66,392.40 L383.66,387.90 M383.66,18.01 L383.66,22.51 M389.33,392.40 L389.33,387.90 M389.33,18.01 L389.33,22.51
		M394.23,392.40 L394.23,387.90 M394.23,18.01 L394.23,22.51 M398.56,392.40 L398.56,387.90 M398.56,18.01 L398.56,22.51
		M402.43,392.40 L402.43,383.40 M402.43,18.01 L402.43,27.01  '/>	<g transform="translate(402.43,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">4</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M427.88,392.40 L427.88,387.90 M427.88,18.01 L427.88,22.51 M442.78,392.40 L442.78,387.90 M442.78,18.01 L442.78,22.51
		M453.34,392.40 L453.34,387.90 M453.34,18.01 L453.34,22.51 M461.54,392.40 L461.54,387.90 M461.54,18.01 L461.54,22.51
		M468.24,392.40 L468.24,387.90 M468.24,18.01 L468.24,22.51 M473.90,392.40 L473.90,387.90 M473.90,18.01 L473.90,22.51
		M478.80,392.40 L478.80,387.90 M478.80,18.01 L478.80,22.51 M483.13,392.40 L483.13,387.90 M483.13,18.01 L483.13,22.51
		M487.00,392.40 L487.00,383.40 M487.00,18.01 L487.00,27.01  '/>	<g transform="translate(487.00,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">5</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M512.46,392.40 L512.46,387.90 M512.46,18.01 L512.46,22.51 M527.35,392.40 L527.35,387.90 M527.35,18.01 L527.35,22.51
		M537.91,392.40 L537.91,387.90 M537.91,18.01 L537.91,22.51 M546.11,392.40 L546.11,387.90 M546.11,18.01 L546.11,22.51
		M552.81,392.40 L552.81,387.90 M552.81,18.01 L552.81,22.51 M558.47,392.40 L558.47,387.90 M558.47,18.01 L558.47,22.51
		M563.37,392.40 L563.37,387.90 M563.37,18.01 L563.37,22.51 M567.70,392.40 L567.70,387.90 M567.70,18.01 L567.70,22.51
		M571.57,392.40 L571.57,383.40 M571.57,18.01 L571.57,27.01  '/>	<g transform="translate(571.57,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">6</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M597.03,392.40 L597.03,387.90 M597.03,18.01 L597.03,22.51 M611.92,392.40 L611.92,387.90 M611.92,18.01 L611.92,22.51
		M622.49,392.40 L622.49,387.90 M622.49,18.01 L622.49,22.51 M630.68,392.40 L630.68,387.90 M630.68,18.01 L630.68,22.51
		M637.38,392.40 L637.38,387.90 M637.38,18.01 L637.38,22.51 M643.04,392.40 L643.04,387.90 M643.04,18.01 L643.04,22.51
		M647.94,392.40 L647.94,387.90 M647.94,18.01 L647.94,22.51 M652.27,392.40 L652.27,387.90 M652.27,18.01 L652.27,22.51
		M656.14,392.40 L656.14,383.40 M656.14,18.01 L656.14,27.01  '/>	<g transform="translate(656.14,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">7</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,18.01 L64.14,392.40 L656.14,392.40 L656.14,18.01 L64.14,18.01 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(19.18,205.21) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >expectation (Z/</tspan><tspan font-family="Arial" >Z</tspan><tspan font-family="Arial"  font-size="9.6" dy="3.60px">0</tspan><tspan font-family="Arial"  font-size="12.0" dy="-3.60px">)</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(664.54,205.21) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(360.14,441.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >K</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(360.14,21.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(736.76,173.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >step size</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M681.92,250.21 L681.92,160.21 L791.60,160.21 L791.60,250.21 L681.92,250.21 Z  '/>	<path stroke='black'  d='M681.92,178.21 L791.60,178.21  '/></g>
	<g id="gnuplot_plot_1" ><title>0.5</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<g transform="translate(741.26,191.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >0.5</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	</g>
	<use xlink:href='#gpPt1' transform='translate(64.14,18.01) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(64.14,18.01) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(64.14,18.01) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(64.14,18.01) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(89.60,18.01) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(104.49,18.92) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(104.49,18.92) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(123.25,18.98) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(129.95,24.67) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(135.61,35.05) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(148.71,94.30) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(155.41,88.07) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(163.60,87.58) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(172.29,177.81) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(182.37,178.33) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(190.27,148.89) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(198.70,123.03) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(207.82,100.67) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(216.31,170.44) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(224.63,265.94) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(233.28,344.91) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(241.48,317.99) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(250.08,285.66) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(258.56,298.70) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(267.08,333.47) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(275.54,310.65) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(284.02,331.44) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(292.47,353.61) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(300.88,349.85) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(309.38,310.70) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(317.85,305.44) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(326.28,261.87) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(334.75,259.41) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(343.22,235.36) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(351.67,220.37) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(360.14,227.21) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(368.60,253.62) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(377.05,250.26) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(385.51,250.62) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(393.97,256.61) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(402.43,251.33) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(410.88,247.25) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(419.34,255.80) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(427.80,251.48) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(436.25,253.22) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(444.71,252.70) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(453.17,253.30) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(461.63,250.18) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(470.08,247.09) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(478.54,249.76) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(487.00,247.75) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(495.45,249.18) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(503.91,251.29) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(512.37,252.24) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(520.83,251.69) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(529.28,252.04) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(537.74,252.28) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(546.20,251.63) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(554.65,251.54) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(563.11,251.31) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(571.57,251.06) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(580.03,250.24) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(588.48,249.59) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(596.94,249.57) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(605.40,249.93) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(613.85,249.60) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(622.31,250.32) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(630.77,250.30) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(639.23,250.37) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(647.68,250.28) scale(3.38)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt1' transform='translate(656.14,250.59) scale(3.38)' color='rgb(148,   0, 211)'/>
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<use xlink:href='#gpPt1' transform='translate(711.59,187.21) scale(3.38)' color='rgb(148,   0, 211)'/>
	</g>
</g>
	</g>
	<g id="gnuplot_plot_2" ><title>2.0</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_2_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_2')">
	<g transform="translate(741.26,209.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >2.0</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	</g>
	<use xlink:href='#gpPt3' transform='translate(64.14,18.01) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(64.14,18.01) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(64.14,18.01) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(64.14,18.01) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(89.60,18.02) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(104.49,226.01) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(104.49,226.01) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(123.25,340.73) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(129.95,347.88) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(135.61,389.89) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(148.71,341.87) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(155.41,304.47) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(163.60,250.12) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(172.29,206.99) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(182.37,190.88) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(190.27,161.22) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(198.70,171.78) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(207.82,167.63) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(216.31,198.91) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(224.63,265.52) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(233.28,237.65) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(241.48,230.88) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(250.08,267.32) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(258.56,284.92) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(267.08,296.28) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(275.54,301.62) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(284.02,274.24) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(292.47,281.45) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(300.88,272.76) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(309.38,274.05) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(317.85,261.54) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(326.28,261.05) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(334.75,260.29) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(343.22,253.52) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(351.67,255.96) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(360.14,255.47) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(368.60,253.55) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(377.05,256.44) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(385.51,251.73) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(393.97,254.07) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(402.43,253.98) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(410.88,253.47) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(419.34,252.61) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(427.80,252.12) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(436.25,252.74) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(444.71,252.93) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(453.17,253.17) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(461.63,252.33) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(470.08,253.35) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(478.54,254.04) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(487.00,253.28) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(495.45,253.13) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(503.91,252.97) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(512.37,252.30) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(520.83,252.29) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(529.28,252.20) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(537.74,251.85) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(546.20,251.85) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(554.65,251.77) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(563.11,251.23) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(571.57,250.83) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(580.03,250.95) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(588.48,250.80) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(596.94,250.60) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(605.40,250.54) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(613.85,250.67) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(622.31,250.83) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(630.77,250.99) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(639.23,251.06) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(647.68,251.01) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt3' transform='translate(656.14,251.07) scale(3.38)' color='rgb(  0, 158, 115)'/>
	<g id="gnuplot_plot_2_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_2')">
	<use xlink:href='#gpPt3' transform='translate(711.59,205.21) scale(3.38)' color='rgb(  0, 158, 115)'/>
	</g>
</g>
	</g>
	<g id="gnuplot_plot_3" ><title>4.0</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_3_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_3')">
	<g transform="translate(741.26,227.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >4.0</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	</g>
	<use xlink:href='#gpPt5' transform='translate(64.14,18.01) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(64.14,18.01) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(64.14,18.01) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(64.14,18.01) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(89.60,18.24) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(104.49,18.32) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(104.49,18.32) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(123.25,147.90) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(129.95,230.25) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(135.61,199.99) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(148.71,145.52) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(155.41,228.26) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(163.60,269.92) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(172.29,250.95) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(182.37,297.07) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(190.27,323.90) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(198.70,263.10) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(207.82,255.45) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(216.31,286.22) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(224.63,350.38) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(233.28,331.23) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(241.48,319.94) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(250.08,318.95) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(258.56,310.07) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(267.08,303.93) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(275.54,285.61) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(284.02,271.35) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(292.47,256.60) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(300.88,258.31) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(309.38,259.92) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(317.85,265.88) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(326.28,263.09) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(334.75,256.54) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(343.22,263.07) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(351.67,252.66) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(360.14,248.45) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(368.60,248.74) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(377.05,253.75) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(385.51,254.95) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(393.97,252.92) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(402.43,252.99) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(410.88,255.11) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(419.34,256.63) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(427.80,254.06) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(436.25,254.28) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(444.71,255.63) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(453.17,251.96) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(461.63,251.37) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(470.08,252.42) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(478.54,250.72) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(487.00,249.18) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(495.45,250.70) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(503.91,251.18) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(512.37,250.33) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(520.83,250.41) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(529.28,251.01) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(537.74,250.25) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(546.20,250.42) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(554.65,250.03) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(563.11,250.15) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(571.57,250.16) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(580.03,250.28) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(588.48,250.17) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(596.94,250.49) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(605.40,250.36) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(613.85,250.46) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(622.31,250.49) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(630.77,250.70) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(639.23,250.80) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(647.68,250.83) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<use xlink:href='#gpPt5' transform='translate(656.14,250.85) scale(3.38)' color='rgb( 86, 180, 233)'/>
	<g id="gnuplot_plot_3_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_3')">
	<use xlink:href='#gpPt5' transform='translate(711.59,223.21) scale(3.38)' color='rgb( 86, 180, 233)'/>
	</g>
</g>
	</g>
	<g id="gnuplot_plot_4" ><title>0.6266</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_4_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_4')">
	<g transform="translate(741.26,245.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text>0.6266</text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black' stroke-dasharray='2.5,4.0'  d='M690.31,241.21 L732.87,241.21  '/>	</g>
	<path stroke='black' stroke-dasharray='2.5,4.0'  d='M64.14,251.01 L70.12,251.01 L76.10,251.01 L82.08,251.01 L88.06,251.01 L94.04,251.01 L100.02,251.01 L106.00,251.01
		L111.98,251.01 L117.96,251.01 L123.94,251.01 L129.92,251.01 L135.90,251.01 L141.88,251.01 L147.86,251.01 L153.84,251.01
		L159.82,251.01 L165.80,251.01 L171.78,251.01 L177.76,251.01 L183.74,251.01 L189.72,251.01 L195.70,251.01 L201.68,251.01
		L207.66,251.01 L213.63,251.01 L219.61,251.01 L225.59,251.01 L231.57,251.01 L237.55,251.01 L243.53,251.01 L249.51,251.01
		L255.49,251.01 L261.47,251.01 L267.45,251.01 L273.43,251.01 L279.41,251.01 L285.39,251.01 L291.37,251.01 L297.35,251.01
		L303.33,251.01 L309.31,251.01 L315.29,251.01 L321.27,251.01 L327.25,251.01 L333.23,251.01 L339.21,251.01 L345.19,251.01
		L351.17,251.01 L357.15,251.01 L363.13,251.01 L369.11,251.01 L375.09,251.01 L381.07,251.01 L387.05,251.01 L393.03,251.01
		L399.01,251.01 L404.99,251.01 L410.97,251.01 L416.95,251.01 L422.93,251.01 L428.91,251.01 L434.89,251.01 L440.87,251.01
		L446.85,251.01 L452.83,251.01 L458.81,251.01 L464.79,251.01 L470.77,251.01 L476.75,251.01 L482.73,251.01 L488.71,251.01
		L494.69,251.01 L500.67,251.01 L506.65,251.01 L512.62,251.01 L518.60,251.01 L524.58,251.01 L530.56,251.01 L536.54,251.01
		L542.52,251.01 L548.50,251.01 L554.48,251.01 L560.46,251.01 L566.44,251.01 L572.42,251.01 L578.40,251.01 L584.38,251.01
		L590.36,251.01 L596.34,251.01 L602.32,251.01 L608.30,251.01 L614.28,251.01 L620.26,251.01 L626.24,251.01 L632.22,251.01
		L638.20,251.01 L644.18,251.01 L650.16,251.01 L656.14,251.01  '/></g>
	</g>
<g fill="none" color="white" stroke="black" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="black" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,18.01 L64.14,392.40 L656.14,392.40 L656.14,18.01 L64.14,18.01 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(360.14,21.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>

<script type="text/javascript"><![CDATA[
// plot boundaries and axis scaling information for mousing 
gnuplot_svg.plot_term_xmax = 800;
gnuplot_svg.plot_term_ymax = 450;
gnuplot_svg.plot_xmin = 64.1;
gnuplot_svg.plot_xmax = 656.1;
gnuplot_svg.plot_ybot = 392.4;
gnuplot_svg.plot_ytop = 18.0;
gnuplot_svg.plot_width = 592.0;
gnuplot_svg.plot_height = 374.4;
gnuplot_svg.plot_axis_xmin = 1;
gnuplot_svg.plot_axis_xmax = 1e+07;
gnuplot_svg.plot_axis_ymin = 0.4;
gnuplot_svg.plot_axis_ymax = 1;
gnuplot_svg.polar_mode = false;
gnuplot_svg.plot_axis_x2min = "none";
gnuplot_svg.plot_axis_y2min = "none";
gnuplot_svg.plot_logaxis_x = 1;
gnuplot_svg.plot_logaxis_y = 0;
gnuplot_svg.plot_timeaxis_x = "";
gnuplot_svg.plot_timeaxis_y = "";
gnuplot_svg.hypertext_fontSize = 0;
gnuplot_svg.hypertext_fontName = null;
gnuplot_svg.hypertext_fontStyle = null;
gnuplot_svg.hypertext_fontWeight = null;
]]>
</script>
</g>

  <text id="coord_text" text-anchor="start" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <rect id="hypertextbox" class="hypertextbox" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="16" visibility="hidden" />

  <text id="hypertext" class="hypertext" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <image id="hyperimage" class="hyperimage" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="200" width="300" visibility="hidden" />
</svg>

