<?xml version="1.0" encoding="utf-8"  standalone="no"?>
<svg  onload="if (typeof(gnuplot_svg)!='undefined') gnuplot_svg.Init(evt)" 
 width="800" height="450"
 viewBox="0 0 800 450"
 xmlns="http://www.w3.org/2000/svg"
 xmlns:xlink="http://www.w3.org/1999/xlink"
>

<title>Gnuplot</title>
<desc>Produced by GNUPLOT 5.4 patchlevel 2 </desc>

<script type="text/javascript" > <![CDATA[
// From:	Marko Karjalainen <markokarjalainen@kolumbus.fi>
// Date:	27 Aug 2018
// Experimental gnuplot plugin for svg
//
// All svg elements on page get own gnuplot plugin attached by js, so no conflict with global variables.
//
// Javascript variables are read from second script tag and converted to json for import to plugin.
// Inline events are removed from xml and new ones are attached with addEventListener function.
// Inline events should be removed from xml and xml should have better id/class names to attach events from js.
//
// Improved mouseover text and image handling
//   content changed to xml only if it really changed and bouncing is calculated once.
//
// Convert functions are same as before, maybe renamed better.
//
// Javascript routines for mouse and keyboard interaction with
// SVG documents produced by gnuplot SVG terminal driver.

// TODO do not create inline events to svg and give id or classes for getting elements
// TODO make own svg layer x/y range sized for coordinates?

if (window) {
    window.addEventListener('load', function () {
        // Find svg elements
        var svg = document.querySelectorAll('svg');
        for (var i = 0; i < svg.length; i++) {
            // Init plugin
            if (!svg[i].gnuplot) {
                // Check if gnuplot generated svg
                if(svg[i].getElementById('gnuplot_canvas')){
                    svg[i].gnuplot = new gnuplot_svg(svg[i]);
                }
            }
        }
    });
}

gnuplot_svg = function (svgElement) {

    var version = '09 April 2019';

    var settings = {};

    var viewBoxResetValue = [];

    var drag = {
        'enabled': false,
        'offset': { 'x': 0, 'y': 0 },
        'change': svgElement.createSVGPoint(),
        'timeout': null
    };

    var coordinateText = {
        'enabled': false,
        'element': svgElement.getElementById('coord_text')
    };

    var popoverContainer = {
        'element': null,
        'content': null,
    };

    var popoverImage = {
        'element': null,
        'content': null,
        'width': 300,
        'height': 200,
        'defaultWidth': 300,
        'defaultHeight': 200,
    };

    var popoverText = {
        'element': null,
        'content': null,
        'width': 11,
        'height': 16,
        'defaultWidth': 11,
        'defaultHeight': 16,
    };

    var point = svgElement.createSVGPoint();

    var axisDate = new Date();

    var gridEnabled = false;

    // Get plot boundaries and axis scaling information for mousing from current object script tag
    // TODO add these to svg xml custom attribute for reading(json format)
    var parseSettings = function () {
        var script = svgElement.querySelectorAll('script');
        if (script && script[1]) {
            var scriptText = script[1].firstChild.nodeValue;
            // Remove inline comments
            scriptText = scriptText.replace(/^\s*\/\/.*\n/g, '');
            // Change prefix to "
            scriptText = scriptText.replace(/gnuplot_svg\./g, '"');
            // Change = to " :
            scriptText = scriptText.replace(/ = /g, '" : ');
            // Change line endings to comma
            scriptText = scriptText.replace(/;\n|\n/g, ',');
            // Remove last comma
            scriptText = scriptText.replace(/,+$/, '');
            // Parse as json string
            settings = JSON.parse("{\n" + scriptText + "\n}");
        }
    };

    // Add interactive events
    var addEvents = function () {
        var i;

        // Get keyentry elements
        var toggleVisibility = svgElement.querySelectorAll('g[id$="_keyentry"]');
        for (i = 0; i < toggleVisibility.length; i++) {
            // ------- Remove inline events
            toggleVisibility[i].removeAttribute('onclick');
            // -------

            // Add keyentry event to toggle visibility
            toggleVisibility[i].addEventListener('click', key.bind(null, toggleVisibility[i].getAttribute('id'), null));
        }

        // ------- Remove inline events from bounding box
        var boundingBox = svgElement.querySelector('rect[onclick^="gnuplot_svg.toggleCoordBox"]');
        if (boundingBox) {
            boundingBox.removeAttribute('onclick');
            boundingBox.removeAttribute('onmousemove');
        }
        // ------- Remove inline events from canvas
        var canvas = svgElement.getElementById('gnuplot_canvas');
        if (canvas) {
            canvas.removeAttribute('onclick');
            canvas.removeAttribute('onmousemove');
        }
        // -------

        // Get grid image
        var toggleGrid = svgElement.querySelector('image[onclick^="gnuplot_svg.toggleGrid"]');
        if (toggleGrid) {
            // ------- Remove inline events
            toggleGrid.removeAttribute('onclick');
            // -------

            // Add Toggle grid image event
            toggleGrid.addEventListener('click', function (evt) {
                grid();
                evt.preventDefault();
                evt.stopPropagation();
            });
        }

        // Get hypertexts
        var hyperText = svgElement.querySelectorAll('g[onmousemove^="gnuplot_svg.showHypertext"]');

        // Set view element variables
        if (hyperText.length) {
            popoverContainer.element = svgElement.getElementById('hypertextbox');
            popoverText.element = svgElement.getElementById('hypertext');
            popoverImage.element = svgElement.getElementById('hyperimage');
            popoverImage.defaultWidth = popoverImage.element.getAttribute('width');
            popoverImage.defaultHeight = popoverImage.element.getAttribute('height');
        }

        for (i = 0; i < hyperText.length; i++) {
            // Get text from attr uggly way, svg has empty title element
            var text = hyperText[i].getAttribute('onmousemove').substr(31).slice(0, -2);

            // ------- Remove inline events
            hyperText[i].removeAttribute('onmousemove');
            hyperText[i].removeAttribute('onmouseout');
            // -------

            // Add event
            hyperText[i].addEventListener('mousemove', popover.bind(null, text, true));
            hyperText[i].addEventListener('mouseout', popover.bind(null, null, false));
        }

        // Toggle coordinates visibility on left click on boundingBox element
        svgElement.addEventListener('click', function (evt) {
            if (!drag.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                coordinate();
                setCoordinateLabel(evt);
            }
        });

        // Save move start position, enable drag after delay
        svgElement.addEventListener('mousedown', function (evt) {

            drag.offset = { 'x': evt.clientX, 'y': evt.clientY };

            // Delay for moving, so not move accidentally if only click
            drag.timeout = setTimeout(function () {
                drag.enabled = true;
            }, 250);

            // Cancel draggable
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Disable drag
        svgElement.addEventListener('mouseup', function (evt) {
            drag.enabled = false;
            clearTimeout(drag.timeout);
        });

        // Mouse move
        svgElement.addEventListener('mousemove', function (evt) {

            // Drag svg element
            if (evt.buttons == 1 && drag.enabled) {

                // Position change
                drag.change.x = evt.clientX - drag.offset.x;
                drag.change.y = evt.clientY - drag.offset.y;

                // Set current mouse position
                drag.offset.x = evt.clientX;
                drag.offset.y = evt.clientY;

                // Convert to svg position
                drag.change.matrixTransform(svgElement.getScreenCTM().inverse());

                var viewBoxValues = getViewBox();

                viewBoxValues[0] -= drag.change.x;
                viewBoxValues[1] -= drag.change.y;

                setViewBox(viewBoxValues);
            }

            // View coordinates on mousemove over svg element
            if (coordinateText.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                setCoordinateLabel(evt);
            }

        });

        // Zoom with wheel
        svgElement.addEventListener('wheel', function (evt) {
            // x or y scroll zoom both axels
            var delta = Math.max(-1, Math.min(1, (evt.deltaY || evt.deltaX)));

            if (delta > 0) {
                setViewBox(zoom('in'));
            }
            else {
                setViewBox(zoom('out'));
            }

            // Disable scroll the entire webpage
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Reset on right click or hold tap
        svgElement.addEventListener('contextmenu', function (evt) {

            setViewBox(viewBoxResetValue);

            // Disable native context menu
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Keyboard actions, old svg version not support key events so must listen window
        window.addEventListener('keydown', function (evt) {

            // Not capture event from inputs
            // body = svg inline in page, svg = plain svg file, window = delegated events to object
            if (evt.target.nodeName != 'BODY' && evt.target.nodeName != 'svg' && evt.target != window) {
                return true;
            }

            var viewBoxValues = [];

            switch (evt.key) {
                // Move, Edge sends without Arrow word
                case 'ArrowLeft':
                case 'Left':
                case 'ArrowRight':
                case 'Right':
                case 'ArrowUp':
                case 'Up':
                case 'ArrowDown':
                case 'Down':
                    viewBoxValues = pan(evt.key.replace('Arrow', '').toLowerCase());
                    break;
                // Zoom in
                case '+':
                case 'Add':
                    viewBoxValues = zoom('in');
                    break;
                // Zoom out
                case '-':
                case 'Subtract':
                    viewBoxValues = zoom('out');
                    break;
                // Reset
                case 'Home':
                    viewBoxValues = viewBoxResetValue;
                    break;
                // Toggle grid
                case '#':
                    grid();
                    break;
            }

            if (viewBoxValues.length) {
                setViewBox(viewBoxValues);
            }
        });
    };

    // Get svg viewbox details
    var getViewBox = function () {
        var viewBoxValues = svgElement.getAttribute('viewBox').split(' ');
        viewBoxValues[0] = parseFloat(viewBoxValues[0]);
        viewBoxValues[1] = parseFloat(viewBoxValues[1]);
        viewBoxValues[2] = parseFloat(viewBoxValues[2]);
        viewBoxValues[3] = parseFloat(viewBoxValues[3]);
        return viewBoxValues;
    };

    // Set svg viewbox details
    var setViewBox = function (viewBoxValues) {
        svgElement.setAttribute('viewBox', viewBoxValues.join(' '));
    };

    // Set coordinate label position and text
    var setCoordinateLabel = function (evt) {
        var position = convertDOMToSVG({ 'x': evt.clientX, 'y': evt.clientY });

        // Set coordinate label position
        coordinateText.element.setAttribute('x', position.x);
        coordinateText.element.setAttribute('y', position.y);

        // Convert svg position to plot coordinates
        var plotcoord = convertSVGToPlot(position);

        // Parse label to view
        var label = parseCoordinateLabel(plotcoord);

        // Set coordinate label text
        coordinateText.element.textContent = label.x + ' ' + label.y;
    };

    // Convert position DOM to SVG
    var convertDOMToSVG = function (position) {
        point.x = position.x;
        point.y = position.y;
        return point.matrixTransform(svgElement.getScreenCTM().inverse());
    };

    // Convert position SVG to Plot
    var convertSVGToPlot = function (position) {
        var plotcoord = {};
        var plotx = position.x - settings.plot_xmin;
        var ploty = position.y - settings.plot_ybot;
        var x, y;

        if (settings.plot_logaxis_x !== 0) {
            x = Math.log(settings.plot_axis_xmax)
                - Math.log(settings.plot_axis_xmin);
            x = x * (plotx / (settings.plot_xmax - settings.plot_xmin))
                + Math.log(settings.plot_axis_xmin);
            x = Math.exp(x);
        } else {
            x = settings.plot_axis_xmin + (plotx / (settings.plot_xmax - settings.plot_xmin)) * (settings.plot_axis_xmax - settings.plot_axis_xmin);
        }

        if (settings.plot_logaxis_y !== 0) {
            y = Math.log(settings.plot_axis_ymax)
                - Math.log(settings.plot_axis_ymin);
            y = y * (ploty / (settings.plot_ytop - settings.plot_ybot))
                + Math.log(settings.plot_axis_ymin);
            y = Math.exp(y);
        } else {
            y = settings.plot_axis_ymin + (ploty / (settings.plot_ytop - settings.plot_ybot)) * (settings.plot_axis_ymax - settings.plot_axis_ymin);
        }

        plotcoord.x = x;
        plotcoord.y = y;
        return plotcoord;
    };

    // Parse plot x/y values to label
    var parseCoordinateLabel = function (plotcoord) {
        var label = { 'x': 0, 'y': 0 };

        if (settings.plot_timeaxis_x == 'DMS' || settings.plot_timeaxis_y == 'DMS') {
            if (settings.plot_timeaxis_x == 'DMS') {
                label.x = convertToDMS(plotcoord.x);
            }
            else {
                label.x = plotcoord.x.toFixed(2);
            }

            if (settings.plot_timeaxis_y == 'DMS') {
                label.y = convertToDMS(plotcoord.y);
            }
            else {
                label.y = plotcoord.y.toFixed(2);
            }

        } else if (settings.polar_mode) {
            polar = convertToPolar(plotcoord.x, plotcoord.y);
            label.x = 'ang= ' + polar.ang.toPrecision(4);
            label.y = 'R= ' + polar.r.toPrecision(4);

        } else if (settings.plot_timeaxis_x == 'Date') {
            axisDate.setTime(1000 * plotcoord.x);
            var year = axisDate.getUTCFullYear();
            var month = axisDate.getUTCMonth();
            var date = axisDate.getUTCDate();
            label.x = (' ' + date).slice(-2) + '/' + ('0' + (month + 1)).slice(-2) + '/' + year;
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'Time') {
            axisDate.setTime(1000 * plotcoord.x);
            var hour = axisDate.getUTCHours();
            var minute = axisDate.getUTCMinutes();
            var second = axisDate.getUTCSeconds();
            label.x = ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2) + ':' + ('0' + second).slice(-2);
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'DateTime') {
            axisDate.setTime(1000 * plotcoord.x);
            label.x = axisDate.toUTCString();
            label.y = plotcoord.y.toFixed(2);
        } else {
            label.x = plotcoord.x.toFixed(2);
            label.y = plotcoord.y.toFixed(2);
        }

        return label;
    };

    // Convert position to Polar
    var convertToPolar = function (x, y) {
        polar = {};
        var phi, r;
        phi = Math.atan2(y, x);
        if (settings.plot_logaxis_r) {
            r = Math.exp((x / Math.cos(phi) + Math.log(settings.plot_axis_rmin) / Math.LN10) * Math.LN10);
        }
        else if (settings.plot_axis_rmin > settings.plot_axis_rmax) {
            r = settings.plot_axis_rmin - x / Math.cos(phi);
        } else {
            r = settings.plot_axis_rmin + x / Math.cos(phi);
        }
        phi = phi * (180 / Math.PI);
        if (settings.polar_sense < 0) {
            phi = -phi;
        }
        if (settings.polar_theta0 !== undefined) {
            phi = phi + settings.polar_theta0;
        }
        if (phi > 180) { phi = phi - 360; }
        polar.r = r;
        polar.ang = phi;
        return polar;
    };

    // Convert position to DMS
    var convertToDMS = function (x) {
        var dms = { d: 0, m: 0, s: 0 };
        var deg = Math.abs(x);
        dms.d = Math.floor(deg);
        dms.m = Math.floor((deg - dms.d) * 60);
        dms.s = Math.floor((deg - dms.d) * 3600 - dms.m * 60);
        fmt = ((x < 0) ? '-' : ' ') + dms.d.toFixed(0) + '°' + dms.m.toFixed(0) + '"' + dms.s.toFixed(0) + "'";
        return fmt;
    };

    // Set popover text to show
    var setPopoverText = function (content) {

        // Minimum length
        popoverText.width = popoverText.defaultWidth;

        // Remove old texts
        while (null !== popoverText.element.firstChild) {
            popoverText.element.removeChild(popoverText.element.firstChild);
        }

        var lines = content.split(/\n|\\n/g);

        // Single line
        if (lines.length <= 1) {
            popoverText.element.textContent = content;
            popoverText.width = popoverText.element.getComputedTextLength() + 8;
        }
        // Multiple lines
        else {
            var lineWidth = 0;
            var tspanElement;

            for (var l = 0; l < lines.length; l++) {
                tspanElement = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
                // Y relative position
                if (l > 0) {
                    tspanElement.setAttribute('dy', popoverText.defaultHeight);
                }
                // Append text
                tspanElement.appendChild(document.createTextNode(lines[l]));
                popoverText.element.appendChild(tspanElement);

                // Max line width
                lineWidth = tspanElement.getComputedTextLength() + 8;
                if (popoverText.width < lineWidth) {
                    popoverText.width = lineWidth;
                }
            }
        }

        // Box Height
        popoverText.height = 2 + popoverText.defaultHeight * lines.length;
        popoverContainer.element.setAttribute('height', popoverText.height);

        // Box Width
        popoverContainer.element.setAttribute('width', popoverText.width);
    };

    // Set popover image to show
    var setPopoverImage = function (content) {

        // Set default image size
        popoverImage.width = popoverImage.defaultWidth;
        popoverImage.height = popoverImage.defaultHeight;

        // Pick up height and width from image(width,height):name
        if (content.charAt(5) == '(') {
            popoverImage.width = parseInt(content.slice(6));
            popoverImage.height = parseInt(content.slice(content.indexOf(',') + 1));
        }

        popoverImage.element.setAttribute('width', popoverImage.width);
        popoverImage.element.setAttribute('height', popoverImage.height);
        popoverImage.element.setAttribute('preserveAspectRatio', 'none');

        // attach image URL as a link
        content = content.slice(content.indexOf(':') + 1);
        popoverImage.element.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', content);
    };

    // Show popover text in given position
    var showPopoverText = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverText.height + 16 > domRect.y) {
            position.y = domRect.y - popoverText.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverText.width + 14 > domRect.x) {
            position.x = domRect.x - popoverText.width - 14;
        }

        // Change Box position
        popoverContainer.element.setAttribute('x', position.x + 10);
        popoverContainer.element.setAttribute('y', position.y + 4);
        popoverContainer.element.setAttribute('visibility', 'visible');

        // Change Text position
        popoverText.element.setAttribute('x', position.x + 14);
        popoverText.element.setAttribute('y', position.y + 18);
        popoverText.element.setAttribute('visibility', 'visible');

        // Change multiline text position
        var tspan = popoverText.element.querySelectorAll('tspan');
        for (var i = 0; i < tspan.length; i++) {
            tspan[i].setAttribute('x', position.x + 14);
        }

        // Font properties
        if (settings.hypertext_fontFamily != null)
            popoverText.element.setAttribute('font-family', settings.hypertext_fontFamily);
        if (settings.hypertext_fontStyle != null)
            popoverText.element.setAttribute('font-style', settings.hypertext_fontStyle);
        if (settings.hypertext_fontWeight != null)
            popoverText.element.setAttribute('font-weight', settings.hypertext_fontWeight);
        if (settings.hypertext_fontSize > 0)
            popoverText.element.setAttribute('font-size', settings.hypertext_fontSize);
    };

    // Show popover image in given position
    var showPopoverImage = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverImage.height + 16 > domRect.y) {
            position.y = domRect.y - popoverImage.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverImage.width + 14 > domRect.x) {
            position.x = domRect.x - popoverImage.width - 14;
        }

        popoverImage.element.setAttribute('x', position.x);
        popoverImage.element.setAttribute('y', position.y);
        popoverImage.element.setAttribute('visibility', 'visible');
    };

    // Hide all popovers
    var hidePopover = function () {
        popoverContainer.element.setAttribute('visibility', 'hidden');
        popoverText.element.setAttribute('visibility', 'hidden');
        popoverImage.element.setAttribute('visibility', 'hidden');
    };

    // Zoom svg inside viewbox
    var zoom = function (direction) {
        var zoomRate = 1.1;
        var viewBoxValues = getViewBox();

        var widthBefore = viewBoxValues[2];
        var heightBefore = viewBoxValues[3];

        if (direction == 'in') {
            viewBoxValues[2] /= zoomRate;
            viewBoxValues[3] /= zoomRate;
            // Pan to center
            viewBoxValues[0] -= (viewBoxValues[2] - widthBefore) / 2;
            viewBoxValues[1] -= (viewBoxValues[3] - heightBefore) / 2;
        }
        else if (direction == 'out') {
            viewBoxValues[2] *= zoomRate;
            viewBoxValues[3] *= zoomRate;
            // Pan to center
            viewBoxValues[0] += (widthBefore - viewBoxValues[2]) / 2;
            viewBoxValues[1] += (heightBefore - viewBoxValues[3]) / 2;
        }

        return viewBoxValues;
    };

    // Pan svg inside viewbox
    var pan = function (direction) {
        var panRate = 10;
        var viewBoxValues = getViewBox();

        switch (direction) {
            case 'left':
                viewBoxValues[0] += panRate;
                break;
            case 'right':
                viewBoxValues[0] -= panRate;
                break;
            case 'up':
                viewBoxValues[1] += panRate;
                break;
            case 'down':
                viewBoxValues[1] -= panRate;
                break;
        }

        return viewBoxValues;
    };

    // Toggle key and chart on/off or set manually to wanted
    var key = function (id, set, evt) {
        var visibility = null;

        // Chart element
        var chartElement = svgElement.getElementById(id.replace('_keyentry', ''));
        if (chartElement) {
            // Set on/off
            if (set === true || set === false) {
                visibility = set ? 'visible' : 'hidden';
            }
            // Toggle
            else {
                visibility = chartElement.getAttribute('visibility') == 'hidden' ? 'visible' : 'hidden';
            }
            chartElement.setAttribute('visibility', visibility);
        }

        // Key element
        var keyElement = svgElement.getElementById(id);
        if (keyElement && visibility) {
            keyElement.setAttribute('style', visibility == 'hidden' ? 'filter:url(#greybox)' : 'none');
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Toggle coordinates on/off or set manually to wanted
    var coordinate = function (set) {
        if (coordinateText.element) {
            // Set on/off
            if (set === true || set === false) {
                coordinateText.enabled = set;
            }
            // Toggle
            else {
                coordinateText.enabled = coordinateText.element.getAttribute('visibility') == 'hidden' ? true : false;
            }
            coordinateText.element.setAttribute('visibility', coordinateText.enabled ? 'visible' : 'hidden');
        }
    };

    // Toggle grid on/off or set manually to wanted
    var grid = function (set) {
        var grid = svgElement.getElementsByClassName('gridline');

        // Set on/off
        if (set === true || set === false) {
            gridEnabled = set;
        }
        // Toggle, get state from first element
        else if (grid.length) {
            gridEnabled = grid[0].getAttribute('visibility') == 'hidden' ? true : false;
        }

        for (i = 0; i < grid.length; i++) {
            grid[i].setAttribute('visibility', gridEnabled ? 'visible' : 'hidden');
        }
    };

    // Show popover text or image
    var popover = function (content, set, evt) {

        // Hide popover
        if (set === false) {
            hidePopover();

            if (evt !== undefined) {
                evt.stopPropagation();
                evt.preventDefault();
            }

            return;
        }

        var position = null;

        // Change content only if changed
        if (popoverContainer.content != content) {

            // Set current text
            popoverContainer.content = content;

            popoverImage.content = '';
            popoverText.content = content;

            // If text starts with image: process it as an xlinked bitmap
            if (content.substring(0, 5) == 'image') {
                var lines = content.split(/\n|\\n/g);
                var nameindex = lines[0].indexOf(':');
                if (nameindex > 0) {
                    popoverImage.content = lines.shift();
                    popoverText.content = '';

                    // Additional text lines
                    if (lines !== undefined && lines.length > 0) {
                        popoverText.content = lines.join('\n');
                    }
                }
            }

            // Set image content
            if(popoverImage.content){
                setPopoverImage(popoverImage.content);
            }

            // Set text content
            if(popoverText.content){
                setPopoverText(popoverText.content);
            }
        }

        if(popoverImage.content || popoverText.content){
            position = convertDOMToSVG({'x': evt.clientX, 'y': evt.clientY });
        }

        // Show popover image on mouse position
        if(popoverImage.content){
            showPopoverImage(position);
        }

        // Show popover on mouse position
        if(popoverText.content){
            showPopoverText(position);
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Parse plot settings
    parseSettings();

    // viewBox initial position and size
    viewBoxResetValue = getViewBox();

    // Set focusable for event focusing, not work on old svg version
    svgElement.setAttribute('focusable', true);

    // Disable native draggable
    svgElement.setAttribute('draggable', false);

    // Add events
    addEvents();

    // Return functions to outside use
    return {
        zoom: function (direction) {
            setViewBox(zoom(direction));
            return this;
        },
        pan: function (direction) {
            setViewBox(pan(direction));
            return this;
        },
        reset: function () {
            setViewBox(viewBoxResetValue);
            return this;
        },
        key: function (id, set) {
            key(id, set);
            return this;
        },
        coordinate: function (set) {
            coordinate(set);
            return this;
        },
        grid: function (set) {
            grid(set);
            return this;
        }
    };
};

// Old init function, remove when svg inline events removed
gnuplot_svg.Init = function() { };
]]>
</script>

<!-- Tie mousing to entire bounding box of the plot -->
<rect x="0" y="0" width="800" height="450" fill="#ffffff" stroke="black" stroke-width="1"
onclick="gnuplot_svg.toggleCoordBox(evt)"  onmousemove="gnuplot_svg.moveCoordBox(evt)"/>

<!-- Also track mouse when it is on a plot element -->
<g id="gnuplot_canvas" onclick="gnuplot_svg.toggleCoordBox(evt)" onmousemove="gnuplot_svg.moveCoordBox(evt)">

<defs>

	<circle id='gpDot' r='0.5' stroke-width='0.5' stroke='currentColor'/>
	<path id='gpPt0' stroke-width='0.222' stroke='currentColor' d='M-1,0 h2 M0,-1 v2'/>
	<path id='gpPt1' stroke-width='0.222' stroke='currentColor' d='M-1,-1 L1,1 M1,-1 L-1,1'/>
	<path id='gpPt2' stroke-width='0.222' stroke='currentColor' d='M-1,0 L1,0 M0,-1 L0,1 M-1,-1 L1,1 M-1,1 L1,-1'/>
	<rect id='gpPt3' stroke-width='0.222' stroke='currentColor' x='-1' y='-1' width='2' height='2'/>
	<rect id='gpPt4' stroke-width='0.222' stroke='currentColor' fill='currentColor' x='-1' y='-1' width='2' height='2'/>
	<circle id='gpPt5' stroke-width='0.222' stroke='currentColor' cx='0' cy='0' r='1'/>
	<use xlink:href='#gpPt5' id='gpPt6' fill='currentColor' stroke='none'/>
	<path id='gpPt7' stroke-width='0.222' stroke='currentColor' d='M0,-1.33 L-1.33,0.67 L1.33,0.67 z'/>
	<use xlink:href='#gpPt7' id='gpPt8' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt7' id='gpPt9' stroke='currentColor' transform='rotate(180)'/>
	<use xlink:href='#gpPt9' id='gpPt10' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt3' id='gpPt11' stroke='currentColor' transform='rotate(45)'/>
	<use xlink:href='#gpPt11' id='gpPt12' fill='currentColor' stroke='none'/>
	<path id='gpPt13' stroke-width='0.222' stroke='currentColor' d='M0,1.330 L1.265,0.411 L0.782,-1.067 L-0.782,-1.076 L-1.265,0.411 z'/>
	<use xlink:href='#gpPt13' id='gpPt14' fill='currentColor' stroke='none'/>
	<filter id='textbox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='white' flood-opacity='1' result='bgnd'/>
	  <feComposite in='SourceGraphic' in2='bgnd' operator='atop'/>
	</filter>
	<filter id='greybox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='lightgrey' flood-opacity='1' result='grey'/>
	  <feComposite in='SourceGraphic' in2='grey' operator='atop'/>
	</filter>
</defs>
<g fill="none" color="white" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,392.40 L73.14,392.40 M681.31,392.40 L672.31,392.40  '/>	<g transform="translate(55.75,396.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">0</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,366.93 L68.64,366.93 M681.31,366.93 L676.81,366.93 M64.14,352.04 L68.64,352.04 M681.31,352.04 L676.81,352.04
		M64.14,341.47 L68.64,341.47 M681.31,341.47 L676.81,341.47 M64.14,333.27 L68.64,333.27 M681.31,333.27 L676.81,333.27
		M64.14,326.57 L68.64,326.57 M681.31,326.57 L676.81,326.57 M64.14,320.91 L68.64,320.91 M681.31,320.91 L676.81,320.91
		M64.14,316.00 L68.64,316.00 M681.31,316.00 L676.81,316.00 M64.14,311.67 L68.64,311.67 M681.31,311.67 L676.81,311.67
		M64.14,307.80 L73.14,307.80 M681.31,307.80 L672.31,307.80  '/>	<g transform="translate(55.75,311.70)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">1</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,282.34 L68.64,282.34 M681.31,282.34 L676.81,282.34 M64.14,267.44 L68.64,267.44 M681.31,267.44 L676.81,267.44
		M64.14,256.87 L68.64,256.87 M681.31,256.87 L676.81,256.87 M64.14,248.67 L68.64,248.67 M681.31,248.67 L676.81,248.67
		M64.14,241.97 L68.64,241.97 M681.31,241.97 L676.81,241.97 M64.14,236.31 L68.64,236.31 M681.31,236.31 L676.81,236.31
		M64.14,231.40 L68.64,231.40 M681.31,231.40 L676.81,231.40 M64.14,227.08 L68.64,227.08 M681.31,227.08 L676.81,227.08
		M64.14,223.20 L73.14,223.20 M681.31,223.20 L672.31,223.20  '/>	<g transform="translate(55.75,227.10)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">2</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,197.74 L68.64,197.74 M681.31,197.74 L676.81,197.74 M64.14,182.84 L68.64,182.84 M681.31,182.84 L676.81,182.84
		M64.14,172.27 L68.64,172.27 M681.31,172.27 L676.81,172.27 M64.14,164.07 L68.64,164.07 M681.31,164.07 L676.81,164.07
		M64.14,157.38 L68.64,157.38 M681.31,157.38 L676.81,157.38 M64.14,151.71 L68.64,151.71 M681.31,151.71 L676.81,151.71
		M64.14,146.81 L68.64,146.81 M681.31,146.81 L676.81,146.81 M64.14,142.48 L68.64,142.48 M681.31,142.48 L676.81,142.48
		M64.14,138.61 L73.14,138.61 M681.31,138.61 L672.31,138.61  '/>	<g transform="translate(55.75,142.51)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">3</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,113.14 L68.64,113.14 M681.31,113.14 L676.81,113.14 M64.14,98.24 L68.64,98.24 M681.31,98.24 L676.81,98.24
		M64.14,87.67 L68.64,87.67 M681.31,87.67 L676.81,87.67 M64.14,79.48 L68.64,79.48 M681.31,79.48 L676.81,79.48
		M64.14,72.78 L68.64,72.78 M681.31,72.78 L676.81,72.78 M64.14,67.11 L68.64,67.11 M681.31,67.11 L676.81,67.11
		M64.14,62.21 L68.64,62.21 M681.31,62.21 L676.81,62.21 M64.14,57.88 L68.64,57.88 M681.31,57.88 L676.81,57.88
		M64.14,54.01 L73.14,54.01 M681.31,54.01 L672.31,54.01  '/>	<g transform="translate(55.75,57.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">4</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,392.40 L64.14,383.40 M64.14,54.01 L64.14,63.01  '/>	<g transform="translate(64.14,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">-2</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M87.36,392.40 L87.36,387.90 M87.36,54.01 L87.36,58.51 M100.95,392.40 L100.95,387.90 M100.95,54.01 L100.95,58.51
		M110.59,392.40 L110.59,387.90 M110.59,54.01 L110.59,58.51 M118.06,392.40 L118.06,387.90 M118.06,54.01 L118.06,58.51
		M124.17,392.40 L124.17,387.90 M124.17,54.01 L124.17,58.51 M129.34,392.40 L129.34,387.90 M129.34,54.01 L129.34,58.51
		M133.81,392.40 L133.81,387.90 M133.81,54.01 L133.81,58.51 M137.76,392.40 L137.76,387.90 M137.76,54.01 L137.76,58.51
		M141.29,392.40 L141.29,383.40 M141.29,54.01 L141.29,63.01  '/>	<g transform="translate(141.29,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">-1</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M164.51,392.40 L164.51,387.90 M164.51,54.01 L164.51,58.51 M178.09,392.40 L178.09,387.90 M178.09,54.01 L178.09,58.51
		M187.73,392.40 L187.73,387.90 M187.73,54.01 L187.73,58.51 M195.21,392.40 L195.21,387.90 M195.21,54.01 L195.21,58.51
		M201.32,392.40 L201.32,387.90 M201.32,54.01 L201.32,58.51 M206.48,392.40 L206.48,387.90 M206.48,54.01 L206.48,58.51
		M210.96,392.40 L210.96,387.90 M210.96,54.01 L210.96,58.51 M214.90,392.40 L214.90,387.90 M214.90,54.01 L214.90,58.51
		M218.43,392.40 L218.43,383.40 M218.43,54.01 L218.43,63.01  '/>	<g transform="translate(218.43,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">0</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M241.66,392.40 L241.66,387.90 M241.66,54.01 L241.66,58.51 M255.24,392.40 L255.24,387.90 M255.24,54.01 L255.24,58.51
		M264.88,392.40 L264.88,387.90 M264.88,54.01 L264.88,58.51 M272.36,392.40 L272.36,387.90 M272.36,54.01 L272.36,58.51
		M278.46,392.40 L278.46,387.90 M278.46,54.01 L278.46,58.51 M283.63,392.40 L283.63,387.90 M283.63,54.01 L283.63,58.51
		M288.10,392.40 L288.10,387.90 M288.10,54.01 L288.10,58.51 M292.05,392.40 L292.05,387.90 M292.05,54.01 L292.05,58.51
		M295.58,392.40 L295.58,383.40 M295.58,54.01 L295.58,63.01  '/>	<g transform="translate(295.58,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">1</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M318.80,392.40 L318.80,387.90 M318.80,54.01 L318.80,58.51 M332.39,392.40 L332.39,387.90 M332.39,54.01 L332.39,58.51
		M342.03,392.40 L342.03,387.90 M342.03,54.01 L342.03,58.51 M349.50,392.40 L349.50,387.90 M349.50,54.01 L349.50,58.51
		M355.61,392.40 L355.61,387.90 M355.61,54.01 L355.61,58.51 M360.77,392.40 L360.77,387.90 M360.77,54.01 L360.77,58.51
		M365.25,392.40 L365.25,387.90 M365.25,54.01 L365.25,58.51 M369.19,392.40 L369.19,387.90 M369.19,54.01 L369.19,58.51
		M372.73,392.40 L372.73,383.40 M372.73,54.01 L372.73,63.01  '/>	<g transform="translate(372.73,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">2</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M395.95,392.40 L395.95,387.90 M395.95,54.01 L395.95,58.51 M409.53,392.40 L409.53,387.90 M409.53,54.01 L409.53,58.51
		M419.17,392.40 L419.17,387.90 M419.17,54.01 L419.17,58.51 M426.65,392.40 L426.65,387.90 M426.65,54.01 L426.65,58.51
		M432.76,392.40 L432.76,387.90 M432.76,54.01 L432.76,58.51 M437.92,392.40 L437.92,387.90 M437.92,54.01 L437.92,58.51
		M442.40,392.40 L442.40,387.90 M442.40,54.01 L442.40,58.51 M446.34,392.40 L446.34,387.90 M446.34,54.01 L446.34,58.51
		M449.87,392.40 L449.87,383.40 M449.87,54.01 L449.87,63.01  '/>	<g transform="translate(449.87,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">3</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M473.09,392.40 L473.09,387.90 M473.09,54.01 L473.09,58.51 M486.68,392.40 L486.68,387.90 M486.68,54.01 L486.68,58.51
		M496.32,392.40 L496.32,387.90 M496.32,54.01 L496.32,58.51 M503.79,392.40 L503.79,387.90 M503.79,54.01 L503.79,58.51
		M509.90,392.40 L509.90,387.90 M509.90,54.01 L509.90,58.51 M515.07,392.40 L515.07,387.90 M515.07,54.01 L515.07,58.51
		M519.54,392.40 L519.54,387.90 M519.54,54.01 L519.54,58.51 M523.49,392.40 L523.49,387.90 M523.49,54.01 L523.49,58.51
		M527.02,392.40 L527.02,383.40 M527.02,54.01 L527.02,63.01  '/>	<g transform="translate(527.02,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">4</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M550.24,392.40 L550.24,387.90 M550.24,54.01 L550.24,58.51 M563.83,392.40 L563.83,387.90 M563.83,54.01 L563.83,58.51
		M573.46,392.40 L573.46,387.90 M573.46,54.01 L573.46,58.51 M580.94,392.40 L580.94,387.90 M580.94,54.01 L580.94,58.51
		M587.05,392.40 L587.05,387.90 M587.05,54.01 L587.05,58.51 M592.21,392.40 L592.21,387.90 M592.21,54.01 L592.21,58.51
		M596.69,392.40 L596.69,387.90 M596.69,54.01 L596.69,58.51 M600.63,392.40 L600.63,387.90 M600.63,54.01 L600.63,58.51
		M604.16,392.40 L604.16,383.40 M604.16,54.01 L604.16,63.01  '/>	<g transform="translate(604.16,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">5</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M627.39,392.40 L627.39,387.90 M627.39,54.01 L627.39,58.51 M640.97,392.40 L640.97,387.90 M640.97,54.01 L640.97,58.51
		M650.61,392.40 L650.61,387.90 M650.61,54.01 L650.61,58.51 M658.09,392.40 L658.09,387.90 M658.09,54.01 L658.09,58.51
		M664.20,392.40 L664.20,387.90 M664.20,54.01 L664.20,58.51 M669.36,392.40 L669.36,387.90 M669.36,54.01 L669.36,58.51
		M673.83,392.40 L673.83,387.90 M673.83,54.01 L673.83,58.51 M677.78,392.40 L677.78,387.90 M677.78,54.01 L677.78,58.51
		M681.31,392.40 L681.31,383.40 M681.31,54.01 L681.31,63.01  '/>	<g transform="translate(681.31,414.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">6</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,54.01 L64.14,392.40 L681.31,392.40 L681.31,54.01 L64.14,54.01 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(19.18,223.21) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >frequency</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(689.71,223.21) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(372.72,441.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >integrand</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(372.72,57.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
	<g id="gnuplot_plot_1" ><title>103</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<g transform="translate(766.43,209.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">3</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(148,   0, 211)'  d='M715.48,205.21 L758.04,205.21  '/>	</g>
	<path stroke='rgb(148,   0, 211)'  d='M185.61,145.10 L185.61,246.53 L222.42,246.53 L222.42,263.94 L239.53,263.94 L239.53,292.91 L250.80,292.91 L250.80,307.80
		L259.22,307.80 L259.22,333.27 L265.95,333.27 L265.95,304.30 L271.54,304.30 L271.54,392.40 L276.34,392.40 L276.34,341.47
		L280.53,341.47 L280.53,352.04 L284.26,352.04 L284.26,307.80 L287.61,307.80 L287.61,392.40 L290.66,392.40 L290.66,352.04
		L293.45,352.04 L293.45,392.40 L296.03,392.40 L298.43,392.40 L300.66,392.40 L302.76,392.40 L304.73,392.40 L306.59,392.40
		L308.35,392.40 L310.03,392.40 L311.62,392.40 L313.15,392.40 L313.15,366.93 L314.60,366.93 L314.60,392.40 L316.00,392.40
		L317.34,392.40 L318.63,392.40 L319.87,392.40 L321.07,392.40 L321.07,366.93 L322.22,366.93 L322.22,392.40 L323.34,392.40
		L324.42,392.40 L325.47,392.40 L326.48,392.40 L327.47,392.40 L328.43,392.40 L329.36,392.40 L329.36,366.93 L330.26,366.93
		L330.26,392.40 L331.14,392.40 L332.00,392.40 L332.00,352.04 L332.84,352.04 L332.84,392.40 L333.66,392.40 L334.45,392.40
		L335.23,392.40 L336.00,392.40 L336.74,392.40 L337.47,392.40 L338.18,392.40 L338.88,392.40 L339.56,392.40 L340.23,392.40
		L340.89,392.40 L341.53,392.40 L342.17,392.40 L342.79,392.40 L343.40,392.40 L343.99,392.40 L344.58,392.40 L345.16,392.40
		L345.73,392.40 L346.29,392.40 L346.84,392.40 L347.38,392.40 L347.91,392.40 L348.43,392.40 L348.95,392.40 L349.45,392.40
		L349.95,392.40 L350.45,392.40 L350.93,392.40 L351.41,392.40 L351.88,392.40 L352.35,392.40 L352.81,392.40 L353.26,392.40
		L353.71,392.40 L354.15,392.40 L354.58,392.40 L355.01,392.40 L355.44,392.40 L355.86,392.40 L356.27,392.40 L356.68,392.40
		L357.08,392.40 L357.48,392.40 L357.87,392.40 L358.26,392.40 L358.65,392.40 L359.03,392.40 L359.41,392.40 L359.78,392.40
		L360.15,392.40 L360.51,392.40 L360.87,392.40 L361.23,392.40 L361.58,392.40 L361.93,392.40 L362.28,392.40 L362.62,392.40
		L362.62,352.04 L362.96,352.04 L362.96,392.40  '/></g>
	</g>
	<g id="gnuplot_plot_2" ><title>105</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_2_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_2')">
	<g transform="translate(766.43,227.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">5</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(  0, 158, 115)'  d='M715.48,223.21 L758.04,223.21  '/>	</g>
	<path stroke='rgb(  0, 158, 115)'  d='M310.31,54.01 L310.31,165.04 L347.12,165.04 L347.12,219.37 L364.23,219.37 L364.23,241.37 L375.51,241.37 L375.51,263.94
		L383.93,263.94 L383.93,286.21 L390.65,286.21 L390.65,316.00 L396.25,316.00 L401.04,316.00 L401.04,392.40 L405.23,392.40
		L408.96,392.40 L408.96,352.04 L412.31,352.04 L412.31,392.40 L415.36,392.40 L418.16,392.40 L418.16,352.04 L420.73,352.04
		L420.73,392.40 L423.13,392.40 L425.36,392.40 L427.46,392.40 L429.43,392.40 L431.29,392.40 L433.05,392.40 L434.73,392.40
		L436.33,392.40 L437.85,392.40 L439.31,392.40 L440.70,392.40 L442.04,392.40 L443.33,392.40 L444.57,392.40 L445.77,392.40
		L446.92,392.40 L448.04,392.40 L449.12,392.40 L450.17,392.40 L451.18,392.40 L452.17,392.40 L453.13,392.40 L453.13,366.93
		L454.06,366.93 L454.06,392.40 L454.96,392.40 L455.85,392.40 L456.70,392.40 L457.54,392.40 L458.36,392.40 L458.36,352.04
		L459.16,352.04 L459.16,392.40 L459.94,392.40 L460.70,392.40 L460.70,366.93 L461.44,366.93 L461.44,392.40 L462.17,392.40
		L462.88,392.40 L463.58,392.40 L464.27,392.40 L464.94,392.40 L465.59,392.40 L466.24,392.40 L466.87,392.40 L467.49,392.40
		L468.10,392.40 L468.70,392.40 L469.29,392.40 L469.86,392.40 L470.43,392.40 L470.99,392.40 L471.54,392.40 L472.08,392.40
		L472.61,392.40 L473.13,392.40 L473.65,392.40 L474.16,392.40 L474.66,392.40 L475.15,392.40 L475.64,392.40 L476.11,392.40
		L476.59,392.40 L477.05,392.40 L477.51,392.40 L477.96,392.40 L478.41,392.40 L478.85,392.40 L479.29,392.40 L479.72,392.40
		L480.14,392.40 L480.56,392.40 L480.97,392.40 L481.38,392.40 L481.78,392.40 L482.18,392.40 L482.58,392.40 L482.97,392.40
		L483.35,392.40 L483.73,392.40 L484.11,392.40 L484.11,366.93 L484.48,366.93 L484.48,392.40 L484.85,392.40 L485.21,392.40
		L485.57,392.40 L485.93,392.40 L486.28,392.40 L486.63,392.40 L486.98,392.40 L487.32,392.40 L487.66,392.40  '/></g>
	</g>
	<g id="gnuplot_plot_3" ><title>107</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_3_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_3')">
	<g transform="translate(766.43,245.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >10</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">7</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb( 86, 180, 233)'  d='M715.48,241.21 L758.04,241.21  '/>	</g>
	<path stroke='rgb( 86, 180, 233)'  d='M390.97,54.01 L390.97,81.38 L427.78,81.38 L427.78,144.62 L444.90,144.62 L444.90,175.94 L456.17,175.94 L456.17,210.06
		L464.59,210.06 L464.59,222.84 L471.31,222.84 L471.31,230.95 L476.91,230.95 L476.91,254.21 L481.70,254.21 L481.70,250.94
		L485.90,250.94 L485.90,292.91 L489.62,292.91 L489.62,282.34 L492.98,282.34 L492.98,284.22 L496.02,284.22 L496.02,320.91
		L498.82,320.91 L498.82,326.57 L501.40,326.57 L503.79,326.57 L506.03,326.57 L506.03,311.67 L508.12,311.67 L508.12,341.47
		L510.09,341.47 L510.09,320.91 L511.95,320.91 L511.95,352.04 L513.72,352.04 L513.72,392.40 L515.39,392.40 L516.99,392.40
		L516.99,366.93 L518.51,366.93 L518.51,333.27 L519.97,333.27 L519.97,352.04 L521.36,352.04 L521.36,392.40 L522.71,392.40
		L522.71,333.27 L523.99,333.27 L523.99,392.40 L525.24,392.40 L526.43,392.40 L527.59,392.40 L528.70,392.40 L529.79,392.40
		L530.83,392.40 L531.85,392.40 L532.83,392.40 L533.79,392.40 L533.79,333.27 L534.72,333.27 L534.72,392.40 L535.63,392.40
		L536.51,392.40 L537.37,392.40 L538.21,392.40 L539.02,392.40 L539.82,392.40 L539.82,366.93 L540.60,366.93 L540.60,392.40
		L541.36,392.40 L542.11,392.40 L542.83,392.40 L543.55,392.40 L544.24,392.40 L544.93,392.40 L545.60,392.40 L545.60,366.93
		L546.26,366.93 L546.26,392.40 L546.90,392.40 L547.53,392.40 L548.15,392.40 L548.76,392.40 L549.36,392.40 L549.95,392.40
		L550.53,392.40 L551.09,392.40 L551.65,392.40 L552.20,392.40 L552.20,366.93 L552.74,366.93 L552.74,392.40 L553.27,392.40
		L553.80,392.40 L554.31,392.40 L554.82,392.40 L555.32,392.40 L555.81,392.40 L556.30,392.40 L556.78,392.40 L557.25,392.40
		L557.25,366.93 L557.71,366.93 L557.71,392.40 L558.17,392.40 L558.63,392.40 L559.07,392.40 L559.51,392.40 L559.95,392.40
		L560.38,392.40 L560.80,392.40 L561.22,392.40 L561.63,392.40 L562.04,392.40 L562.45,392.40 L562.85,392.40 L563.24,392.40
		L563.63,392.40 L564.01,392.40 L564.40,392.40 L564.77,392.40 L565.14,392.40 L565.51,392.40 L565.88,392.40 L566.24,392.40
		L566.59,392.40 L566.95,392.40 L567.29,392.40 L567.64,392.40 L567.98,392.40 L568.32,392.40  '/></g>
	</g>
<g fill="none" color="white" stroke="rgb( 86, 180, 233)" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="black" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M64.14,54.01 L64.14,392.40 L681.31,392.40 L681.31,54.01 L64.14,54.01 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(372.72,30.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >step size : 3.0</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>

<script type="text/javascript"><![CDATA[
// plot boundaries and axis scaling information for mousing 
gnuplot_svg.plot_term_xmax = 800;
gnuplot_svg.plot_term_ymax = 450;
gnuplot_svg.plot_xmin = 64.1;
gnuplot_svg.plot_xmax = 681.3;
gnuplot_svg.plot_ybot = 392.4;
gnuplot_svg.plot_ytop = 54.0;
gnuplot_svg.plot_width = 617.2;
gnuplot_svg.plot_height = 338.4;
gnuplot_svg.plot_axis_xmin = 0.01;
gnuplot_svg.plot_axis_xmax = 1e+06;
gnuplot_svg.plot_axis_ymin = 1;
gnuplot_svg.plot_axis_ymax = 10000;
gnuplot_svg.polar_mode = false;
gnuplot_svg.plot_axis_x2min = "none";
gnuplot_svg.plot_axis_y2min = "none";
gnuplot_svg.plot_logaxis_x = 1;
gnuplot_svg.plot_logaxis_y = 1;
gnuplot_svg.plot_timeaxis_x = "";
gnuplot_svg.plot_timeaxis_y = "";
gnuplot_svg.hypertext_fontSize = 0;
gnuplot_svg.hypertext_fontName = null;
gnuplot_svg.hypertext_fontStyle = null;
gnuplot_svg.hypertext_fontWeight = null;
]]>
</script>
</g>

  <text id="coord_text" text-anchor="start" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <rect id="hypertextbox" class="hypertextbox" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="16" visibility="hidden" />

  <text id="hypertext" class="hypertext" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <image id="hyperimage" class="hyperimage" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="200" width="300" visibility="hidden" />
</svg>

