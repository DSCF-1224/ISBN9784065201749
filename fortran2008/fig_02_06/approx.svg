<?xml version="1.0" encoding="utf-8"  standalone="no"?>
<svg  onload="if (typeof(gnuplot_svg)!='undefined') gnuplot_svg.Init(evt)" 
 width="960" height="480"
 viewBox="0 0 960 480"
 xmlns="http://www.w3.org/2000/svg"
 xmlns:xlink="http://www.w3.org/1999/xlink"
>

<title>Gnuplot</title>
<desc>Produced by GNUPLOT 5.4 patchlevel 2 </desc>

<script type="text/javascript" > <![CDATA[
// From:	Marko Karjalainen <markokarjalainen@kolumbus.fi>
// Date:	27 Aug 2018
// Experimental gnuplot plugin for svg
//
// All svg elements on page get own gnuplot plugin attached by js, so no conflict with global variables.
//
// Javascript variables are read from second script tag and converted to json for import to plugin.
// Inline events are removed from xml and new ones are attached with addEventListener function.
// Inline events should be removed from xml and xml should have better id/class names to attach events from js.
//
// Improved mouseover text and image handling
//   content changed to xml only if it really changed and bouncing is calculated once.
//
// Convert functions are same as before, maybe renamed better.
//
// Javascript routines for mouse and keyboard interaction with
// SVG documents produced by gnuplot SVG terminal driver.

// TODO do not create inline events to svg and give id or classes for getting elements
// TODO make own svg layer x/y range sized for coordinates?

if (window) {
    window.addEventListener('load', function () {
        // Find svg elements
        var svg = document.querySelectorAll('svg');
        for (var i = 0; i < svg.length; i++) {
            // Init plugin
            if (!svg[i].gnuplot) {
                // Check if gnuplot generated svg
                if(svg[i].getElementById('gnuplot_canvas')){
                    svg[i].gnuplot = new gnuplot_svg(svg[i]);
                }
            }
        }
    });
}

gnuplot_svg = function (svgElement) {

    var version = '09 April 2019';

    var settings = {};

    var viewBoxResetValue = [];

    var drag = {
        'enabled': false,
        'offset': { 'x': 0, 'y': 0 },
        'change': svgElement.createSVGPoint(),
        'timeout': null
    };

    var coordinateText = {
        'enabled': false,
        'element': svgElement.getElementById('coord_text')
    };

    var popoverContainer = {
        'element': null,
        'content': null,
    };

    var popoverImage = {
        'element': null,
        'content': null,
        'width': 300,
        'height': 200,
        'defaultWidth': 300,
        'defaultHeight': 200,
    };

    var popoverText = {
        'element': null,
        'content': null,
        'width': 11,
        'height': 16,
        'defaultWidth': 11,
        'defaultHeight': 16,
    };

    var point = svgElement.createSVGPoint();

    var axisDate = new Date();

    var gridEnabled = false;

    // Get plot boundaries and axis scaling information for mousing from current object script tag
    // TODO add these to svg xml custom attribute for reading(json format)
    var parseSettings = function () {
        var script = svgElement.querySelectorAll('script');
        if (script && script[1]) {
            var scriptText = script[1].firstChild.nodeValue;
            // Remove inline comments
            scriptText = scriptText.replace(/^\s*\/\/.*\n/g, '');
            // Change prefix to "
            scriptText = scriptText.replace(/gnuplot_svg\./g, '"');
            // Change = to " :
            scriptText = scriptText.replace(/ = /g, '" : ');
            // Change line endings to comma
            scriptText = scriptText.replace(/;\n|\n/g, ',');
            // Remove last comma
            scriptText = scriptText.replace(/,+$/, '');
            // Parse as json string
            settings = JSON.parse("{\n" + scriptText + "\n}");
        }
    };

    // Add interactive events
    var addEvents = function () {
        var i;

        // Get keyentry elements
        var toggleVisibility = svgElement.querySelectorAll('g[id$="_keyentry"]');
        for (i = 0; i < toggleVisibility.length; i++) {
            // ------- Remove inline events
            toggleVisibility[i].removeAttribute('onclick');
            // -------

            // Add keyentry event to toggle visibility
            toggleVisibility[i].addEventListener('click', key.bind(null, toggleVisibility[i].getAttribute('id'), null));
        }

        // ------- Remove inline events from bounding box
        var boundingBox = svgElement.querySelector('rect[onclick^="gnuplot_svg.toggleCoordBox"]');
        if (boundingBox) {
            boundingBox.removeAttribute('onclick');
            boundingBox.removeAttribute('onmousemove');
        }
        // ------- Remove inline events from canvas
        var canvas = svgElement.getElementById('gnuplot_canvas');
        if (canvas) {
            canvas.removeAttribute('onclick');
            canvas.removeAttribute('onmousemove');
        }
        // -------

        // Get grid image
        var toggleGrid = svgElement.querySelector('image[onclick^="gnuplot_svg.toggleGrid"]');
        if (toggleGrid) {
            // ------- Remove inline events
            toggleGrid.removeAttribute('onclick');
            // -------

            // Add Toggle grid image event
            toggleGrid.addEventListener('click', function (evt) {
                grid();
                evt.preventDefault();
                evt.stopPropagation();
            });
        }

        // Get hypertexts
        var hyperText = svgElement.querySelectorAll('g[onmousemove^="gnuplot_svg.showHypertext"]');

        // Set view element variables
        if (hyperText.length) {
            popoverContainer.element = svgElement.getElementById('hypertextbox');
            popoverText.element = svgElement.getElementById('hypertext');
            popoverImage.element = svgElement.getElementById('hyperimage');
            popoverImage.defaultWidth = popoverImage.element.getAttribute('width');
            popoverImage.defaultHeight = popoverImage.element.getAttribute('height');
        }

        for (i = 0; i < hyperText.length; i++) {
            // Get text from attr uggly way, svg has empty title element
            var text = hyperText[i].getAttribute('onmousemove').substr(31).slice(0, -2);

            // ------- Remove inline events
            hyperText[i].removeAttribute('onmousemove');
            hyperText[i].removeAttribute('onmouseout');
            // -------

            // Add event
            hyperText[i].addEventListener('mousemove', popover.bind(null, text, true));
            hyperText[i].addEventListener('mouseout', popover.bind(null, null, false));
        }

        // Toggle coordinates visibility on left click on boundingBox element
        svgElement.addEventListener('click', function (evt) {
            if (!drag.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                coordinate();
                setCoordinateLabel(evt);
            }
        });

        // Save move start position, enable drag after delay
        svgElement.addEventListener('mousedown', function (evt) {

            drag.offset = { 'x': evt.clientX, 'y': evt.clientY };

            // Delay for moving, so not move accidentally if only click
            drag.timeout = setTimeout(function () {
                drag.enabled = true;
            }, 250);

            // Cancel draggable
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Disable drag
        svgElement.addEventListener('mouseup', function (evt) {
            drag.enabled = false;
            clearTimeout(drag.timeout);
        });

        // Mouse move
        svgElement.addEventListener('mousemove', function (evt) {

            // Drag svg element
            if (evt.buttons == 1 && drag.enabled) {

                // Position change
                drag.change.x = evt.clientX - drag.offset.x;
                drag.change.y = evt.clientY - drag.offset.y;

                // Set current mouse position
                drag.offset.x = evt.clientX;
                drag.offset.y = evt.clientY;

                // Convert to svg position
                drag.change.matrixTransform(svgElement.getScreenCTM().inverse());

                var viewBoxValues = getViewBox();

                viewBoxValues[0] -= drag.change.x;
                viewBoxValues[1] -= drag.change.y;

                setViewBox(viewBoxValues);
            }

            // View coordinates on mousemove over svg element
            if (coordinateText.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                setCoordinateLabel(evt);
            }

        });

        // Zoom with wheel
        svgElement.addEventListener('wheel', function (evt) {
            // x or y scroll zoom both axels
            var delta = Math.max(-1, Math.min(1, (evt.deltaY || evt.deltaX)));

            if (delta > 0) {
                setViewBox(zoom('in'));
            }
            else {
                setViewBox(zoom('out'));
            }

            // Disable scroll the entire webpage
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Reset on right click or hold tap
        svgElement.addEventListener('contextmenu', function (evt) {

            setViewBox(viewBoxResetValue);

            // Disable native context menu
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Keyboard actions, old svg version not support key events so must listen window
        window.addEventListener('keydown', function (evt) {

            // Not capture event from inputs
            // body = svg inline in page, svg = plain svg file, window = delegated events to object
            if (evt.target.nodeName != 'BODY' && evt.target.nodeName != 'svg' && evt.target != window) {
                return true;
            }

            var viewBoxValues = [];

            switch (evt.key) {
                // Move, Edge sends without Arrow word
                case 'ArrowLeft':
                case 'Left':
                case 'ArrowRight':
                case 'Right':
                case 'ArrowUp':
                case 'Up':
                case 'ArrowDown':
                case 'Down':
                    viewBoxValues = pan(evt.key.replace('Arrow', '').toLowerCase());
                    break;
                // Zoom in
                case '+':
                case 'Add':
                    viewBoxValues = zoom('in');
                    break;
                // Zoom out
                case '-':
                case 'Subtract':
                    viewBoxValues = zoom('out');
                    break;
                // Reset
                case 'Home':
                    viewBoxValues = viewBoxResetValue;
                    break;
                // Toggle grid
                case '#':
                    grid();
                    break;
            }

            if (viewBoxValues.length) {
                setViewBox(viewBoxValues);
            }
        });
    };

    // Get svg viewbox details
    var getViewBox = function () {
        var viewBoxValues = svgElement.getAttribute('viewBox').split(' ');
        viewBoxValues[0] = parseFloat(viewBoxValues[0]);
        viewBoxValues[1] = parseFloat(viewBoxValues[1]);
        viewBoxValues[2] = parseFloat(viewBoxValues[2]);
        viewBoxValues[3] = parseFloat(viewBoxValues[3]);
        return viewBoxValues;
    };

    // Set svg viewbox details
    var setViewBox = function (viewBoxValues) {
        svgElement.setAttribute('viewBox', viewBoxValues.join(' '));
    };

    // Set coordinate label position and text
    var setCoordinateLabel = function (evt) {
        var position = convertDOMToSVG({ 'x': evt.clientX, 'y': evt.clientY });

        // Set coordinate label position
        coordinateText.element.setAttribute('x', position.x);
        coordinateText.element.setAttribute('y', position.y);

        // Convert svg position to plot coordinates
        var plotcoord = convertSVGToPlot(position);

        // Parse label to view
        var label = parseCoordinateLabel(plotcoord);

        // Set coordinate label text
        coordinateText.element.textContent = label.x + ' ' + label.y;
    };

    // Convert position DOM to SVG
    var convertDOMToSVG = function (position) {
        point.x = position.x;
        point.y = position.y;
        return point.matrixTransform(svgElement.getScreenCTM().inverse());
    };

    // Convert position SVG to Plot
    var convertSVGToPlot = function (position) {
        var plotcoord = {};
        var plotx = position.x - settings.plot_xmin;
        var ploty = position.y - settings.plot_ybot;
        var x, y;

        if (settings.plot_logaxis_x !== 0) {
            x = Math.log(settings.plot_axis_xmax)
                - Math.log(settings.plot_axis_xmin);
            x = x * (plotx / (settings.plot_xmax - settings.plot_xmin))
                + Math.log(settings.plot_axis_xmin);
            x = Math.exp(x);
        } else {
            x = settings.plot_axis_xmin + (plotx / (settings.plot_xmax - settings.plot_xmin)) * (settings.plot_axis_xmax - settings.plot_axis_xmin);
        }

        if (settings.plot_logaxis_y !== 0) {
            y = Math.log(settings.plot_axis_ymax)
                - Math.log(settings.plot_axis_ymin);
            y = y * (ploty / (settings.plot_ytop - settings.plot_ybot))
                + Math.log(settings.plot_axis_ymin);
            y = Math.exp(y);
        } else {
            y = settings.plot_axis_ymin + (ploty / (settings.plot_ytop - settings.plot_ybot)) * (settings.plot_axis_ymax - settings.plot_axis_ymin);
        }

        plotcoord.x = x;
        plotcoord.y = y;
        return plotcoord;
    };

    // Parse plot x/y values to label
    var parseCoordinateLabel = function (plotcoord) {
        var label = { 'x': 0, 'y': 0 };

        if (settings.plot_timeaxis_x == 'DMS' || settings.plot_timeaxis_y == 'DMS') {
            if (settings.plot_timeaxis_x == 'DMS') {
                label.x = convertToDMS(plotcoord.x);
            }
            else {
                label.x = plotcoord.x.toFixed(2);
            }

            if (settings.plot_timeaxis_y == 'DMS') {
                label.y = convertToDMS(plotcoord.y);
            }
            else {
                label.y = plotcoord.y.toFixed(2);
            }

        } else if (settings.polar_mode) {
            polar = convertToPolar(plotcoord.x, plotcoord.y);
            label.x = 'ang= ' + polar.ang.toPrecision(4);
            label.y = 'R= ' + polar.r.toPrecision(4);

        } else if (settings.plot_timeaxis_x == 'Date') {
            axisDate.setTime(1000 * plotcoord.x);
            var year = axisDate.getUTCFullYear();
            var month = axisDate.getUTCMonth();
            var date = axisDate.getUTCDate();
            label.x = (' ' + date).slice(-2) + '/' + ('0' + (month + 1)).slice(-2) + '/' + year;
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'Time') {
            axisDate.setTime(1000 * plotcoord.x);
            var hour = axisDate.getUTCHours();
            var minute = axisDate.getUTCMinutes();
            var second = axisDate.getUTCSeconds();
            label.x = ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2) + ':' + ('0' + second).slice(-2);
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'DateTime') {
            axisDate.setTime(1000 * plotcoord.x);
            label.x = axisDate.toUTCString();
            label.y = plotcoord.y.toFixed(2);
        } else {
            label.x = plotcoord.x.toFixed(2);
            label.y = plotcoord.y.toFixed(2);
        }

        return label;
    };

    // Convert position to Polar
    var convertToPolar = function (x, y) {
        polar = {};
        var phi, r;
        phi = Math.atan2(y, x);
        if (settings.plot_logaxis_r) {
            r = Math.exp((x / Math.cos(phi) + Math.log(settings.plot_axis_rmin) / Math.LN10) * Math.LN10);
        }
        else if (settings.plot_axis_rmin > settings.plot_axis_rmax) {
            r = settings.plot_axis_rmin - x / Math.cos(phi);
        } else {
            r = settings.plot_axis_rmin + x / Math.cos(phi);
        }
        phi = phi * (180 / Math.PI);
        if (settings.polar_sense < 0) {
            phi = -phi;
        }
        if (settings.polar_theta0 !== undefined) {
            phi = phi + settings.polar_theta0;
        }
        if (phi > 180) { phi = phi - 360; }
        polar.r = r;
        polar.ang = phi;
        return polar;
    };

    // Convert position to DMS
    var convertToDMS = function (x) {
        var dms = { d: 0, m: 0, s: 0 };
        var deg = Math.abs(x);
        dms.d = Math.floor(deg);
        dms.m = Math.floor((deg - dms.d) * 60);
        dms.s = Math.floor((deg - dms.d) * 3600 - dms.m * 60);
        fmt = ((x < 0) ? '-' : ' ') + dms.d.toFixed(0) + '°' + dms.m.toFixed(0) + '"' + dms.s.toFixed(0) + "'";
        return fmt;
    };

    // Set popover text to show
    var setPopoverText = function (content) {

        // Minimum length
        popoverText.width = popoverText.defaultWidth;

        // Remove old texts
        while (null !== popoverText.element.firstChild) {
            popoverText.element.removeChild(popoverText.element.firstChild);
        }

        var lines = content.split(/\n|\\n/g);

        // Single line
        if (lines.length <= 1) {
            popoverText.element.textContent = content;
            popoverText.width = popoverText.element.getComputedTextLength() + 8;
        }
        // Multiple lines
        else {
            var lineWidth = 0;
            var tspanElement;

            for (var l = 0; l < lines.length; l++) {
                tspanElement = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
                // Y relative position
                if (l > 0) {
                    tspanElement.setAttribute('dy', popoverText.defaultHeight);
                }
                // Append text
                tspanElement.appendChild(document.createTextNode(lines[l]));
                popoverText.element.appendChild(tspanElement);

                // Max line width
                lineWidth = tspanElement.getComputedTextLength() + 8;
                if (popoverText.width < lineWidth) {
                    popoverText.width = lineWidth;
                }
            }
        }

        // Box Height
        popoverText.height = 2 + popoverText.defaultHeight * lines.length;
        popoverContainer.element.setAttribute('height', popoverText.height);

        // Box Width
        popoverContainer.element.setAttribute('width', popoverText.width);
    };

    // Set popover image to show
    var setPopoverImage = function (content) {

        // Set default image size
        popoverImage.width = popoverImage.defaultWidth;
        popoverImage.height = popoverImage.defaultHeight;

        // Pick up height and width from image(width,height):name
        if (content.charAt(5) == '(') {
            popoverImage.width = parseInt(content.slice(6));
            popoverImage.height = parseInt(content.slice(content.indexOf(',') + 1));
        }

        popoverImage.element.setAttribute('width', popoverImage.width);
        popoverImage.element.setAttribute('height', popoverImage.height);
        popoverImage.element.setAttribute('preserveAspectRatio', 'none');

        // attach image URL as a link
        content = content.slice(content.indexOf(':') + 1);
        popoverImage.element.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', content);
    };

    // Show popover text in given position
    var showPopoverText = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverText.height + 16 > domRect.y) {
            position.y = domRect.y - popoverText.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverText.width + 14 > domRect.x) {
            position.x = domRect.x - popoverText.width - 14;
        }

        // Change Box position
        popoverContainer.element.setAttribute('x', position.x + 10);
        popoverContainer.element.setAttribute('y', position.y + 4);
        popoverContainer.element.setAttribute('visibility', 'visible');

        // Change Text position
        popoverText.element.setAttribute('x', position.x + 14);
        popoverText.element.setAttribute('y', position.y + 18);
        popoverText.element.setAttribute('visibility', 'visible');

        // Change multiline text position
        var tspan = popoverText.element.querySelectorAll('tspan');
        for (var i = 0; i < tspan.length; i++) {
            tspan[i].setAttribute('x', position.x + 14);
        }

        // Font properties
        if (settings.hypertext_fontFamily != null)
            popoverText.element.setAttribute('font-family', settings.hypertext_fontFamily);
        if (settings.hypertext_fontStyle != null)
            popoverText.element.setAttribute('font-style', settings.hypertext_fontStyle);
        if (settings.hypertext_fontWeight != null)
            popoverText.element.setAttribute('font-weight', settings.hypertext_fontWeight);
        if (settings.hypertext_fontSize > 0)
            popoverText.element.setAttribute('font-size', settings.hypertext_fontSize);
    };

    // Show popover image in given position
    var showPopoverImage = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverImage.height + 16 > domRect.y) {
            position.y = domRect.y - popoverImage.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverImage.width + 14 > domRect.x) {
            position.x = domRect.x - popoverImage.width - 14;
        }

        popoverImage.element.setAttribute('x', position.x);
        popoverImage.element.setAttribute('y', position.y);
        popoverImage.element.setAttribute('visibility', 'visible');
    };

    // Hide all popovers
    var hidePopover = function () {
        popoverContainer.element.setAttribute('visibility', 'hidden');
        popoverText.element.setAttribute('visibility', 'hidden');
        popoverImage.element.setAttribute('visibility', 'hidden');
    };

    // Zoom svg inside viewbox
    var zoom = function (direction) {
        var zoomRate = 1.1;
        var viewBoxValues = getViewBox();

        var widthBefore = viewBoxValues[2];
        var heightBefore = viewBoxValues[3];

        if (direction == 'in') {
            viewBoxValues[2] /= zoomRate;
            viewBoxValues[3] /= zoomRate;
            // Pan to center
            viewBoxValues[0] -= (viewBoxValues[2] - widthBefore) / 2;
            viewBoxValues[1] -= (viewBoxValues[3] - heightBefore) / 2;
        }
        else if (direction == 'out') {
            viewBoxValues[2] *= zoomRate;
            viewBoxValues[3] *= zoomRate;
            // Pan to center
            viewBoxValues[0] += (widthBefore - viewBoxValues[2]) / 2;
            viewBoxValues[1] += (heightBefore - viewBoxValues[3]) / 2;
        }

        return viewBoxValues;
    };

    // Pan svg inside viewbox
    var pan = function (direction) {
        var panRate = 10;
        var viewBoxValues = getViewBox();

        switch (direction) {
            case 'left':
                viewBoxValues[0] += panRate;
                break;
            case 'right':
                viewBoxValues[0] -= panRate;
                break;
            case 'up':
                viewBoxValues[1] += panRate;
                break;
            case 'down':
                viewBoxValues[1] -= panRate;
                break;
        }

        return viewBoxValues;
    };

    // Toggle key and chart on/off or set manually to wanted
    var key = function (id, set, evt) {
        var visibility = null;

        // Chart element
        var chartElement = svgElement.getElementById(id.replace('_keyentry', ''));
        if (chartElement) {
            // Set on/off
            if (set === true || set === false) {
                visibility = set ? 'visible' : 'hidden';
            }
            // Toggle
            else {
                visibility = chartElement.getAttribute('visibility') == 'hidden' ? 'visible' : 'hidden';
            }
            chartElement.setAttribute('visibility', visibility);
        }

        // Key element
        var keyElement = svgElement.getElementById(id);
        if (keyElement && visibility) {
            keyElement.setAttribute('style', visibility == 'hidden' ? 'filter:url(#greybox)' : 'none');
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Toggle coordinates on/off or set manually to wanted
    var coordinate = function (set) {
        if (coordinateText.element) {
            // Set on/off
            if (set === true || set === false) {
                coordinateText.enabled = set;
            }
            // Toggle
            else {
                coordinateText.enabled = coordinateText.element.getAttribute('visibility') == 'hidden' ? true : false;
            }
            coordinateText.element.setAttribute('visibility', coordinateText.enabled ? 'visible' : 'hidden');
        }
    };

    // Toggle grid on/off or set manually to wanted
    var grid = function (set) {
        var grid = svgElement.getElementsByClassName('gridline');

        // Set on/off
        if (set === true || set === false) {
            gridEnabled = set;
        }
        // Toggle, get state from first element
        else if (grid.length) {
            gridEnabled = grid[0].getAttribute('visibility') == 'hidden' ? true : false;
        }

        for (i = 0; i < grid.length; i++) {
            grid[i].setAttribute('visibility', gridEnabled ? 'visible' : 'hidden');
        }
    };

    // Show popover text or image
    var popover = function (content, set, evt) {

        // Hide popover
        if (set === false) {
            hidePopover();

            if (evt !== undefined) {
                evt.stopPropagation();
                evt.preventDefault();
            }

            return;
        }

        var position = null;

        // Change content only if changed
        if (popoverContainer.content != content) {

            // Set current text
            popoverContainer.content = content;

            popoverImage.content = '';
            popoverText.content = content;

            // If text starts with image: process it as an xlinked bitmap
            if (content.substring(0, 5) == 'image') {
                var lines = content.split(/\n|\\n/g);
                var nameindex = lines[0].indexOf(':');
                if (nameindex > 0) {
                    popoverImage.content = lines.shift();
                    popoverText.content = '';

                    // Additional text lines
                    if (lines !== undefined && lines.length > 0) {
                        popoverText.content = lines.join('\n');
                    }
                }
            }

            // Set image content
            if(popoverImage.content){
                setPopoverImage(popoverImage.content);
            }

            // Set text content
            if(popoverText.content){
                setPopoverText(popoverText.content);
            }
        }

        if(popoverImage.content || popoverText.content){
            position = convertDOMToSVG({'x': evt.clientX, 'y': evt.clientY });
        }

        // Show popover image on mouse position
        if(popoverImage.content){
            showPopoverImage(position);
        }

        // Show popover on mouse position
        if(popoverText.content){
            showPopoverText(position);
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Parse plot settings
    parseSettings();

    // viewBox initial position and size
    viewBoxResetValue = getViewBox();

    // Set focusable for event focusing, not work on old svg version
    svgElement.setAttribute('focusable', true);

    // Disable native draggable
    svgElement.setAttribute('draggable', false);

    // Add events
    addEvents();

    // Return functions to outside use
    return {
        zoom: function (direction) {
            setViewBox(zoom(direction));
            return this;
        },
        pan: function (direction) {
            setViewBox(pan(direction));
            return this;
        },
        reset: function () {
            setViewBox(viewBoxResetValue);
            return this;
        },
        key: function (id, set) {
            key(id, set);
            return this;
        },
        coordinate: function (set) {
            coordinate(set);
            return this;
        },
        grid: function (set) {
            grid(set);
            return this;
        }
    };
};

// Old init function, remove when svg inline events removed
gnuplot_svg.Init = function() { };
]]>
</script>

<!-- Tie mousing to entire bounding box of the plot -->
<rect x="0" y="0" width="960" height="480" fill="#ffffff" stroke="black" stroke-width="1"
onclick="gnuplot_svg.toggleCoordBox(evt)"  onmousemove="gnuplot_svg.moveCoordBox(evt)"/>

<!-- Also track mouse when it is on a plot element -->
<g id="gnuplot_canvas" onclick="gnuplot_svg.toggleCoordBox(evt)" onmousemove="gnuplot_svg.moveCoordBox(evt)">

<defs>

	<circle id='gpDot' r='0.5' stroke-width='0.5' stroke='currentColor'/>
	<path id='gpPt0' stroke-width='0.222' stroke='currentColor' d='M-1,0 h2 M0,-1 v2'/>
	<path id='gpPt1' stroke-width='0.222' stroke='currentColor' d='M-1,-1 L1,1 M1,-1 L-1,1'/>
	<path id='gpPt2' stroke-width='0.222' stroke='currentColor' d='M-1,0 L1,0 M0,-1 L0,1 M-1,-1 L1,1 M-1,1 L1,-1'/>
	<rect id='gpPt3' stroke-width='0.222' stroke='currentColor' x='-1' y='-1' width='2' height='2'/>
	<rect id='gpPt4' stroke-width='0.222' stroke='currentColor' fill='currentColor' x='-1' y='-1' width='2' height='2'/>
	<circle id='gpPt5' stroke-width='0.222' stroke='currentColor' cx='0' cy='0' r='1'/>
	<use xlink:href='#gpPt5' id='gpPt6' fill='currentColor' stroke='none'/>
	<path id='gpPt7' stroke-width='0.222' stroke='currentColor' d='M0,-1.33 L-1.33,0.67 L1.33,0.67 z'/>
	<use xlink:href='#gpPt7' id='gpPt8' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt7' id='gpPt9' stroke='currentColor' transform='rotate(180)'/>
	<use xlink:href='#gpPt9' id='gpPt10' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt3' id='gpPt11' stroke='currentColor' transform='rotate(45)'/>
	<use xlink:href='#gpPt11' id='gpPt12' fill='currentColor' stroke='none'/>
	<path id='gpPt13' stroke-width='0.222' stroke='currentColor' d='M0,1.330 L1.265,0.411 L0.782,-1.067 L-0.782,-1.076 L-1.265,0.411 z'/>
	<use xlink:href='#gpPt13' id='gpPt14' fill='currentColor' stroke='none'/>
	<filter id='textbox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='white' flood-opacity='1' result='bgnd'/>
	  <feComposite in='SourceGraphic' in2='bgnd' operator='atop'/>
	</filter>
	<filter id='greybox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='lightgrey' flood-opacity='1' result='grey'/>
	  <feComposite in='SourceGraphic' in2='grey' operator='atop'/>
	</filter>
</defs>
<g fill="none" color="white" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,422.40 L63.53,422.40 M774.19,422.40 L765.19,422.40  '/>	<g transform="translate(46.14,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.74</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,341.52 L63.53,341.52 M774.19,341.52 L765.19,341.52  '/>	<g transform="translate(46.14,345.42)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.76</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,260.64 L63.53,260.64 M774.19,260.64 L765.19,260.64  '/>	<g transform="translate(46.14,264.54)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.78</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,179.77 L63.53,179.77 M774.19,179.77 L765.19,179.77  '/>	<g transform="translate(46.14,183.67)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.80</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,98.89 L63.53,98.89 M774.19,98.89 L765.19,98.89  '/>	<g transform="translate(46.14,102.79)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.82</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,18.01 L63.53,18.01 M774.19,18.01 L765.19,18.01  '/>	<g transform="translate(46.14,21.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.84</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,422.40 L54.53,413.40 M54.53,18.01 L54.53,27.01  '/>	<g transform="translate(54.53,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M126.50,422.40 L126.50,413.40 M126.50,18.01 L126.50,27.01  '/>	<g transform="translate(126.50,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 1000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M198.46,422.40 L198.46,413.40 M198.46,18.01 L198.46,27.01  '/>	<g transform="translate(198.46,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 2000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M270.43,422.40 L270.43,413.40 M270.43,18.01 L270.43,27.01  '/>	<g transform="translate(270.43,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 3000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M342.39,422.40 L342.39,413.40 M342.39,18.01 L342.39,27.01  '/>	<g transform="translate(342.39,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 4000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M414.36,422.40 L414.36,413.40 M414.36,18.01 L414.36,27.01  '/>	<g transform="translate(414.36,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 5000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M486.33,422.40 L486.33,413.40 M486.33,18.01 L486.33,27.01  '/>	<g transform="translate(486.33,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 6000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M558.29,422.40 L558.29,413.40 M558.29,18.01 L558.29,27.01  '/>	<g transform="translate(558.29,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 7000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M630.26,422.40 L630.26,413.40 M630.26,18.01 L630.26,27.01  '/>	<g transform="translate(630.26,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 8000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M702.22,422.40 L702.22,413.40 M702.22,18.01 L702.22,27.01  '/>	<g transform="translate(702.22,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 9000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M774.19,422.40 L774.19,413.40 M774.19,18.01 L774.19,27.01  '/>	<g transform="translate(774.19,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 10000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,18.01 L54.53,422.40 L774.19,422.40 L774.19,18.01 L54.53,18.01 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(10.18,220.21) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(782.59,220.21) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,471.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >K</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,21.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
	<g id="gnuplot_plot_1" ><title>mean ± 1σ</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<g transform="translate(859.31,206.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >mean ± 1</tspan><tspan font-family="Arial" >σ</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(  0, 158, 115)'  d='M808.36,202.21 L850.92,202.21 M808.36,197.71 L808.36,206.71 M850.92,197.71 L850.92,206.71  '/>	</g>
	<path stroke='rgb(  0, 158, 115)'  d='M61.73,313.13 L61.73,139.03 M57.23,313.13 L66.23,313.13 M57.23,139.03 L66.23,139.03 M68.92,290.98 L68.92,178.57
		M64.42,290.98 L73.42,290.98 M64.42,178.57 L73.42,178.57 M76.12,288.97 L76.12,190.27 M71.62,288.97 L80.62,288.97
		M71.62,190.27 L80.62,190.27 M83.32,287.59 L83.32,195.83 M78.82,287.59 L87.82,287.59 M78.82,195.83 L87.82,195.83
		M90.51,278.77 L90.51,196.08 M86.01,278.77 L95.01,278.77 M86.01,196.08 L95.01,196.08 M97.71,279.38 L97.71,198.34
		M93.21,279.38 L102.21,279.38 M93.21,198.34 L102.21,198.34 M104.91,276.08 L104.91,203.89 M100.41,276.08 L109.41,276.08
		M100.41,203.89 L109.41,203.89 M112.10,277.23 L112.10,205.58 M107.60,277.23 L116.60,277.23 M107.60,205.58 L116.60,205.58
		M119.30,278.10 L119.30,208.25 M114.80,278.10 L123.80,278.10 M114.80,208.25 L123.80,208.25 M126.50,273.79 L126.50,210.13
		M122.00,273.79 L131.00,273.79 M122.00,210.13 L131.00,210.13 M133.69,273.25 L133.69,212.24 M129.19,273.25 L138.19,273.25
		M129.19,212.24 L138.19,212.24 M140.89,272.35 L140.89,212.54 M136.39,272.35 L145.39,272.35 M136.39,212.54 L145.39,212.54
		M148.09,271.44 L148.09,214.43 M143.59,271.44 L152.59,271.44 M143.59,214.43 L152.59,214.43 M155.28,268.26 L155.28,216.84
		M150.78,268.26 L159.78,268.26 M150.78,216.84 L159.78,216.84 M162.48,267.79 L162.48,217.36 M157.98,267.79 L166.98,267.79
		M157.98,217.36 L166.98,217.36 M169.68,266.98 L169.68,218.75 M165.18,266.98 L174.18,266.98 M165.18,218.75 L174.18,218.75
		M176.87,265.62 L176.87,219.54 M172.37,265.62 L181.37,265.62 M172.37,219.54 L181.37,219.54 M184.07,264.39 L184.07,220.09
		M179.57,264.39 L188.57,264.39 M179.57,220.09 L188.57,220.09 M191.27,263.00 L191.27,219.55 M186.77,263.00 L195.77,263.00
		M186.77,219.55 L195.77,219.55 M198.46,261.87 L198.46,219.80 M193.96,261.87 L202.96,261.87 M193.96,219.80 L202.96,219.80
		M205.66,261.32 L205.66,220.71 M201.16,261.32 L210.16,261.32 M201.16,220.71 L210.16,220.71 M212.86,261.56 L212.86,221.09
		M208.36,261.56 L217.36,261.56 M208.36,221.09 L217.36,221.09 M220.05,260.61 L220.05,221.08 M215.55,260.61 L224.55,260.61
		M215.55,221.08 L224.55,221.08 M227.25,260.14 L227.25,221.75 M222.75,260.14 L231.75,260.14 M222.75,221.75 L231.75,221.75
		M234.45,259.30 L234.45,221.04 M229.95,259.30 L238.95,259.30 M229.95,221.04 L238.95,221.04 M241.64,259.13 L241.64,221.69
		M237.14,259.13 L246.14,259.13 M237.14,221.69 L246.14,221.69 M248.84,258.52 L248.84,223.00 M244.34,258.52 L253.34,258.52
		M244.34,223.00 L253.34,223.00 M256.03,257.75 L256.03,223.77 M251.53,257.75 L260.53,257.75 M251.53,223.77 L260.53,223.77
		M263.23,258.19 L263.23,224.08 M258.73,258.19 L267.73,258.19 M258.73,224.08 L267.73,224.08 M270.43,257.43 L270.43,223.65
		M265.93,257.43 L274.93,257.43 M265.93,223.65 L274.93,223.65 M277.62,257.67 L277.62,224.06 M273.12,257.67 L282.12,257.67
		M273.12,224.06 L282.12,224.06 M284.82,257.45 L284.82,223.96 M280.32,257.45 L289.32,257.45 M280.32,223.96 L289.32,223.96
		M292.02,257.30 L292.02,223.53 M287.52,257.30 L296.52,257.30 M287.52,223.53 L296.52,223.53 M299.21,257.16 L299.21,223.61
		M294.71,257.16 L303.71,257.16 M294.71,223.61 L303.71,223.61 M306.41,256.51 L306.41,223.99 M301.91,256.51 L310.91,256.51
		M301.91,223.99 L310.91,223.99 M313.61,255.76 L313.61,224.12 M309.11,255.76 L318.11,255.76 M309.11,224.12 L318.11,224.12
		M320.80,255.86 L320.80,224.12 M316.30,255.86 L325.30,255.86 M316.30,224.12 L325.30,224.12 M328.00,256.19 L328.00,224.09
		M323.50,256.19 L332.50,256.19 M323.50,224.09 L332.50,224.09 M335.20,256.06 L335.20,224.53 M330.70,256.06 L339.70,256.06
		M330.70,224.53 L339.70,224.53 M342.39,255.52 L342.39,224.39 M337.89,255.52 L346.89,255.52 M337.89,224.39 L346.89,224.39
		M349.59,255.50 L349.59,224.93 M345.09,255.50 L354.09,255.50 M345.09,224.93 L354.09,224.93 M356.79,255.37 L356.79,225.97
		M352.29,255.37 L361.29,255.37 M352.29,225.97 L361.29,225.97 M363.98,255.60 L363.98,225.93 M359.48,255.60 L368.48,255.60
		M359.48,225.93 L368.48,225.93 M371.18,255.53 L371.18,226.75 M366.68,255.53 L375.68,255.53 M366.68,226.75 L375.68,226.75
		M378.38,255.26 L378.38,226.88 M373.88,255.26 L382.88,255.26 M373.88,226.88 L382.88,226.88 M385.57,254.96 L385.57,226.86
		M381.07,254.96 L390.07,254.96 M381.07,226.86 L390.07,226.86 M392.77,255.01 L392.77,227.28 M388.27,255.01 L397.27,255.01
		M388.27,227.28 L397.27,227.28 M399.97,254.79 L399.97,227.12 M395.47,254.79 L404.47,254.79 M395.47,227.12 L404.47,227.12
		M407.16,254.61 L407.16,227.03 M402.66,254.61 L411.66,254.61 M402.66,227.03 L411.66,227.03 M414.36,254.45 L414.36,227.10
		M409.86,254.45 L418.86,254.45 M409.86,227.10 L418.86,227.10 M421.56,254.34 L421.56,226.65 M417.06,254.34 L426.06,254.34
		M417.06,226.65 L426.06,226.65 M428.75,254.45 L428.75,226.86 M424.25,254.45 L433.25,254.45 M424.25,226.86 L433.25,226.86
		M435.95,254.38 L435.95,227.15 M431.45,254.38 L440.45,254.38 M431.45,227.15 L440.45,227.15 M443.15,254.40 L443.15,227.16
		M438.65,254.40 L447.65,254.40 M438.65,227.16 L447.65,227.16 M450.34,254.16 L450.34,226.86 M445.84,254.16 L454.84,254.16
		M445.84,226.86 L454.84,226.86 M457.54,254.28 L457.54,226.85 M453.04,254.28 L462.04,254.28 M453.04,226.85 L462.04,226.85
		M464.74,254.01 L464.74,227.04 M460.24,254.01 L469.24,254.01 M460.24,227.04 L469.24,227.04 M471.93,253.88 L471.93,227.18
		M467.43,253.88 L476.43,253.88 M467.43,227.18 L476.43,227.18 M479.13,253.55 L479.13,227.40 M474.63,253.55 L483.63,253.55
		M474.63,227.40 L483.63,227.40 M486.33,253.17 L486.33,227.68 M481.83,253.17 L490.83,253.17 M481.83,227.68 L490.83,227.68
		M493.52,253.28 L493.52,227.98 M489.02,253.28 L498.02,253.28 M489.02,227.98 L498.02,227.98 M500.72,253.30 L500.72,227.77
		M496.22,253.30 L505.22,253.30 M496.22,227.77 L505.22,227.77 M507.92,252.89 L507.92,227.81 M503.42,252.89 L512.42,252.89
		M503.42,227.81 L512.42,227.81 M515.11,252.73 L515.11,228.22 M510.61,252.73 L519.61,252.73 M510.61,228.22 L519.61,228.22
		M522.31,252.60 L522.31,228.16 M517.81,252.60 L526.81,252.60 M517.81,228.16 L526.81,228.16 M529.51,252.42 L529.51,227.82
		M525.01,252.42 L534.01,252.42 M525.01,227.82 L534.01,227.82 M536.70,252.21 L536.70,227.63 M532.20,252.21 L541.20,252.21
		M532.20,227.63 L541.20,227.63 M543.90,251.96 L543.90,227.95 M539.40,251.96 L548.40,251.96 M539.40,227.95 L548.40,227.95
		M551.10,252.02 L551.10,228.03 M546.60,252.02 L555.60,252.02 M546.60,228.03 L555.60,228.03 M558.29,252.19 L558.29,228.04
		M553.79,252.19 L562.79,252.19 M553.79,228.04 L562.79,228.04 M565.49,252.22 L565.49,227.99 M560.99,252.22 L569.99,252.22
		M560.99,227.99 L569.99,227.99 M572.69,252.11 L572.69,228.05 M568.19,252.11 L577.19,252.11 M568.19,228.05 L577.19,228.05
		M579.88,251.93 L579.88,228.15 M575.38,251.93 L584.38,251.93 M575.38,228.15 L584.38,228.15 M587.08,251.74 L587.08,228.46
		M582.58,251.74 L591.58,251.74 M582.58,228.46 L591.58,228.46 M594.28,251.58 L594.28,228.66 M589.78,251.58 L598.78,251.58
		M589.78,228.66 L598.78,228.66 M601.47,251.63 L601.47,228.61 M596.97,251.63 L605.97,251.63 M596.97,228.61 L605.97,228.61
		M608.67,251.56 L608.67,228.67 M604.17,251.56 L613.17,251.56 M604.17,228.67 L613.17,228.67 M615.86,251.48 L615.86,228.70
		M611.36,251.48 L620.36,251.48 M611.36,228.70 L620.36,228.70 M623.06,251.24 L623.06,228.98 M618.56,251.24 L627.56,251.24
		M618.56,228.98 L627.56,228.98 M630.26,251.07 L630.26,228.95 M625.76,251.07 L634.76,251.07 M625.76,228.95 L634.76,228.95
		M637.45,250.81 L637.45,228.88 M632.95,250.81 L641.95,250.81 M632.95,228.88 L641.95,228.88 M644.65,250.67 L644.65,228.69
		M640.15,250.67 L649.15,250.67 M640.15,228.69 L649.15,228.69 M651.85,250.32 L651.85,228.79 M647.35,250.32 L656.35,250.32
		M647.35,228.79 L656.35,228.79 M659.04,249.83 L659.04,228.85 M654.54,249.83 L663.54,249.83 M654.54,228.85 L663.54,228.85
		M666.24,249.80 L666.24,228.91 M661.74,249.80 L670.74,249.80 M661.74,228.91 L670.74,228.91 M673.44,249.70 L673.44,229.19
		M668.94,249.70 L677.94,249.70  '/>	<path stroke='rgb(  0, 158, 115)'  d='M668.94,229.19 L677.94,229.19 M680.63,249.48 L680.63,229.40 M676.13,249.48 L685.13,249.48 M676.13,229.40 L685.13,229.40
		M687.83,249.60 L687.83,229.52 M683.33,249.60 L692.33,249.60 M683.33,229.52 L692.33,229.52 M695.03,249.35 L695.03,229.66
		M690.53,249.35 L699.53,249.35 M690.53,229.66 L699.53,229.66 M702.22,249.44 L702.22,229.70 M697.72,249.44 L706.72,249.44
		M697.72,229.70 L706.72,229.70 M709.42,249.42 L709.42,229.78 M704.92,249.42 L713.92,249.42 M704.92,229.78 L713.92,229.78
		M716.62,249.23 L716.62,229.62 M712.12,249.23 L721.12,249.23 M712.12,229.62 L721.12,229.62 M723.81,249.05 L723.81,229.65
		M719.31,249.05 L728.31,249.05 M719.31,229.65 L728.31,229.65 M731.01,248.80 L731.01,229.66 M726.51,248.80 L735.51,248.80
		M726.51,229.66 L735.51,229.66 M738.21,248.98 L738.21,229.58 M733.71,248.98 L742.71,248.98 M733.71,229.58 L742.71,229.58
		M745.40,248.74 L745.40,229.60 M740.90,248.74 L749.90,248.74 M740.90,229.60 L749.90,229.60 M752.60,248.81 L752.60,229.84
		M748.10,248.81 L757.10,248.81 M748.10,229.84 L757.10,229.84 M759.80,248.76 L759.80,229.82 M755.30,248.76 L764.30,248.76
		M755.30,229.82 L764.30,229.82 M766.99,248.58 L766.99,230.05 M762.49,248.58 L771.49,248.58 M762.49,230.05 L771.49,230.05
		M774.19,248.55 L774.19,230.03 M769.69,248.55 L774.19,248.55 M769.69,230.03 L774.19,230.03  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<use xlink:href='#gpPt0' transform='translate(61.73,226.08) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(68.92,234.77) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(76.12,239.62) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(83.32,241.71) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(90.51,237.42) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(97.71,238.86) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(104.91,239.98) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(112.10,241.41) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(119.30,243.17) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(126.50,241.96) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(133.69,242.74) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(140.89,242.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(148.09,242.93) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(155.28,242.55) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(162.48,242.57) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(169.68,242.87) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(176.87,242.58) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(184.07,242.24) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(191.27,241.28) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(198.46,240.83) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(205.66,241.01) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(212.86,241.33) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(220.05,240.85) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(227.25,240.94) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(234.45,240.17) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(241.64,240.41) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(248.84,240.76) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(256.03,240.76) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(263.23,241.13) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(270.43,240.54) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(277.62,240.87) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(284.82,240.71) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(292.02,240.42) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(299.21,240.39) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(306.41,240.25) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(313.61,239.94) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(320.80,239.99) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(328.00,240.14) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(335.20,240.29) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(342.39,239.96) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(349.59,240.21) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(356.79,240.67) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(363.98,240.77) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(371.18,241.14) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(378.38,241.07) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(385.57,240.91) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(392.77,241.15) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(399.97,240.95) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(407.16,240.82) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(414.36,240.78) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(421.56,240.50) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(428.75,240.65) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(435.95,240.77) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(443.15,240.78) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(450.34,240.51) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(457.54,240.57) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(464.74,240.53) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(471.93,240.53) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(479.13,240.48) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(486.33,240.42) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(493.52,240.63) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(500.72,240.53) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(507.92,240.35) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(515.11,240.48) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(522.31,240.38) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(529.51,240.12) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(536.70,239.92) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(543.90,239.95) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(551.10,240.02) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(558.29,240.12) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(565.49,240.10) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(572.69,240.08) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(579.88,240.04) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(587.08,240.10) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(594.28,240.12) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(601.47,240.12) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(608.67,240.12) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(615.86,240.09) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(623.06,240.11) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(630.26,240.01) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(637.45,239.85) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(644.65,239.68) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(651.85,239.56) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(659.04,239.34) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(666.24,239.35) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(673.44,239.44) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(680.63,239.44) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(687.83,239.56) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(695.03,239.50) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(702.22,239.57) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(709.42,239.60) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(716.62,239.42) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(723.81,239.35) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(731.01,239.23) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(738.21,239.28) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(745.40,239.17) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(752.60,239.32) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(759.80,239.29) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(766.99,239.31) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(774.19,239.29) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<use xlink:href='#gpPt0' transform='translate(829.64,202.21) scale(4.50)' color='rgb(  0, 158, 115)'/>
	</g>
</g>
	</g>
	<g id="gnuplot_plot_2" ><title>maxval</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_2_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_2')">
	<g transform="translate(859.31,224.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >maxval</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(148,   0, 211)'  d='M808.36,220.21 L850.92,220.21  '/>	</g>
	<path stroke='rgb(148,   0, 211)'  d='M61.73,36.40 L68.92,93.93 L76.12,146.74 L83.32,126.04 L90.51,148.94 L97.71,132.09 L104.91,146.99 L112.10,147.60
		L119.30,159.65 L126.50,160.19 L133.69,175.32 L140.89,172.47 L148.09,180.58 L155.28,183.78 L162.48,193.37 L169.68,195.70
		L176.87,196.31 L184.07,198.03 L191.27,191.96 L198.46,192.76 L205.66,201.34 L212.86,199.81 L220.05,195.71 L227.25,200.16
		L234.45,199.38 L241.64,201.08 L248.84,201.43 L256.03,200.44 L263.23,201.60 L270.43,203.57 L277.62,199.85 L284.82,200.92
		L292.02,201.74 L299.21,200.61 L306.41,199.69 L313.61,200.32 L320.80,200.20 L328.00,200.40 L335.20,199.88 L342.39,198.28
		L349.59,196.56 L356.79,198.26 L363.98,198.24 L371.18,198.72 L378.38,203.72 L385.57,202.53 L392.77,203.02 L399.97,205.29
		L407.16,205.71 L414.36,206.60 L421.56,207.25 L428.75,208.84 L435.95,209.61 L443.15,210.56 L450.34,210.15 L457.54,209.36
		L464.74,209.06 L471.93,213.05 L479.13,214.16 L486.33,212.85 L493.52,212.96 L500.72,210.27 L507.92,210.67 L515.11,210.37
		L522.31,212.65 L529.51,212.89 L536.70,211.87 L543.90,212.56 L551.10,214.93 L558.29,215.46 L565.49,215.16 L572.69,212.63
		L579.88,211.90 L587.08,212.50 L594.28,215.48 L601.47,215.07 L608.67,214.66 L615.86,214.15 L623.06,214.69 L630.26,215.33
		L637.45,215.04 L644.65,215.72 L651.85,216.79 L659.04,216.65 L666.24,217.30 L673.44,217.59 L680.63,217.48 L687.83,217.52
		L695.03,218.29 L702.22,219.02 L709.42,219.35 L716.62,218.08 L723.81,217.60 L731.01,216.99 L738.21,216.12 L745.40,214.98
		L752.60,215.30 L759.80,217.35 L766.99,219.04 L774.19,219.01  '/></g>
	</g>
	<g id="gnuplot_plot_3" ><title>minval</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_3_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_3')">
	<g transform="translate(859.31,242.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >minval</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb( 86, 180, 233)'  d='M808.36,238.21 L850.92,238.21  '/>	</g>
	<path stroke='rgb( 86, 180, 233)'  d='M61.73,413.80 L68.92,399.23 L76.12,392.42 L83.32,343.77 L90.51,322.59 L97.71,317.73 L104.91,317.11 L112.10,329.09
		L119.30,323.64 L126.50,310.06 L133.69,314.45 L140.89,312.53 L148.09,304.43 L155.28,304.77 L162.48,303.30 L169.68,294.20
		L176.87,295.47 L184.07,292.57 L191.27,290.68 L198.46,290.97 L205.66,287.39 L212.86,283.26 L220.05,283.09 L227.25,279.25
		L234.45,280.37 L241.64,278.09 L248.84,276.01 L256.03,274.04 L263.23,278.16 L270.43,278.45 L277.62,277.87 L284.82,278.83
		L292.02,281.72 L299.21,280.32 L306.41,282.27 L313.61,276.87 L320.80,280.48 L328.00,278.74 L335.20,275.73 L342.39,276.34
		L349.59,274.80 L356.79,275.89 L363.98,276.02 L371.18,276.41 L378.38,278.15 L385.57,277.31 L392.77,274.88 L399.97,275.75
		L407.16,277.11 L414.36,275.80 L421.56,276.21 L428.75,276.13 L435.95,275.67 L443.15,277.79 L450.34,276.83 L457.54,274.78
		L464.74,272.80 L471.93,271.99 L479.13,271.29 L486.33,270.52 L493.52,269.90 L500.72,267.97 L507.92,267.13 L515.11,266.71
		L522.31,267.10 L529.51,266.57 L536.70,266.18 L543.90,265.89 L551.10,267.03 L558.29,267.97 L565.49,267.85 L572.69,267.82
		L579.88,266.69 L587.08,266.59 L594.28,267.59 L601.47,267.42 L608.67,267.51 L615.86,266.96 L623.06,266.43 L630.26,264.83
		L637.45,265.03 L644.65,264.43 L651.85,264.10 L659.04,262.14 L666.24,263.54 L673.44,264.63 L680.63,264.16 L687.83,263.74
		L695.03,262.99 L702.22,262.13 L709.42,262.19 L716.62,261.59 L723.81,260.95 L731.01,260.46 L738.21,262.19 L745.40,261.80
		L752.60,261.79 L759.80,262.07 L766.99,261.69 L774.19,261.77  '/></g>
	</g>
<g fill="none" color="white" stroke="rgb( 86, 180, 233)" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="black" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,18.01 L54.53,422.40 L774.19,422.40 L774.19,18.01 L54.53,18.01 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,21.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>

<script type="text/javascript"><![CDATA[
// plot boundaries and axis scaling information for mousing 
gnuplot_svg.plot_term_xmax = 960;
gnuplot_svg.plot_term_ymax = 480;
gnuplot_svg.plot_xmin = 54.5;
gnuplot_svg.plot_xmax = 774.2;
gnuplot_svg.plot_ybot = 422.4;
gnuplot_svg.plot_ytop = 18.0;
gnuplot_svg.plot_width = 719.7;
gnuplot_svg.plot_height = 404.4;
gnuplot_svg.plot_axis_xmin = 0;
gnuplot_svg.plot_axis_xmax = 10000;
gnuplot_svg.plot_axis_ymin = 0.74;
gnuplot_svg.plot_axis_ymax = 0.84;
gnuplot_svg.polar_mode = false;
gnuplot_svg.plot_axis_x2min = "none";
gnuplot_svg.plot_axis_y2min = "none";
gnuplot_svg.plot_logaxis_x = 0;
gnuplot_svg.plot_logaxis_y = 0;
gnuplot_svg.plot_timeaxis_x = "";
gnuplot_svg.plot_timeaxis_y = "";
gnuplot_svg.hypertext_fontSize = 0;
gnuplot_svg.hypertext_fontName = null;
gnuplot_svg.hypertext_fontStyle = null;
gnuplot_svg.hypertext_fontWeight = null;
]]>
</script>
</g>

  <text id="coord_text" text-anchor="start" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <rect id="hypertextbox" class="hypertextbox" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="16" visibility="hidden" />

  <text id="hypertext" class="hypertext" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <image id="hyperimage" class="hyperimage" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="200" width="300" visibility="hidden" />
</svg>

