<?xml version="1.0" encoding="utf-8"  standalone="no"?>
<svg  onload="if (typeof(gnuplot_svg)!='undefined') gnuplot_svg.Init(evt)" 
 width="960" height="480"
 viewBox="0 0 960 480"
 xmlns="http://www.w3.org/2000/svg"
 xmlns:xlink="http://www.w3.org/1999/xlink"
>

<title>Gnuplot</title>
<desc>Produced by GNUPLOT 5.4 patchlevel 2 </desc>

<script type="text/javascript" > <![CDATA[
// From:	Marko Karjalainen <markokarjalainen@kolumbus.fi>
// Date:	27 Aug 2018
// Experimental gnuplot plugin for svg
//
// All svg elements on page get own gnuplot plugin attached by js, so no conflict with global variables.
//
// Javascript variables are read from second script tag and converted to json for import to plugin.
// Inline events are removed from xml and new ones are attached with addEventListener function.
// Inline events should be removed from xml and xml should have better id/class names to attach events from js.
//
// Improved mouseover text and image handling
//   content changed to xml only if it really changed and bouncing is calculated once.
//
// Convert functions are same as before, maybe renamed better.
//
// Javascript routines for mouse and keyboard interaction with
// SVG documents produced by gnuplot SVG terminal driver.

// TODO do not create inline events to svg and give id or classes for getting elements
// TODO make own svg layer x/y range sized for coordinates?

if (window) {
    window.addEventListener('load', function () {
        // Find svg elements
        var svg = document.querySelectorAll('svg');
        for (var i = 0; i < svg.length; i++) {
            // Init plugin
            if (!svg[i].gnuplot) {
                // Check if gnuplot generated svg
                if(svg[i].getElementById('gnuplot_canvas')){
                    svg[i].gnuplot = new gnuplot_svg(svg[i]);
                }
            }
        }
    });
}

gnuplot_svg = function (svgElement) {

    var version = '09 April 2019';

    var settings = {};

    var viewBoxResetValue = [];

    var drag = {
        'enabled': false,
        'offset': { 'x': 0, 'y': 0 },
        'change': svgElement.createSVGPoint(),
        'timeout': null
    };

    var coordinateText = {
        'enabled': false,
        'element': svgElement.getElementById('coord_text')
    };

    var popoverContainer = {
        'element': null,
        'content': null,
    };

    var popoverImage = {
        'element': null,
        'content': null,
        'width': 300,
        'height': 200,
        'defaultWidth': 300,
        'defaultHeight': 200,
    };

    var popoverText = {
        'element': null,
        'content': null,
        'width': 11,
        'height': 16,
        'defaultWidth': 11,
        'defaultHeight': 16,
    };

    var point = svgElement.createSVGPoint();

    var axisDate = new Date();

    var gridEnabled = false;

    // Get plot boundaries and axis scaling information for mousing from current object script tag
    // TODO add these to svg xml custom attribute for reading(json format)
    var parseSettings = function () {
        var script = svgElement.querySelectorAll('script');
        if (script && script[1]) {
            var scriptText = script[1].firstChild.nodeValue;
            // Remove inline comments
            scriptText = scriptText.replace(/^\s*\/\/.*\n/g, '');
            // Change prefix to "
            scriptText = scriptText.replace(/gnuplot_svg\./g, '"');
            // Change = to " :
            scriptText = scriptText.replace(/ = /g, '" : ');
            // Change line endings to comma
            scriptText = scriptText.replace(/;\n|\n/g, ',');
            // Remove last comma
            scriptText = scriptText.replace(/,+$/, '');
            // Parse as json string
            settings = JSON.parse("{\n" + scriptText + "\n}");
        }
    };

    // Add interactive events
    var addEvents = function () {
        var i;

        // Get keyentry elements
        var toggleVisibility = svgElement.querySelectorAll('g[id$="_keyentry"]');
        for (i = 0; i < toggleVisibility.length; i++) {
            // ------- Remove inline events
            toggleVisibility[i].removeAttribute('onclick');
            // -------

            // Add keyentry event to toggle visibility
            toggleVisibility[i].addEventListener('click', key.bind(null, toggleVisibility[i].getAttribute('id'), null));
        }

        // ------- Remove inline events from bounding box
        var boundingBox = svgElement.querySelector('rect[onclick^="gnuplot_svg.toggleCoordBox"]');
        if (boundingBox) {
            boundingBox.removeAttribute('onclick');
            boundingBox.removeAttribute('onmousemove');
        }
        // ------- Remove inline events from canvas
        var canvas = svgElement.getElementById('gnuplot_canvas');
        if (canvas) {
            canvas.removeAttribute('onclick');
            canvas.removeAttribute('onmousemove');
        }
        // -------

        // Get grid image
        var toggleGrid = svgElement.querySelector('image[onclick^="gnuplot_svg.toggleGrid"]');
        if (toggleGrid) {
            // ------- Remove inline events
            toggleGrid.removeAttribute('onclick');
            // -------

            // Add Toggle grid image event
            toggleGrid.addEventListener('click', function (evt) {
                grid();
                evt.preventDefault();
                evt.stopPropagation();
            });
        }

        // Get hypertexts
        var hyperText = svgElement.querySelectorAll('g[onmousemove^="gnuplot_svg.showHypertext"]');

        // Set view element variables
        if (hyperText.length) {
            popoverContainer.element = svgElement.getElementById('hypertextbox');
            popoverText.element = svgElement.getElementById('hypertext');
            popoverImage.element = svgElement.getElementById('hyperimage');
            popoverImage.defaultWidth = popoverImage.element.getAttribute('width');
            popoverImage.defaultHeight = popoverImage.element.getAttribute('height');
        }

        for (i = 0; i < hyperText.length; i++) {
            // Get text from attr uggly way, svg has empty title element
            var text = hyperText[i].getAttribute('onmousemove').substr(31).slice(0, -2);

            // ------- Remove inline events
            hyperText[i].removeAttribute('onmousemove');
            hyperText[i].removeAttribute('onmouseout');
            // -------

            // Add event
            hyperText[i].addEventListener('mousemove', popover.bind(null, text, true));
            hyperText[i].addEventListener('mouseout', popover.bind(null, null, false));
        }

        // Toggle coordinates visibility on left click on boundingBox element
        svgElement.addEventListener('click', function (evt) {
            if (!drag.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                coordinate();
                setCoordinateLabel(evt);
            }
        });

        // Save move start position, enable drag after delay
        svgElement.addEventListener('mousedown', function (evt) {

            drag.offset = { 'x': evt.clientX, 'y': evt.clientY };

            // Delay for moving, so not move accidentally if only click
            drag.timeout = setTimeout(function () {
                drag.enabled = true;
            }, 250);

            // Cancel draggable
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Disable drag
        svgElement.addEventListener('mouseup', function (evt) {
            drag.enabled = false;
            clearTimeout(drag.timeout);
        });

        // Mouse move
        svgElement.addEventListener('mousemove', function (evt) {

            // Drag svg element
            if (evt.buttons == 1 && drag.enabled) {

                // Position change
                drag.change.x = evt.clientX - drag.offset.x;
                drag.change.y = evt.clientY - drag.offset.y;

                // Set current mouse position
                drag.offset.x = evt.clientX;
                drag.offset.y = evt.clientY;

                // Convert to svg position
                drag.change.matrixTransform(svgElement.getScreenCTM().inverse());

                var viewBoxValues = getViewBox();

                viewBoxValues[0] -= drag.change.x;
                viewBoxValues[1] -= drag.change.y;

                setViewBox(viewBoxValues);
            }

            // View coordinates on mousemove over svg element
            if (coordinateText.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                setCoordinateLabel(evt);
            }

        });

        // Zoom with wheel
        svgElement.addEventListener('wheel', function (evt) {
            // x or y scroll zoom both axels
            var delta = Math.max(-1, Math.min(1, (evt.deltaY || evt.deltaX)));

            if (delta > 0) {
                setViewBox(zoom('in'));
            }
            else {
                setViewBox(zoom('out'));
            }

            // Disable scroll the entire webpage
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Reset on right click or hold tap
        svgElement.addEventListener('contextmenu', function (evt) {

            setViewBox(viewBoxResetValue);

            // Disable native context menu
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Keyboard actions, old svg version not support key events so must listen window
        window.addEventListener('keydown', function (evt) {

            // Not capture event from inputs
            // body = svg inline in page, svg = plain svg file, window = delegated events to object
            if (evt.target.nodeName != 'BODY' && evt.target.nodeName != 'svg' && evt.target != window) {
                return true;
            }

            var viewBoxValues = [];

            switch (evt.key) {
                // Move, Edge sends without Arrow word
                case 'ArrowLeft':
                case 'Left':
                case 'ArrowRight':
                case 'Right':
                case 'ArrowUp':
                case 'Up':
                case 'ArrowDown':
                case 'Down':
                    viewBoxValues = pan(evt.key.replace('Arrow', '').toLowerCase());
                    break;
                // Zoom in
                case '+':
                case 'Add':
                    viewBoxValues = zoom('in');
                    break;
                // Zoom out
                case '-':
                case 'Subtract':
                    viewBoxValues = zoom('out');
                    break;
                // Reset
                case 'Home':
                    viewBoxValues = viewBoxResetValue;
                    break;
                // Toggle grid
                case '#':
                    grid();
                    break;
            }

            if (viewBoxValues.length) {
                setViewBox(viewBoxValues);
            }
        });
    };

    // Get svg viewbox details
    var getViewBox = function () {
        var viewBoxValues = svgElement.getAttribute('viewBox').split(' ');
        viewBoxValues[0] = parseFloat(viewBoxValues[0]);
        viewBoxValues[1] = parseFloat(viewBoxValues[1]);
        viewBoxValues[2] = parseFloat(viewBoxValues[2]);
        viewBoxValues[3] = parseFloat(viewBoxValues[3]);
        return viewBoxValues;
    };

    // Set svg viewbox details
    var setViewBox = function (viewBoxValues) {
        svgElement.setAttribute('viewBox', viewBoxValues.join(' '));
    };

    // Set coordinate label position and text
    var setCoordinateLabel = function (evt) {
        var position = convertDOMToSVG({ 'x': evt.clientX, 'y': evt.clientY });

        // Set coordinate label position
        coordinateText.element.setAttribute('x', position.x);
        coordinateText.element.setAttribute('y', position.y);

        // Convert svg position to plot coordinates
        var plotcoord = convertSVGToPlot(position);

        // Parse label to view
        var label = parseCoordinateLabel(plotcoord);

        // Set coordinate label text
        coordinateText.element.textContent = label.x + ' ' + label.y;
    };

    // Convert position DOM to SVG
    var convertDOMToSVG = function (position) {
        point.x = position.x;
        point.y = position.y;
        return point.matrixTransform(svgElement.getScreenCTM().inverse());
    };

    // Convert position SVG to Plot
    var convertSVGToPlot = function (position) {
        var plotcoord = {};
        var plotx = position.x - settings.plot_xmin;
        var ploty = position.y - settings.plot_ybot;
        var x, y;

        if (settings.plot_logaxis_x !== 0) {
            x = Math.log(settings.plot_axis_xmax)
                - Math.log(settings.plot_axis_xmin);
            x = x * (plotx / (settings.plot_xmax - settings.plot_xmin))
                + Math.log(settings.plot_axis_xmin);
            x = Math.exp(x);
        } else {
            x = settings.plot_axis_xmin + (plotx / (settings.plot_xmax - settings.plot_xmin)) * (settings.plot_axis_xmax - settings.plot_axis_xmin);
        }

        if (settings.plot_logaxis_y !== 0) {
            y = Math.log(settings.plot_axis_ymax)
                - Math.log(settings.plot_axis_ymin);
            y = y * (ploty / (settings.plot_ytop - settings.plot_ybot))
                + Math.log(settings.plot_axis_ymin);
            y = Math.exp(y);
        } else {
            y = settings.plot_axis_ymin + (ploty / (settings.plot_ytop - settings.plot_ybot)) * (settings.plot_axis_ymax - settings.plot_axis_ymin);
        }

        plotcoord.x = x;
        plotcoord.y = y;
        return plotcoord;
    };

    // Parse plot x/y values to label
    var parseCoordinateLabel = function (plotcoord) {
        var label = { 'x': 0, 'y': 0 };

        if (settings.plot_timeaxis_x == 'DMS' || settings.plot_timeaxis_y == 'DMS') {
            if (settings.plot_timeaxis_x == 'DMS') {
                label.x = convertToDMS(plotcoord.x);
            }
            else {
                label.x = plotcoord.x.toFixed(2);
            }

            if (settings.plot_timeaxis_y == 'DMS') {
                label.y = convertToDMS(plotcoord.y);
            }
            else {
                label.y = plotcoord.y.toFixed(2);
            }

        } else if (settings.polar_mode) {
            polar = convertToPolar(plotcoord.x, plotcoord.y);
            label.x = 'ang= ' + polar.ang.toPrecision(4);
            label.y = 'R= ' + polar.r.toPrecision(4);

        } else if (settings.plot_timeaxis_x == 'Date') {
            axisDate.setTime(1000 * plotcoord.x);
            var year = axisDate.getUTCFullYear();
            var month = axisDate.getUTCMonth();
            var date = axisDate.getUTCDate();
            label.x = (' ' + date).slice(-2) + '/' + ('0' + (month + 1)).slice(-2) + '/' + year;
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'Time') {
            axisDate.setTime(1000 * plotcoord.x);
            var hour = axisDate.getUTCHours();
            var minute = axisDate.getUTCMinutes();
            var second = axisDate.getUTCSeconds();
            label.x = ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2) + ':' + ('0' + second).slice(-2);
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'DateTime') {
            axisDate.setTime(1000 * plotcoord.x);
            label.x = axisDate.toUTCString();
            label.y = plotcoord.y.toFixed(2);
        } else {
            label.x = plotcoord.x.toFixed(2);
            label.y = plotcoord.y.toFixed(2);
        }

        return label;
    };

    // Convert position to Polar
    var convertToPolar = function (x, y) {
        polar = {};
        var phi, r;
        phi = Math.atan2(y, x);
        if (settings.plot_logaxis_r) {
            r = Math.exp((x / Math.cos(phi) + Math.log(settings.plot_axis_rmin) / Math.LN10) * Math.LN10);
        }
        else if (settings.plot_axis_rmin > settings.plot_axis_rmax) {
            r = settings.plot_axis_rmin - x / Math.cos(phi);
        } else {
            r = settings.plot_axis_rmin + x / Math.cos(phi);
        }
        phi = phi * (180 / Math.PI);
        if (settings.polar_sense < 0) {
            phi = -phi;
        }
        if (settings.polar_theta0 !== undefined) {
            phi = phi + settings.polar_theta0;
        }
        if (phi > 180) { phi = phi - 360; }
        polar.r = r;
        polar.ang = phi;
        return polar;
    };

    // Convert position to DMS
    var convertToDMS = function (x) {
        var dms = { d: 0, m: 0, s: 0 };
        var deg = Math.abs(x);
        dms.d = Math.floor(deg);
        dms.m = Math.floor((deg - dms.d) * 60);
        dms.s = Math.floor((deg - dms.d) * 3600 - dms.m * 60);
        fmt = ((x < 0) ? '-' : ' ') + dms.d.toFixed(0) + '°' + dms.m.toFixed(0) + '"' + dms.s.toFixed(0) + "'";
        return fmt;
    };

    // Set popover text to show
    var setPopoverText = function (content) {

        // Minimum length
        popoverText.width = popoverText.defaultWidth;

        // Remove old texts
        while (null !== popoverText.element.firstChild) {
            popoverText.element.removeChild(popoverText.element.firstChild);
        }

        var lines = content.split(/\n|\\n/g);

        // Single line
        if (lines.length <= 1) {
            popoverText.element.textContent = content;
            popoverText.width = popoverText.element.getComputedTextLength() + 8;
        }
        // Multiple lines
        else {
            var lineWidth = 0;
            var tspanElement;

            for (var l = 0; l < lines.length; l++) {
                tspanElement = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
                // Y relative position
                if (l > 0) {
                    tspanElement.setAttribute('dy', popoverText.defaultHeight);
                }
                // Append text
                tspanElement.appendChild(document.createTextNode(lines[l]));
                popoverText.element.appendChild(tspanElement);

                // Max line width
                lineWidth = tspanElement.getComputedTextLength() + 8;
                if (popoverText.width < lineWidth) {
                    popoverText.width = lineWidth;
                }
            }
        }

        // Box Height
        popoverText.height = 2 + popoverText.defaultHeight * lines.length;
        popoverContainer.element.setAttribute('height', popoverText.height);

        // Box Width
        popoverContainer.element.setAttribute('width', popoverText.width);
    };

    // Set popover image to show
    var setPopoverImage = function (content) {

        // Set default image size
        popoverImage.width = popoverImage.defaultWidth;
        popoverImage.height = popoverImage.defaultHeight;

        // Pick up height and width from image(width,height):name
        if (content.charAt(5) == '(') {
            popoverImage.width = parseInt(content.slice(6));
            popoverImage.height = parseInt(content.slice(content.indexOf(',') + 1));
        }

        popoverImage.element.setAttribute('width', popoverImage.width);
        popoverImage.element.setAttribute('height', popoverImage.height);
        popoverImage.element.setAttribute('preserveAspectRatio', 'none');

        // attach image URL as a link
        content = content.slice(content.indexOf(':') + 1);
        popoverImage.element.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', content);
    };

    // Show popover text in given position
    var showPopoverText = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverText.height + 16 > domRect.y) {
            position.y = domRect.y - popoverText.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverText.width + 14 > domRect.x) {
            position.x = domRect.x - popoverText.width - 14;
        }

        // Change Box position
        popoverContainer.element.setAttribute('x', position.x + 10);
        popoverContainer.element.setAttribute('y', position.y + 4);
        popoverContainer.element.setAttribute('visibility', 'visible');

        // Change Text position
        popoverText.element.setAttribute('x', position.x + 14);
        popoverText.element.setAttribute('y', position.y + 18);
        popoverText.element.setAttribute('visibility', 'visible');

        // Change multiline text position
        var tspan = popoverText.element.querySelectorAll('tspan');
        for (var i = 0; i < tspan.length; i++) {
            tspan[i].setAttribute('x', position.x + 14);
        }

        // Font properties
        if (settings.hypertext_fontFamily != null)
            popoverText.element.setAttribute('font-family', settings.hypertext_fontFamily);
        if (settings.hypertext_fontStyle != null)
            popoverText.element.setAttribute('font-style', settings.hypertext_fontStyle);
        if (settings.hypertext_fontWeight != null)
            popoverText.element.setAttribute('font-weight', settings.hypertext_fontWeight);
        if (settings.hypertext_fontSize > 0)
            popoverText.element.setAttribute('font-size', settings.hypertext_fontSize);
    };

    // Show popover image in given position
    var showPopoverImage = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverImage.height + 16 > domRect.y) {
            position.y = domRect.y - popoverImage.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverImage.width + 14 > domRect.x) {
            position.x = domRect.x - popoverImage.width - 14;
        }

        popoverImage.element.setAttribute('x', position.x);
        popoverImage.element.setAttribute('y', position.y);
        popoverImage.element.setAttribute('visibility', 'visible');
    };

    // Hide all popovers
    var hidePopover = function () {
        popoverContainer.element.setAttribute('visibility', 'hidden');
        popoverText.element.setAttribute('visibility', 'hidden');
        popoverImage.element.setAttribute('visibility', 'hidden');
    };

    // Zoom svg inside viewbox
    var zoom = function (direction) {
        var zoomRate = 1.1;
        var viewBoxValues = getViewBox();

        var widthBefore = viewBoxValues[2];
        var heightBefore = viewBoxValues[3];

        if (direction == 'in') {
            viewBoxValues[2] /= zoomRate;
            viewBoxValues[3] /= zoomRate;
            // Pan to center
            viewBoxValues[0] -= (viewBoxValues[2] - widthBefore) / 2;
            viewBoxValues[1] -= (viewBoxValues[3] - heightBefore) / 2;
        }
        else if (direction == 'out') {
            viewBoxValues[2] *= zoomRate;
            viewBoxValues[3] *= zoomRate;
            // Pan to center
            viewBoxValues[0] += (widthBefore - viewBoxValues[2]) / 2;
            viewBoxValues[1] += (heightBefore - viewBoxValues[3]) / 2;
        }

        return viewBoxValues;
    };

    // Pan svg inside viewbox
    var pan = function (direction) {
        var panRate = 10;
        var viewBoxValues = getViewBox();

        switch (direction) {
            case 'left':
                viewBoxValues[0] += panRate;
                break;
            case 'right':
                viewBoxValues[0] -= panRate;
                break;
            case 'up':
                viewBoxValues[1] += panRate;
                break;
            case 'down':
                viewBoxValues[1] -= panRate;
                break;
        }

        return viewBoxValues;
    };

    // Toggle key and chart on/off or set manually to wanted
    var key = function (id, set, evt) {
        var visibility = null;

        // Chart element
        var chartElement = svgElement.getElementById(id.replace('_keyentry', ''));
        if (chartElement) {
            // Set on/off
            if (set === true || set === false) {
                visibility = set ? 'visible' : 'hidden';
            }
            // Toggle
            else {
                visibility = chartElement.getAttribute('visibility') == 'hidden' ? 'visible' : 'hidden';
            }
            chartElement.setAttribute('visibility', visibility);
        }

        // Key element
        var keyElement = svgElement.getElementById(id);
        if (keyElement && visibility) {
            keyElement.setAttribute('style', visibility == 'hidden' ? 'filter:url(#greybox)' : 'none');
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Toggle coordinates on/off or set manually to wanted
    var coordinate = function (set) {
        if (coordinateText.element) {
            // Set on/off
            if (set === true || set === false) {
                coordinateText.enabled = set;
            }
            // Toggle
            else {
                coordinateText.enabled = coordinateText.element.getAttribute('visibility') == 'hidden' ? true : false;
            }
            coordinateText.element.setAttribute('visibility', coordinateText.enabled ? 'visible' : 'hidden');
        }
    };

    // Toggle grid on/off or set manually to wanted
    var grid = function (set) {
        var grid = svgElement.getElementsByClassName('gridline');

        // Set on/off
        if (set === true || set === false) {
            gridEnabled = set;
        }
        // Toggle, get state from first element
        else if (grid.length) {
            gridEnabled = grid[0].getAttribute('visibility') == 'hidden' ? true : false;
        }

        for (i = 0; i < grid.length; i++) {
            grid[i].setAttribute('visibility', gridEnabled ? 'visible' : 'hidden');
        }
    };

    // Show popover text or image
    var popover = function (content, set, evt) {

        // Hide popover
        if (set === false) {
            hidePopover();

            if (evt !== undefined) {
                evt.stopPropagation();
                evt.preventDefault();
            }

            return;
        }

        var position = null;

        // Change content only if changed
        if (popoverContainer.content != content) {

            // Set current text
            popoverContainer.content = content;

            popoverImage.content = '';
            popoverText.content = content;

            // If text starts with image: process it as an xlinked bitmap
            if (content.substring(0, 5) == 'image') {
                var lines = content.split(/\n|\\n/g);
                var nameindex = lines[0].indexOf(':');
                if (nameindex > 0) {
                    popoverImage.content = lines.shift();
                    popoverText.content = '';

                    // Additional text lines
                    if (lines !== undefined && lines.length > 0) {
                        popoverText.content = lines.join('\n');
                    }
                }
            }

            // Set image content
            if(popoverImage.content){
                setPopoverImage(popoverImage.content);
            }

            // Set text content
            if(popoverText.content){
                setPopoverText(popoverText.content);
            }
        }

        if(popoverImage.content || popoverText.content){
            position = convertDOMToSVG({'x': evt.clientX, 'y': evt.clientY });
        }

        // Show popover image on mouse position
        if(popoverImage.content){
            showPopoverImage(position);
        }

        // Show popover on mouse position
        if(popoverText.content){
            showPopoverText(position);
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Parse plot settings
    parseSettings();

    // viewBox initial position and size
    viewBoxResetValue = getViewBox();

    // Set focusable for event focusing, not work on old svg version
    svgElement.setAttribute('focusable', true);

    // Disable native draggable
    svgElement.setAttribute('draggable', false);

    // Add events
    addEvents();

    // Return functions to outside use
    return {
        zoom: function (direction) {
            setViewBox(zoom(direction));
            return this;
        },
        pan: function (direction) {
            setViewBox(pan(direction));
            return this;
        },
        reset: function () {
            setViewBox(viewBoxResetValue);
            return this;
        },
        key: function (id, set) {
            key(id, set);
            return this;
        },
        coordinate: function (set) {
            coordinate(set);
            return this;
        },
        grid: function (set) {
            grid(set);
            return this;
        }
    };
};

// Old init function, remove when svg inline events removed
gnuplot_svg.Init = function() { };
]]>
</script>

<!-- Tie mousing to entire bounding box of the plot -->
<rect x="0" y="0" width="960" height="480" fill="#ffffff" stroke="black" stroke-width="1"
onclick="gnuplot_svg.toggleCoordBox(evt)"  onmousemove="gnuplot_svg.moveCoordBox(evt)"/>

<!-- Also track mouse when it is on a plot element -->
<g id="gnuplot_canvas" onclick="gnuplot_svg.toggleCoordBox(evt)" onmousemove="gnuplot_svg.moveCoordBox(evt)">

<defs>

	<circle id='gpDot' r='0.5' stroke-width='0.5' stroke='currentColor'/>
	<path id='gpPt0' stroke-width='0.222' stroke='currentColor' d='M-1,0 h2 M0,-1 v2'/>
	<path id='gpPt1' stroke-width='0.222' stroke='currentColor' d='M-1,-1 L1,1 M1,-1 L-1,1'/>
	<path id='gpPt2' stroke-width='0.222' stroke='currentColor' d='M-1,0 L1,0 M0,-1 L0,1 M-1,-1 L1,1 M-1,1 L1,-1'/>
	<rect id='gpPt3' stroke-width='0.222' stroke='currentColor' x='-1' y='-1' width='2' height='2'/>
	<rect id='gpPt4' stroke-width='0.222' stroke='currentColor' fill='currentColor' x='-1' y='-1' width='2' height='2'/>
	<circle id='gpPt5' stroke-width='0.222' stroke='currentColor' cx='0' cy='0' r='1'/>
	<use xlink:href='#gpPt5' id='gpPt6' fill='currentColor' stroke='none'/>
	<path id='gpPt7' stroke-width='0.222' stroke='currentColor' d='M0,-1.33 L-1.33,0.67 L1.33,0.67 z'/>
	<use xlink:href='#gpPt7' id='gpPt8' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt7' id='gpPt9' stroke='currentColor' transform='rotate(180)'/>
	<use xlink:href='#gpPt9' id='gpPt10' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt3' id='gpPt11' stroke='currentColor' transform='rotate(45)'/>
	<use xlink:href='#gpPt11' id='gpPt12' fill='currentColor' stroke='none'/>
	<path id='gpPt13' stroke-width='0.222' stroke='currentColor' d='M0,1.330 L1.265,0.411 L0.782,-1.067 L-0.782,-1.076 L-1.265,0.411 z'/>
	<use xlink:href='#gpPt13' id='gpPt14' fill='currentColor' stroke='none'/>
	<filter id='textbox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='white' flood-opacity='1' result='bgnd'/>
	  <feComposite in='SourceGraphic' in2='bgnd' operator='atop'/>
	</filter>
	<filter id='greybox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='lightgrey' flood-opacity='1' result='grey'/>
	  <feComposite in='SourceGraphic' in2='grey' operator='atop'/>
	</filter>
</defs>
<g fill="none" color="white" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,422.40 L63.53,422.40 M774.19,422.40 L765.19,422.40  '/>	<g transform="translate(46.14,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.72</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,355.00 L63.53,355.00 M774.19,355.00 L765.19,355.00  '/>	<g transform="translate(46.14,358.90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.74</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,287.60 L63.53,287.60 M774.19,287.60 L765.19,287.60  '/>	<g transform="translate(46.14,291.50)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.76</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,220.20 L63.53,220.20 M774.19,220.20 L765.19,220.20  '/>	<g transform="translate(46.14,224.10)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.78</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,152.81 L63.53,152.81 M774.19,152.81 L765.19,152.81  '/>	<g transform="translate(46.14,156.71)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.80</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,85.41 L63.53,85.41 M774.19,85.41 L765.19,85.41  '/>	<g transform="translate(46.14,89.31)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.82</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,18.01 L63.53,18.01 M774.19,18.01 L765.19,18.01  '/>	<g transform="translate(46.14,21.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.84</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,422.40 L54.53,413.40 M54.53,18.01 L54.53,27.01  '/>	<g transform="translate(54.53,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M126.50,422.40 L126.50,413.40 M126.50,18.01 L126.50,27.01  '/>	<g transform="translate(126.50,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 1000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M198.46,422.40 L198.46,413.40 M198.46,18.01 L198.46,27.01  '/>	<g transform="translate(198.46,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 2000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M270.43,422.40 L270.43,413.40 M270.43,18.01 L270.43,27.01  '/>	<g transform="translate(270.43,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 3000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M342.39,422.40 L342.39,413.40 M342.39,18.01 L342.39,27.01  '/>	<g transform="translate(342.39,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 4000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M414.36,422.40 L414.36,413.40 M414.36,18.01 L414.36,27.01  '/>	<g transform="translate(414.36,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 5000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M486.33,422.40 L486.33,413.40 M486.33,18.01 L486.33,27.01  '/>	<g transform="translate(486.33,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 6000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M558.29,422.40 L558.29,413.40 M558.29,18.01 L558.29,27.01  '/>	<g transform="translate(558.29,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 7000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M630.26,422.40 L630.26,413.40 M630.26,18.01 L630.26,27.01  '/>	<g transform="translate(630.26,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 8000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M702.22,422.40 L702.22,413.40 M702.22,18.01 L702.22,27.01  '/>	<g transform="translate(702.22,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 9000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M774.19,422.40 L774.19,413.40 M774.19,18.01 L774.19,27.01  '/>	<g transform="translate(774.19,444.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 10000</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,18.01 L54.53,422.40 L774.19,422.40 L774.19,18.01 L54.53,18.01 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(10.18,220.21) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(782.59,220.21) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,471.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >K</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,21.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
	<g id="gnuplot_plot_1" ><title>mean ± 1σ</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<g transform="translate(859.31,206.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >mean ± 1</tspan><tspan font-family="Arial" >σ</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(  0, 158, 115)'  d='M808.36,202.21 L850.92,202.21 M808.36,197.71 L808.36,206.71 M850.92,197.71 L850.92,206.71  '/>	</g>
	<path stroke='rgb(  0, 158, 115)'  d='M61.73,268.41 L61.73,119.19 M57.23,268.41 L66.23,268.41 M57.23,119.19 L66.23,119.19 M68.92,248.64 L68.92,135.60
		M64.42,248.64 L73.42,248.64 M64.42,135.60 L73.42,135.60 M76.12,238.86 L76.12,147.46 M71.62,238.86 L80.62,238.86
		M71.62,147.46 L80.62,147.46 M83.32,229.87 L83.32,150.18 M78.82,229.87 L87.82,229.87 M78.82,150.18 L87.82,150.18
		M90.51,228.27 L90.51,153.83 M86.01,228.27 L95.01,228.27 M86.01,153.83 L95.01,153.83 M97.71,226.25 L97.71,163.37
		M93.21,226.25 L102.21,226.25 M93.21,163.37 L102.21,163.37 M104.91,224.76 L104.91,165.16 M100.41,224.76 L109.41,224.76
		M100.41,165.16 L109.41,165.16 M112.10,222.01 L112.10,168.79 M107.60,222.01 L116.60,222.01 M107.60,168.79 L116.60,168.79
		M119.30,220.77 L119.30,168.66 M114.80,220.77 L123.80,220.77 M114.80,168.66 L123.80,168.66 M126.50,221.65 L126.50,170.85
		M122.00,221.65 L131.00,221.65 M122.00,170.85 L131.00,170.85 M133.69,219.64 L133.69,170.38 M129.19,219.64 L138.19,219.64
		M129.19,170.38 L138.19,170.38 M140.89,219.03 L140.89,173.57 M136.39,219.03 L145.39,219.03 M136.39,173.57 L145.39,173.57
		M148.09,219.82 L148.09,174.74 M143.59,219.82 L152.59,219.82 M143.59,174.74 L152.59,174.74 M155.28,220.63 L155.28,177.55
		M150.78,220.63 L159.78,220.63 M150.78,177.55 L159.78,177.55 M162.48,219.78 L162.48,177.82 M157.98,219.78 L166.98,219.78
		M157.98,177.82 L166.98,177.82 M169.68,219.81 L169.68,179.45 M165.18,219.81 L174.18,219.81 M165.18,179.45 L174.18,179.45
		M176.87,220.28 L176.87,179.81 M172.37,220.28 L181.37,220.28 M172.37,179.81 L181.37,179.81 M184.07,219.92 L184.07,179.83
		M179.57,219.92 L188.57,219.92 M179.57,179.83 L188.57,179.83 M191.27,219.88 L191.27,180.32 M186.77,219.88 L195.77,219.88
		M186.77,180.32 L195.77,180.32 M198.46,219.73 L198.46,180.81 M193.96,219.73 L202.96,219.73 M193.96,180.81 L202.96,180.81
		M205.66,219.24 L205.66,180.79 M201.16,219.24 L210.16,219.24 M201.16,180.79 L210.16,180.79 M212.86,218.43 L212.86,180.76
		M208.36,218.43 L217.36,218.43 M208.36,180.76 L217.36,180.76 M220.05,218.22 L220.05,181.24 M215.55,218.22 L224.55,218.22
		M215.55,181.24 L224.55,181.24 M227.25,217.42 L227.25,181.90 M222.75,217.42 L231.75,217.42 M222.75,181.90 L231.75,181.90
		M234.45,217.02 L234.45,181.98 M229.95,217.02 L238.95,217.02 M229.95,181.98 L238.95,181.98 M241.64,216.84 L241.64,183.41
		M237.14,216.84 L246.14,216.84 M237.14,183.41 L246.14,183.41 M248.84,216.91 L248.84,184.00 M244.34,216.91 L253.34,216.91
		M244.34,184.00 L253.34,184.00 M256.03,217.20 L256.03,184.45 M251.53,217.20 L260.53,217.20 M251.53,184.45 L260.53,184.45
		M263.23,216.43 L263.23,184.95 M258.73,216.43 L267.73,216.43 M258.73,184.95 L267.73,184.95 M270.43,216.54 L270.43,186.03
		M265.93,216.54 L274.93,216.54 M265.93,186.03 L274.93,186.03 M277.62,215.92 L277.62,186.11 M273.12,215.92 L282.12,215.92
		M273.12,186.11 L282.12,186.11 M284.82,216.22 L284.82,187.13 M280.32,216.22 L289.32,216.22 M280.32,187.13 L289.32,187.13
		M292.02,215.60 L292.02,187.65 M287.52,215.60 L296.52,215.60 M287.52,187.65 L296.52,187.65 M299.21,215.14 L299.21,187.21
		M294.71,215.14 L303.71,215.14 M294.71,187.21 L303.71,187.21 M306.41,214.70 L306.41,187.27 M301.91,214.70 L310.91,214.70
		M301.91,187.27 L310.91,187.27 M313.61,214.64 L313.61,187.54 M309.11,214.64 L318.11,214.64 M309.11,187.54 L318.11,187.54
		M320.80,214.57 L320.80,188.18 M316.30,214.57 L325.30,214.57 M316.30,188.18 L325.30,188.18 M328.00,213.99 L328.00,187.74
		M323.50,213.99 L332.50,213.99 M323.50,187.74 L332.50,187.74 M335.20,213.64 L335.20,187.85 M330.70,213.64 L339.70,213.64
		M330.70,187.85 L339.70,187.85 M342.39,213.49 L342.39,188.64 M337.89,213.49 L346.89,213.49 M337.89,188.64 L346.89,188.64
		M349.59,213.11 L349.59,188.47 M345.09,213.11 L354.09,213.11 M345.09,188.47 L354.09,188.47 M356.79,213.29 L356.79,188.73
		M352.29,213.29 L361.29,213.29 M352.29,188.73 L361.29,188.73 M363.98,213.19 L363.98,189.18 M359.48,213.19 L368.48,213.19
		M359.48,189.18 L368.48,189.18 M371.18,213.08 L371.18,189.61 M366.68,213.08 L375.68,213.08 M366.68,189.61 L375.68,189.61
		M378.38,213.12 L378.38,189.55 M373.88,213.12 L382.88,213.12 M373.88,189.55 L382.88,189.55 M385.57,213.43 L385.57,189.63
		M381.07,213.43 L390.07,213.43 M381.07,189.63 L390.07,189.63 M392.77,213.33 L392.77,190.34 M388.27,213.33 L397.27,213.33
		M388.27,190.34 L397.27,190.34 M399.97,213.20 L399.97,190.12 M395.47,213.20 L404.47,213.20 M395.47,190.12 L404.47,190.12
		M407.16,212.89 L407.16,190.13 M402.66,212.89 L411.66,212.89 M402.66,190.13 L411.66,190.13 M414.36,212.42 L414.36,190.46
		M409.86,212.42 L418.86,212.42 M409.86,190.46 L418.86,190.46 M421.56,212.13 L421.56,190.44 M417.06,212.13 L426.06,212.13
		M417.06,190.44 L426.06,190.44 M428.75,211.70 L428.75,190.79 M424.25,211.70 L433.25,211.70 M424.25,190.79 L433.25,190.79
		M435.95,211.59 L435.95,190.71 M431.45,211.59 L440.45,211.59 M431.45,190.71 L440.45,190.71 M443.15,211.30 L443.15,190.95
		M438.65,211.30 L447.65,211.30 M438.65,190.95 L447.65,190.95 M450.34,211.48 L450.34,190.99 M445.84,211.48 L454.84,211.48
		M445.84,190.99 L454.84,190.99 M457.54,211.73 L457.54,190.78 M453.04,211.73 L462.04,211.73 M453.04,190.78 L462.04,190.78
		M464.74,211.33 L464.74,191.05 M460.24,211.33 L469.24,211.33 M460.24,191.05 L469.24,191.05 M471.93,211.16 L471.93,190.86
		M467.43,211.16 L476.43,211.16 M467.43,190.86 L476.43,190.86 M479.13,210.88 L479.13,190.93 M474.63,210.88 L483.63,210.88
		M474.63,190.93 L483.63,190.93 M486.33,210.83 L486.33,191.04 M481.83,210.83 L490.83,210.83 M481.83,191.04 L490.83,191.04
		M493.52,210.67 L493.52,191.19 M489.02,210.67 L498.02,210.67 M489.02,191.19 L498.02,191.19 M500.72,210.64 L500.72,191.23
		M496.22,210.64 L505.22,210.64 M496.22,191.23 L505.22,191.23 M507.92,210.20 L507.92,191.19 M503.42,210.20 L512.42,210.20
		M503.42,191.19 L512.42,191.19 M515.11,210.18 L515.11,191.26 M510.61,210.18 L519.61,210.18 M510.61,191.26 L519.61,191.26
		M522.31,210.28 L522.31,191.55 M517.81,210.28 L526.81,210.28 M517.81,191.55 L526.81,191.55 M529.51,210.30 L529.51,191.73
		M525.01,210.30 L534.01,210.30 M525.01,191.73 L534.01,191.73 M536.70,210.23 L536.70,191.72 M532.20,210.23 L541.20,210.23
		M532.20,191.72 L541.20,191.72 M543.90,210.05 L543.90,191.95 M539.40,210.05 L548.40,210.05 M539.40,191.95 L548.40,191.95
		M551.10,210.00 L551.10,192.25 M546.60,210.00 L555.60,210.00 M546.60,192.25 L555.60,192.25 M558.29,210.06 L558.29,192.28
		M553.79,210.06 L562.79,210.06 M553.79,192.28 L562.79,192.28 M565.49,209.83 L565.49,192.31 M560.99,209.83 L569.99,209.83
		M560.99,192.31 L569.99,192.31 M572.69,209.93 L572.69,192.57 M568.19,209.93 L577.19,209.93 M568.19,192.57 L577.19,192.57
		M579.88,209.88 L579.88,192.62 M575.38,209.88 L584.38,209.88 M575.38,192.62 L584.38,192.62 M587.08,209.89 L587.08,192.70
		M582.58,209.89 L591.58,209.89 M582.58,192.70 L591.58,192.70 M594.28,210.11 L594.28,192.87 M589.78,210.11 L598.78,210.11
		M589.78,192.87 L598.78,192.87 M601.47,209.95 L601.47,192.81 M596.97,209.95 L605.97,209.95 M596.97,192.81 L605.97,192.81
		M608.67,209.92 L608.67,192.86 M604.17,209.92 L613.17,209.92 M604.17,192.86 L613.17,192.86 M615.86,209.80 L615.86,192.76
		M611.36,209.80 L620.36,209.80 M611.36,192.76 L620.36,192.76 M623.06,209.75 L623.06,192.73 M618.56,209.75 L627.56,209.75
		M618.56,192.73 L627.56,192.73 M630.26,209.52 L630.26,192.69 M625.76,209.52 L634.76,209.52 M625.76,192.69 L634.76,192.69
		M637.45,209.46 L637.45,192.75 M632.95,209.46 L641.95,209.46 M632.95,192.75 L641.95,192.75 M644.65,209.23 L644.65,192.92
		M640.15,209.23 L649.15,209.23 M640.15,192.92 L649.15,192.92 M651.85,208.94 L651.85,192.81 M647.35,208.94 L656.35,208.94
		M647.35,192.81 L656.35,192.81 M659.04,208.75 L659.04,192.83 M654.54,208.75 L663.54,208.75 M654.54,192.83 L663.54,192.83
		M666.24,208.57 L666.24,192.57 M661.74,208.57 L670.74,208.57 M661.74,192.57 L670.74,192.57 M673.44,208.76 L673.44,192.61
		M668.94,208.76 L677.94,208.76  '/>	<path stroke='rgb(  0, 158, 115)'  d='M668.94,192.61 L677.94,192.61 M680.63,208.66 L680.63,192.76 M676.13,208.66 L685.13,208.66 M676.13,192.76 L685.13,192.76
		M687.83,208.80 L687.83,192.78 M683.33,208.80 L692.33,208.80 M683.33,192.78 L692.33,192.78 M695.03,208.94 L695.03,192.82
		M690.53,208.94 L699.53,208.94 M690.53,192.82 L699.53,192.82 M702.22,209.02 L702.22,192.88 M697.72,209.02 L706.72,209.02
		M697.72,192.88 L706.72,192.88 M709.42,209.01 L709.42,192.89 M704.92,209.01 L713.92,209.01 M704.92,192.89 L713.92,192.89
		M716.62,208.84 L716.62,193.05 M712.12,208.84 L721.12,208.84 M712.12,193.05 L721.12,193.05 M723.81,208.64 L723.81,193.00
		M719.31,208.64 L728.31,208.64 M719.31,193.00 L728.31,193.00 M731.01,208.55 L731.01,192.99 M726.51,208.55 L735.51,208.55
		M726.51,192.99 L735.51,192.99 M738.21,208.66 L738.21,193.02 M733.71,208.66 L742.71,208.66 M733.71,193.02 L742.71,193.02
		M745.40,208.55 L745.40,193.06 M740.90,208.55 L749.90,208.55 M740.90,193.06 L749.90,193.06 M752.60,208.51 L752.60,193.23
		M748.10,208.51 L757.10,208.51 M748.10,193.23 L757.10,193.23 M759.80,208.37 L759.80,193.35 M755.30,208.37 L764.30,208.37
		M755.30,193.35 L764.30,193.35 M766.99,208.21 L766.99,193.28 M762.49,208.21 L771.49,208.21 M762.49,193.28 L771.49,193.28
		M774.19,208.27 L774.19,193.21 M769.69,208.27 L774.19,208.27 M769.69,193.21 L774.19,193.21  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<use xlink:href='#gpPt0' transform='translate(61.73,193.80) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(68.92,192.12) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(76.12,193.16) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(83.32,190.02) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(90.51,191.05) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(97.71,194.81) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(104.91,194.96) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(112.10,195.40) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(119.30,194.72) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(126.50,196.25) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(133.69,195.01) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(140.89,196.30) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(148.09,197.28) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(155.28,199.09) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(162.48,198.80) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(169.68,199.63) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(176.87,200.04) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(184.07,199.88) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(191.27,200.10) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(198.46,200.27) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(205.66,200.01) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(212.86,199.59) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(220.05,199.73) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(227.25,199.66) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(234.45,199.50) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(241.64,200.12) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(248.84,200.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(256.03,200.83) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(263.23,200.69) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(270.43,201.28) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(277.62,201.01) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(284.82,201.67) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(292.02,201.62) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(299.21,201.17) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(306.41,200.98) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(313.61,201.09) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(320.80,201.37) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(328.00,200.87) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(335.20,200.74) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(342.39,201.07) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(349.59,200.79) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(356.79,201.01) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(363.98,201.19) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(371.18,201.34) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(378.38,201.34) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(385.57,201.53) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(392.77,201.83) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(399.97,201.66) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(407.16,201.51) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(414.36,201.44) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(421.56,201.28) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(428.75,201.25) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(435.95,201.15) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(443.15,201.13) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(450.34,201.23) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(457.54,201.26) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(464.74,201.19) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(471.93,201.01) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(479.13,200.91) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(486.33,200.93) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(493.52,200.93) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(500.72,200.93) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(507.92,200.70) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(515.11,200.72) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(522.31,200.92) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(529.51,201.01) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(536.70,200.97) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(543.90,201.00) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(551.10,201.13) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(558.29,201.17) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(565.49,201.07) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(572.69,201.25) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(579.88,201.25) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(587.08,201.30) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(594.28,201.49) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(601.47,201.38) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(608.67,201.39) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(615.86,201.28) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(623.06,201.24) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(630.26,201.11) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(637.45,201.10) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(644.65,201.07) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(651.85,200.87) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(659.04,200.79) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(666.24,200.57) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(673.44,200.68) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(680.63,200.71) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(687.83,200.79) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(695.03,200.88) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(702.22,200.95) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(709.42,200.95) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(716.62,200.94) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(723.81,200.82) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(731.01,200.77) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(738.21,200.84) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(745.40,200.81) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(752.60,200.87) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(759.80,200.86) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(766.99,200.74) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(774.19,200.74) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<use xlink:href='#gpPt0' transform='translate(829.64,202.21) scale(4.50)' color='rgb(  0, 158, 115)'/>
	</g>
</g>
	</g>
	<g id="gnuplot_plot_2" ><title>maxval</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_2_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_2')">
	<g transform="translate(859.31,224.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >maxval</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(148,   0, 211)'  d='M808.36,220.21 L850.92,220.21  '/>	</g>
	<path stroke='rgb(148,   0, 211)'  d='M61.73,36.69 L68.92,60.49 L76.12,103.91 L83.32,107.71 L90.51,102.44 L97.71,129.55 L104.91,130.09 L112.10,138.54
		L119.30,141.52 L126.50,146.01 L133.69,149.09 L140.89,148.49 L148.09,138.62 L155.28,149.05 L162.48,140.51 L169.68,148.19
		L176.87,151.72 L184.07,160.63 L191.27,159.83 L198.46,157.49 L205.66,156.52 L212.86,160.27 L220.05,161.27 L227.25,160.21
		L234.45,157.64 L241.64,159.29 L248.84,158.86 L256.03,158.44 L263.23,159.20 L270.43,160.29 L277.62,161.41 L284.82,157.97
		L292.02,159.11 L299.21,160.53 L306.41,157.59 L313.61,160.31 L320.80,163.65 L328.00,167.94 L335.20,167.84 L342.39,169.24
		L349.59,168.12 L356.79,168.91 L363.98,170.62 L371.18,174.05 L378.38,171.81 L385.57,172.73 L392.77,172.76 L399.97,171.73
		L407.16,170.40 L414.36,171.16 L421.56,170.48 L428.75,172.39 L435.95,170.95 L443.15,171.82 L450.34,172.85 L457.54,173.67
		L464.74,174.23 L471.93,174.89 L479.13,175.75 L486.33,174.63 L493.52,175.15 L500.72,175.00 L507.92,175.06 L515.11,176.19
		L522.31,177.33 L529.51,176.76 L536.70,176.67 L543.90,177.46 L551.10,178.64 L558.29,178.55 L565.49,179.77 L572.69,181.75
		L579.88,181.53 L587.08,181.96 L594.28,181.43 L601.47,181.34 L608.67,180.54 L615.86,180.38 L623.06,179.78 L630.26,180.28
		L637.45,178.94 L644.65,180.82 L651.85,180.38 L659.04,180.57 L666.24,179.06 L673.44,179.55 L680.63,180.74 L687.83,182.10
		L695.03,180.79 L702.22,181.16 L709.42,180.77 L716.62,182.89 L723.81,182.60 L731.01,182.79 L738.21,181.91 L745.40,181.89
		L752.60,181.87 L759.80,182.73 L766.99,182.70 L774.19,183.17  '/></g>
	</g>
	<g id="gnuplot_plot_3" ><title>minval</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_3_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_3')">
	<g transform="translate(859.31,242.11)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >minval</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb( 86, 180, 233)'  d='M808.36,238.21 L850.92,238.21  '/>	</g>
	<path stroke='rgb( 86, 180, 233)'  d='M61.73,396.38 L68.92,330.56 L76.12,285.48 L83.32,298.26 L90.51,275.06 L97.71,262.70 L104.91,256.76 L112.10,256.27
		L119.30,249.56 L126.50,248.65 L133.69,247.62 L140.89,244.12 L148.09,250.90 L155.28,247.33 L162.48,244.19 L169.68,245.52
		L176.87,248.27 L184.07,249.67 L191.27,246.10 L198.46,245.84 L205.66,249.52 L212.86,248.23 L220.05,246.58 L227.25,242.14
		L234.45,237.13 L241.64,238.47 L248.84,238.71 L256.03,235.96 L263.23,233.38 L270.43,233.85 L277.62,232.67 L284.82,231.98
		L292.02,232.07 L299.21,236.53 L306.41,231.86 L313.61,229.20 L320.80,227.83 L328.00,226.07 L335.20,227.44 L342.39,225.69
		L349.59,226.63 L356.79,228.42 L363.98,230.02 L371.18,228.39 L378.38,227.52 L385.57,227.08 L392.77,225.90 L399.97,226.57
		L407.16,227.09 L414.36,227.35 L421.56,225.66 L428.75,226.49 L435.95,226.36 L443.15,226.32 L450.34,226.93 L457.54,227.12
		L464.74,226.17 L471.93,225.41 L479.13,224.60 L486.33,226.32 L493.52,225.68 L500.72,225.17 L507.92,224.80 L515.11,227.04
		L522.31,227.63 L529.51,227.43 L536.70,226.93 L543.90,227.10 L551.10,225.67 L558.29,225.93 L565.49,226.18 L572.69,226.36
		L579.88,225.63 L587.08,226.33 L594.28,224.74 L601.47,223.05 L608.67,222.57 L615.86,222.39 L623.06,223.85 L630.26,223.31
		L637.45,222.03 L644.65,222.98 L651.85,222.57 L659.04,222.28 L666.24,223.23 L673.44,223.96 L680.63,222.53 L687.83,221.51
		L695.03,221.71 L702.22,222.73 L709.42,222.53 L716.62,221.94 L723.81,222.39 L731.01,222.52 L738.21,221.82 L745.40,222.15
		L752.60,220.05 L759.80,219.92 L766.99,220.04 L774.19,221.50  '/></g>
	</g>
<g fill="none" color="white" stroke="rgb( 86, 180, 233)" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="black" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,18.01 L54.53,422.40 L774.19,422.40 L774.19,18.01 L54.53,18.01 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,21.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>

<script type="text/javascript"><![CDATA[
// plot boundaries and axis scaling information for mousing 
gnuplot_svg.plot_term_xmax = 960;
gnuplot_svg.plot_term_ymax = 480;
gnuplot_svg.plot_xmin = 54.5;
gnuplot_svg.plot_xmax = 774.2;
gnuplot_svg.plot_ybot = 422.4;
gnuplot_svg.plot_ytop = 18.0;
gnuplot_svg.plot_width = 719.7;
gnuplot_svg.plot_height = 404.4;
gnuplot_svg.plot_axis_xmin = 0;
gnuplot_svg.plot_axis_xmax = 10000;
gnuplot_svg.plot_axis_ymin = 0.72;
gnuplot_svg.plot_axis_ymax = 0.84;
gnuplot_svg.polar_mode = false;
gnuplot_svg.plot_axis_x2min = "none";
gnuplot_svg.plot_axis_y2min = "none";
gnuplot_svg.plot_logaxis_x = 0;
gnuplot_svg.plot_logaxis_y = 0;
gnuplot_svg.plot_timeaxis_x = "";
gnuplot_svg.plot_timeaxis_y = "";
gnuplot_svg.hypertext_fontSize = 0;
gnuplot_svg.hypertext_fontName = null;
gnuplot_svg.hypertext_fontStyle = null;
gnuplot_svg.hypertext_fontWeight = null;
]]>
</script>
</g>

  <text id="coord_text" text-anchor="start" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <rect id="hypertextbox" class="hypertextbox" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="16" visibility="hidden" />

  <text id="hypertext" class="hypertext" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <image id="hyperimage" class="hyperimage" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="200" width="300" visibility="hidden" />
</svg>

