<?xml version="1.0" encoding="utf-8"  standalone="no"?>
<svg  onload="if (typeof(gnuplot_svg)!='undefined') gnuplot_svg.Init(evt)" 
 width="960" height="480"
 viewBox="0 0 960 480"
 xmlns="http://www.w3.org/2000/svg"
 xmlns:xlink="http://www.w3.org/1999/xlink"
>

<title>Gnuplot</title>
<desc>Produced by GNUPLOT 5.4 patchlevel 2 </desc>

<script type="text/javascript" > <![CDATA[
// From:	Marko Karjalainen <markokarjalainen@kolumbus.fi>
// Date:	27 Aug 2018
// Experimental gnuplot plugin for svg
//
// All svg elements on page get own gnuplot plugin attached by js, so no conflict with global variables.
//
// Javascript variables are read from second script tag and converted to json for import to plugin.
// Inline events are removed from xml and new ones are attached with addEventListener function.
// Inline events should be removed from xml and xml should have better id/class names to attach events from js.
//
// Improved mouseover text and image handling
//   content changed to xml only if it really changed and bouncing is calculated once.
//
// Convert functions are same as before, maybe renamed better.
//
// Javascript routines for mouse and keyboard interaction with
// SVG documents produced by gnuplot SVG terminal driver.

// TODO do not create inline events to svg and give id or classes for getting elements
// TODO make own svg layer x/y range sized for coordinates?

if (window) {
    window.addEventListener('load', function () {
        // Find svg elements
        var svg = document.querySelectorAll('svg');
        for (var i = 0; i < svg.length; i++) {
            // Init plugin
            if (!svg[i].gnuplot) {
                // Check if gnuplot generated svg
                if(svg[i].getElementById('gnuplot_canvas')){
                    svg[i].gnuplot = new gnuplot_svg(svg[i]);
                }
            }
        }
    });
}

gnuplot_svg = function (svgElement) {

    var version = '09 April 2019';

    var settings = {};

    var viewBoxResetValue = [];

    var drag = {
        'enabled': false,
        'offset': { 'x': 0, 'y': 0 },
        'change': svgElement.createSVGPoint(),
        'timeout': null
    };

    var coordinateText = {
        'enabled': false,
        'element': svgElement.getElementById('coord_text')
    };

    var popoverContainer = {
        'element': null,
        'content': null,
    };

    var popoverImage = {
        'element': null,
        'content': null,
        'width': 300,
        'height': 200,
        'defaultWidth': 300,
        'defaultHeight': 200,
    };

    var popoverText = {
        'element': null,
        'content': null,
        'width': 11,
        'height': 16,
        'defaultWidth': 11,
        'defaultHeight': 16,
    };

    var point = svgElement.createSVGPoint();

    var axisDate = new Date();

    var gridEnabled = false;

    // Get plot boundaries and axis scaling information for mousing from current object script tag
    // TODO add these to svg xml custom attribute for reading(json format)
    var parseSettings = function () {
        var script = svgElement.querySelectorAll('script');
        if (script && script[1]) {
            var scriptText = script[1].firstChild.nodeValue;
            // Remove inline comments
            scriptText = scriptText.replace(/^\s*\/\/.*\n/g, '');
            // Change prefix to "
            scriptText = scriptText.replace(/gnuplot_svg\./g, '"');
            // Change = to " :
            scriptText = scriptText.replace(/ = /g, '" : ');
            // Change line endings to comma
            scriptText = scriptText.replace(/;\n|\n/g, ',');
            // Remove last comma
            scriptText = scriptText.replace(/,+$/, '');
            // Parse as json string
            settings = JSON.parse("{\n" + scriptText + "\n}");
        }
    };

    // Add interactive events
    var addEvents = function () {
        var i;

        // Get keyentry elements
        var toggleVisibility = svgElement.querySelectorAll('g[id$="_keyentry"]');
        for (i = 0; i < toggleVisibility.length; i++) {
            // ------- Remove inline events
            toggleVisibility[i].removeAttribute('onclick');
            // -------

            // Add keyentry event to toggle visibility
            toggleVisibility[i].addEventListener('click', key.bind(null, toggleVisibility[i].getAttribute('id'), null));
        }

        // ------- Remove inline events from bounding box
        var boundingBox = svgElement.querySelector('rect[onclick^="gnuplot_svg.toggleCoordBox"]');
        if (boundingBox) {
            boundingBox.removeAttribute('onclick');
            boundingBox.removeAttribute('onmousemove');
        }
        // ------- Remove inline events from canvas
        var canvas = svgElement.getElementById('gnuplot_canvas');
        if (canvas) {
            canvas.removeAttribute('onclick');
            canvas.removeAttribute('onmousemove');
        }
        // -------

        // Get grid image
        var toggleGrid = svgElement.querySelector('image[onclick^="gnuplot_svg.toggleGrid"]');
        if (toggleGrid) {
            // ------- Remove inline events
            toggleGrid.removeAttribute('onclick');
            // -------

            // Add Toggle grid image event
            toggleGrid.addEventListener('click', function (evt) {
                grid();
                evt.preventDefault();
                evt.stopPropagation();
            });
        }

        // Get hypertexts
        var hyperText = svgElement.querySelectorAll('g[onmousemove^="gnuplot_svg.showHypertext"]');

        // Set view element variables
        if (hyperText.length) {
            popoverContainer.element = svgElement.getElementById('hypertextbox');
            popoverText.element = svgElement.getElementById('hypertext');
            popoverImage.element = svgElement.getElementById('hyperimage');
            popoverImage.defaultWidth = popoverImage.element.getAttribute('width');
            popoverImage.defaultHeight = popoverImage.element.getAttribute('height');
        }

        for (i = 0; i < hyperText.length; i++) {
            // Get text from attr uggly way, svg has empty title element
            var text = hyperText[i].getAttribute('onmousemove').substr(31).slice(0, -2);

            // ------- Remove inline events
            hyperText[i].removeAttribute('onmousemove');
            hyperText[i].removeAttribute('onmouseout');
            // -------

            // Add event
            hyperText[i].addEventListener('mousemove', popover.bind(null, text, true));
            hyperText[i].addEventListener('mouseout', popover.bind(null, null, false));
        }

        // Toggle coordinates visibility on left click on boundingBox element
        svgElement.addEventListener('click', function (evt) {
            if (!drag.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                coordinate();
                setCoordinateLabel(evt);
            }
        });

        // Save move start position, enable drag after delay
        svgElement.addEventListener('mousedown', function (evt) {

            drag.offset = { 'x': evt.clientX, 'y': evt.clientY };

            // Delay for moving, so not move accidentally if only click
            drag.timeout = setTimeout(function () {
                drag.enabled = true;
            }, 250);

            // Cancel draggable
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Disable drag
        svgElement.addEventListener('mouseup', function (evt) {
            drag.enabled = false;
            clearTimeout(drag.timeout);
        });

        // Mouse move
        svgElement.addEventListener('mousemove', function (evt) {

            // Drag svg element
            if (evt.buttons == 1 && drag.enabled) {

                // Position change
                drag.change.x = evt.clientX - drag.offset.x;
                drag.change.y = evt.clientY - drag.offset.y;

                // Set current mouse position
                drag.offset.x = evt.clientX;
                drag.offset.y = evt.clientY;

                // Convert to svg position
                drag.change.matrixTransform(svgElement.getScreenCTM().inverse());

                var viewBoxValues = getViewBox();

                viewBoxValues[0] -= drag.change.x;
                viewBoxValues[1] -= drag.change.y;

                setViewBox(viewBoxValues);
            }

            // View coordinates on mousemove over svg element
            if (coordinateText.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                setCoordinateLabel(evt);
            }

        });

        // Zoom with wheel
        svgElement.addEventListener('wheel', function (evt) {
            // x or y scroll zoom both axels
            var delta = Math.max(-1, Math.min(1, (evt.deltaY || evt.deltaX)));

            if (delta > 0) {
                setViewBox(zoom('in'));
            }
            else {
                setViewBox(zoom('out'));
            }

            // Disable scroll the entire webpage
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Reset on right click or hold tap
        svgElement.addEventListener('contextmenu', function (evt) {

            setViewBox(viewBoxResetValue);

            // Disable native context menu
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Keyboard actions, old svg version not support key events so must listen window
        window.addEventListener('keydown', function (evt) {

            // Not capture event from inputs
            // body = svg inline in page, svg = plain svg file, window = delegated events to object
            if (evt.target.nodeName != 'BODY' && evt.target.nodeName != 'svg' && evt.target != window) {
                return true;
            }

            var viewBoxValues = [];

            switch (evt.key) {
                // Move, Edge sends without Arrow word
                case 'ArrowLeft':
                case 'Left':
                case 'ArrowRight':
                case 'Right':
                case 'ArrowUp':
                case 'Up':
                case 'ArrowDown':
                case 'Down':
                    viewBoxValues = pan(evt.key.replace('Arrow', '').toLowerCase());
                    break;
                // Zoom in
                case '+':
                case 'Add':
                    viewBoxValues = zoom('in');
                    break;
                // Zoom out
                case '-':
                case 'Subtract':
                    viewBoxValues = zoom('out');
                    break;
                // Reset
                case 'Home':
                    viewBoxValues = viewBoxResetValue;
                    break;
                // Toggle grid
                case '#':
                    grid();
                    break;
            }

            if (viewBoxValues.length) {
                setViewBox(viewBoxValues);
            }
        });
    };

    // Get svg viewbox details
    var getViewBox = function () {
        var viewBoxValues = svgElement.getAttribute('viewBox').split(' ');
        viewBoxValues[0] = parseFloat(viewBoxValues[0]);
        viewBoxValues[1] = parseFloat(viewBoxValues[1]);
        viewBoxValues[2] = parseFloat(viewBoxValues[2]);
        viewBoxValues[3] = parseFloat(viewBoxValues[3]);
        return viewBoxValues;
    };

    // Set svg viewbox details
    var setViewBox = function (viewBoxValues) {
        svgElement.setAttribute('viewBox', viewBoxValues.join(' '));
    };

    // Set coordinate label position and text
    var setCoordinateLabel = function (evt) {
        var position = convertDOMToSVG({ 'x': evt.clientX, 'y': evt.clientY });

        // Set coordinate label position
        coordinateText.element.setAttribute('x', position.x);
        coordinateText.element.setAttribute('y', position.y);

        // Convert svg position to plot coordinates
        var plotcoord = convertSVGToPlot(position);

        // Parse label to view
        var label = parseCoordinateLabel(plotcoord);

        // Set coordinate label text
        coordinateText.element.textContent = label.x + ' ' + label.y;
    };

    // Convert position DOM to SVG
    var convertDOMToSVG = function (position) {
        point.x = position.x;
        point.y = position.y;
        return point.matrixTransform(svgElement.getScreenCTM().inverse());
    };

    // Convert position SVG to Plot
    var convertSVGToPlot = function (position) {
        var plotcoord = {};
        var plotx = position.x - settings.plot_xmin;
        var ploty = position.y - settings.plot_ybot;
        var x, y;

        if (settings.plot_logaxis_x !== 0) {
            x = Math.log(settings.plot_axis_xmax)
                - Math.log(settings.plot_axis_xmin);
            x = x * (plotx / (settings.plot_xmax - settings.plot_xmin))
                + Math.log(settings.plot_axis_xmin);
            x = Math.exp(x);
        } else {
            x = settings.plot_axis_xmin + (plotx / (settings.plot_xmax - settings.plot_xmin)) * (settings.plot_axis_xmax - settings.plot_axis_xmin);
        }

        if (settings.plot_logaxis_y !== 0) {
            y = Math.log(settings.plot_axis_ymax)
                - Math.log(settings.plot_axis_ymin);
            y = y * (ploty / (settings.plot_ytop - settings.plot_ybot))
                + Math.log(settings.plot_axis_ymin);
            y = Math.exp(y);
        } else {
            y = settings.plot_axis_ymin + (ploty / (settings.plot_ytop - settings.plot_ybot)) * (settings.plot_axis_ymax - settings.plot_axis_ymin);
        }

        plotcoord.x = x;
        plotcoord.y = y;
        return plotcoord;
    };

    // Parse plot x/y values to label
    var parseCoordinateLabel = function (plotcoord) {
        var label = { 'x': 0, 'y': 0 };

        if (settings.plot_timeaxis_x == 'DMS' || settings.plot_timeaxis_y == 'DMS') {
            if (settings.plot_timeaxis_x == 'DMS') {
                label.x = convertToDMS(plotcoord.x);
            }
            else {
                label.x = plotcoord.x.toFixed(2);
            }

            if (settings.plot_timeaxis_y == 'DMS') {
                label.y = convertToDMS(plotcoord.y);
            }
            else {
                label.y = plotcoord.y.toFixed(2);
            }

        } else if (settings.polar_mode) {
            polar = convertToPolar(plotcoord.x, plotcoord.y);
            label.x = 'ang= ' + polar.ang.toPrecision(4);
            label.y = 'R= ' + polar.r.toPrecision(4);

        } else if (settings.plot_timeaxis_x == 'Date') {
            axisDate.setTime(1000 * plotcoord.x);
            var year = axisDate.getUTCFullYear();
            var month = axisDate.getUTCMonth();
            var date = axisDate.getUTCDate();
            label.x = (' ' + date).slice(-2) + '/' + ('0' + (month + 1)).slice(-2) + '/' + year;
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'Time') {
            axisDate.setTime(1000 * plotcoord.x);
            var hour = axisDate.getUTCHours();
            var minute = axisDate.getUTCMinutes();
            var second = axisDate.getUTCSeconds();
            label.x = ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2) + ':' + ('0' + second).slice(-2);
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'DateTime') {
            axisDate.setTime(1000 * plotcoord.x);
            label.x = axisDate.toUTCString();
            label.y = plotcoord.y.toFixed(2);
        } else {
            label.x = plotcoord.x.toFixed(2);
            label.y = plotcoord.y.toFixed(2);
        }

        return label;
    };

    // Convert position to Polar
    var convertToPolar = function (x, y) {
        polar = {};
        var phi, r;
        phi = Math.atan2(y, x);
        if (settings.plot_logaxis_r) {
            r = Math.exp((x / Math.cos(phi) + Math.log(settings.plot_axis_rmin) / Math.LN10) * Math.LN10);
        }
        else if (settings.plot_axis_rmin > settings.plot_axis_rmax) {
            r = settings.plot_axis_rmin - x / Math.cos(phi);
        } else {
            r = settings.plot_axis_rmin + x / Math.cos(phi);
        }
        phi = phi * (180 / Math.PI);
        if (settings.polar_sense < 0) {
            phi = -phi;
        }
        if (settings.polar_theta0 !== undefined) {
            phi = phi + settings.polar_theta0;
        }
        if (phi > 180) { phi = phi - 360; }
        polar.r = r;
        polar.ang = phi;
        return polar;
    };

    // Convert position to DMS
    var convertToDMS = function (x) {
        var dms = { d: 0, m: 0, s: 0 };
        var deg = Math.abs(x);
        dms.d = Math.floor(deg);
        dms.m = Math.floor((deg - dms.d) * 60);
        dms.s = Math.floor((deg - dms.d) * 3600 - dms.m * 60);
        fmt = ((x < 0) ? '-' : ' ') + dms.d.toFixed(0) + '°' + dms.m.toFixed(0) + '"' + dms.s.toFixed(0) + "'";
        return fmt;
    };

    // Set popover text to show
    var setPopoverText = function (content) {

        // Minimum length
        popoverText.width = popoverText.defaultWidth;

        // Remove old texts
        while (null !== popoverText.element.firstChild) {
            popoverText.element.removeChild(popoverText.element.firstChild);
        }

        var lines = content.split(/\n|\\n/g);

        // Single line
        if (lines.length <= 1) {
            popoverText.element.textContent = content;
            popoverText.width = popoverText.element.getComputedTextLength() + 8;
        }
        // Multiple lines
        else {
            var lineWidth = 0;
            var tspanElement;

            for (var l = 0; l < lines.length; l++) {
                tspanElement = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
                // Y relative position
                if (l > 0) {
                    tspanElement.setAttribute('dy', popoverText.defaultHeight);
                }
                // Append text
                tspanElement.appendChild(document.createTextNode(lines[l]));
                popoverText.element.appendChild(tspanElement);

                // Max line width
                lineWidth = tspanElement.getComputedTextLength() + 8;
                if (popoverText.width < lineWidth) {
                    popoverText.width = lineWidth;
                }
            }
        }

        // Box Height
        popoverText.height = 2 + popoverText.defaultHeight * lines.length;
        popoverContainer.element.setAttribute('height', popoverText.height);

        // Box Width
        popoverContainer.element.setAttribute('width', popoverText.width);
    };

    // Set popover image to show
    var setPopoverImage = function (content) {

        // Set default image size
        popoverImage.width = popoverImage.defaultWidth;
        popoverImage.height = popoverImage.defaultHeight;

        // Pick up height and width from image(width,height):name
        if (content.charAt(5) == '(') {
            popoverImage.width = parseInt(content.slice(6));
            popoverImage.height = parseInt(content.slice(content.indexOf(',') + 1));
        }

        popoverImage.element.setAttribute('width', popoverImage.width);
        popoverImage.element.setAttribute('height', popoverImage.height);
        popoverImage.element.setAttribute('preserveAspectRatio', 'none');

        // attach image URL as a link
        content = content.slice(content.indexOf(':') + 1);
        popoverImage.element.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', content);
    };

    // Show popover text in given position
    var showPopoverText = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverText.height + 16 > domRect.y) {
            position.y = domRect.y - popoverText.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverText.width + 14 > domRect.x) {
            position.x = domRect.x - popoverText.width - 14;
        }

        // Change Box position
        popoverContainer.element.setAttribute('x', position.x + 10);
        popoverContainer.element.setAttribute('y', position.y + 4);
        popoverContainer.element.setAttribute('visibility', 'visible');

        // Change Text position
        popoverText.element.setAttribute('x', position.x + 14);
        popoverText.element.setAttribute('y', position.y + 18);
        popoverText.element.setAttribute('visibility', 'visible');

        // Change multiline text position
        var tspan = popoverText.element.querySelectorAll('tspan');
        for (var i = 0; i < tspan.length; i++) {
            tspan[i].setAttribute('x', position.x + 14);
        }

        // Font properties
        if (settings.hypertext_fontFamily != null)
            popoverText.element.setAttribute('font-family', settings.hypertext_fontFamily);
        if (settings.hypertext_fontStyle != null)
            popoverText.element.setAttribute('font-style', settings.hypertext_fontStyle);
        if (settings.hypertext_fontWeight != null)
            popoverText.element.setAttribute('font-weight', settings.hypertext_fontWeight);
        if (settings.hypertext_fontSize > 0)
            popoverText.element.setAttribute('font-size', settings.hypertext_fontSize);
    };

    // Show popover image in given position
    var showPopoverImage = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverImage.height + 16 > domRect.y) {
            position.y = domRect.y - popoverImage.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverImage.width + 14 > domRect.x) {
            position.x = domRect.x - popoverImage.width - 14;
        }

        popoverImage.element.setAttribute('x', position.x);
        popoverImage.element.setAttribute('y', position.y);
        popoverImage.element.setAttribute('visibility', 'visible');
    };

    // Hide all popovers
    var hidePopover = function () {
        popoverContainer.element.setAttribute('visibility', 'hidden');
        popoverText.element.setAttribute('visibility', 'hidden');
        popoverImage.element.setAttribute('visibility', 'hidden');
    };

    // Zoom svg inside viewbox
    var zoom = function (direction) {
        var zoomRate = 1.1;
        var viewBoxValues = getViewBox();

        var widthBefore = viewBoxValues[2];
        var heightBefore = viewBoxValues[3];

        if (direction == 'in') {
            viewBoxValues[2] /= zoomRate;
            viewBoxValues[3] /= zoomRate;
            // Pan to center
            viewBoxValues[0] -= (viewBoxValues[2] - widthBefore) / 2;
            viewBoxValues[1] -= (viewBoxValues[3] - heightBefore) / 2;
        }
        else if (direction == 'out') {
            viewBoxValues[2] *= zoomRate;
            viewBoxValues[3] *= zoomRate;
            // Pan to center
            viewBoxValues[0] += (widthBefore - viewBoxValues[2]) / 2;
            viewBoxValues[1] += (heightBefore - viewBoxValues[3]) / 2;
        }

        return viewBoxValues;
    };

    // Pan svg inside viewbox
    var pan = function (direction) {
        var panRate = 10;
        var viewBoxValues = getViewBox();

        switch (direction) {
            case 'left':
                viewBoxValues[0] += panRate;
                break;
            case 'right':
                viewBoxValues[0] -= panRate;
                break;
            case 'up':
                viewBoxValues[1] += panRate;
                break;
            case 'down':
                viewBoxValues[1] -= panRate;
                break;
        }

        return viewBoxValues;
    };

    // Toggle key and chart on/off or set manually to wanted
    var key = function (id, set, evt) {
        var visibility = null;

        // Chart element
        var chartElement = svgElement.getElementById(id.replace('_keyentry', ''));
        if (chartElement) {
            // Set on/off
            if (set === true || set === false) {
                visibility = set ? 'visible' : 'hidden';
            }
            // Toggle
            else {
                visibility = chartElement.getAttribute('visibility') == 'hidden' ? 'visible' : 'hidden';
            }
            chartElement.setAttribute('visibility', visibility);
        }

        // Key element
        var keyElement = svgElement.getElementById(id);
        if (keyElement && visibility) {
            keyElement.setAttribute('style', visibility == 'hidden' ? 'filter:url(#greybox)' : 'none');
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Toggle coordinates on/off or set manually to wanted
    var coordinate = function (set) {
        if (coordinateText.element) {
            // Set on/off
            if (set === true || set === false) {
                coordinateText.enabled = set;
            }
            // Toggle
            else {
                coordinateText.enabled = coordinateText.element.getAttribute('visibility') == 'hidden' ? true : false;
            }
            coordinateText.element.setAttribute('visibility', coordinateText.enabled ? 'visible' : 'hidden');
        }
    };

    // Toggle grid on/off or set manually to wanted
    var grid = function (set) {
        var grid = svgElement.getElementsByClassName('gridline');

        // Set on/off
        if (set === true || set === false) {
            gridEnabled = set;
        }
        // Toggle, get state from first element
        else if (grid.length) {
            gridEnabled = grid[0].getAttribute('visibility') == 'hidden' ? true : false;
        }

        for (i = 0; i < grid.length; i++) {
            grid[i].setAttribute('visibility', gridEnabled ? 'visible' : 'hidden');
        }
    };

    // Show popover text or image
    var popover = function (content, set, evt) {

        // Hide popover
        if (set === false) {
            hidePopover();

            if (evt !== undefined) {
                evt.stopPropagation();
                evt.preventDefault();
            }

            return;
        }

        var position = null;

        // Change content only if changed
        if (popoverContainer.content != content) {

            // Set current text
            popoverContainer.content = content;

            popoverImage.content = '';
            popoverText.content = content;

            // If text starts with image: process it as an xlinked bitmap
            if (content.substring(0, 5) == 'image') {
                var lines = content.split(/\n|\\n/g);
                var nameindex = lines[0].indexOf(':');
                if (nameindex > 0) {
                    popoverImage.content = lines.shift();
                    popoverText.content = '';

                    // Additional text lines
                    if (lines !== undefined && lines.length > 0) {
                        popoverText.content = lines.join('\n');
                    }
                }
            }

            // Set image content
            if(popoverImage.content){
                setPopoverImage(popoverImage.content);
            }

            // Set text content
            if(popoverText.content){
                setPopoverText(popoverText.content);
            }
        }

        if(popoverImage.content || popoverText.content){
            position = convertDOMToSVG({'x': evt.clientX, 'y': evt.clientY });
        }

        // Show popover image on mouse position
        if(popoverImage.content){
            showPopoverImage(position);
        }

        // Show popover on mouse position
        if(popoverText.content){
            showPopoverText(position);
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Parse plot settings
    parseSettings();

    // viewBox initial position and size
    viewBoxResetValue = getViewBox();

    // Set focusable for event focusing, not work on old svg version
    svgElement.setAttribute('focusable', true);

    // Disable native draggable
    svgElement.setAttribute('draggable', false);

    // Add events
    addEvents();

    // Return functions to outside use
    return {
        zoom: function (direction) {
            setViewBox(zoom(direction));
            return this;
        },
        pan: function (direction) {
            setViewBox(pan(direction));
            return this;
        },
        reset: function () {
            setViewBox(viewBoxResetValue);
            return this;
        },
        key: function (id, set) {
            key(id, set);
            return this;
        },
        coordinate: function (set) {
            coordinate(set);
            return this;
        },
        grid: function (set) {
            grid(set);
            return this;
        }
    };
};

// Old init function, remove when svg inline events removed
gnuplot_svg.Init = function() { };
]]>
</script>

<!-- Tie mousing to entire bounding box of the plot -->
<rect x="0" y="0" width="960" height="480" fill="#ffffff" stroke="black" stroke-width="1"
onclick="gnuplot_svg.toggleCoordBox(evt)"  onmousemove="gnuplot_svg.moveCoordBox(evt)"/>

<!-- Also track mouse when it is on a plot element -->
<g id="gnuplot_canvas" onclick="gnuplot_svg.toggleCoordBox(evt)" onmousemove="gnuplot_svg.moveCoordBox(evt)">

<defs>

	<circle id='gpDot' r='0.5' stroke-width='0.5' stroke='currentColor'/>
	<path id='gpPt0' stroke-width='0.222' stroke='currentColor' d='M-1,0 h2 M0,-1 v2'/>
	<path id='gpPt1' stroke-width='0.222' stroke='currentColor' d='M-1,-1 L1,1 M1,-1 L-1,1'/>
	<path id='gpPt2' stroke-width='0.222' stroke='currentColor' d='M-1,0 L1,0 M0,-1 L0,1 M-1,-1 L1,1 M-1,1 L1,-1'/>
	<rect id='gpPt3' stroke-width='0.222' stroke='currentColor' x='-1' y='-1' width='2' height='2'/>
	<rect id='gpPt4' stroke-width='0.222' stroke='currentColor' fill='currentColor' x='-1' y='-1' width='2' height='2'/>
	<circle id='gpPt5' stroke-width='0.222' stroke='currentColor' cx='0' cy='0' r='1'/>
	<use xlink:href='#gpPt5' id='gpPt6' fill='currentColor' stroke='none'/>
	<path id='gpPt7' stroke-width='0.222' stroke='currentColor' d='M0,-1.33 L-1.33,0.67 L1.33,0.67 z'/>
	<use xlink:href='#gpPt7' id='gpPt8' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt7' id='gpPt9' stroke='currentColor' transform='rotate(180)'/>
	<use xlink:href='#gpPt9' id='gpPt10' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt3' id='gpPt11' stroke='currentColor' transform='rotate(45)'/>
	<use xlink:href='#gpPt11' id='gpPt12' fill='currentColor' stroke='none'/>
	<path id='gpPt13' stroke-width='0.222' stroke='currentColor' d='M0,1.330 L1.265,0.411 L0.782,-1.067 L-0.782,-1.076 L-1.265,0.411 z'/>
	<use xlink:href='#gpPt13' id='gpPt14' fill='currentColor' stroke='none'/>
	<filter id='textbox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='white' flood-opacity='1' result='bgnd'/>
	  <feComposite in='SourceGraphic' in2='bgnd' operator='atop'/>
	</filter>
	<filter id='greybox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='lightgrey' flood-opacity='1' result='grey'/>
	  <feComposite in='SourceGraphic' in2='grey' operator='atop'/>
	</filter>
</defs>
<g fill="none" color="white" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,404.40 L63.53,404.40 M774.19,404.40 L765.19,404.40  '/>	<g transform="translate(46.14,408.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.74</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,371.46 L63.53,371.46 M774.19,371.46 L765.19,371.46  '/>	<g transform="translate(46.14,375.36)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.75</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,338.52 L63.53,338.52 M774.19,338.52 L765.19,338.52  '/>	<g transform="translate(46.14,342.42)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.76</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,305.57 L63.53,305.57 M774.19,305.57 L765.19,305.57  '/>	<g transform="translate(46.14,309.47)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.77</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,272.63 L63.53,272.63 M774.19,272.63 L765.19,272.63  '/>	<g transform="translate(46.14,276.53)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.78</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,239.69 L63.53,239.69 M774.19,239.69 L765.19,239.69  '/>	<g transform="translate(46.14,243.59)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.79</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,206.75 L63.53,206.75 M774.19,206.75 L765.19,206.75  '/>	<g transform="translate(46.14,210.65)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.80</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,173.81 L63.53,173.81 M774.19,173.81 L765.19,173.81  '/>	<g transform="translate(46.14,177.71)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.81</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,140.86 L63.53,140.86 M774.19,140.86 L765.19,140.86  '/>	<g transform="translate(46.14,144.76)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.82</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,107.92 L63.53,107.92 M774.19,107.92 L765.19,107.92  '/>	<g transform="translate(46.14,111.82)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.83</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,74.98 L63.53,74.98 M774.19,74.98 L765.19,74.98  '/>	<g transform="translate(46.14,78.88)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.84</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M62.27,404.40 L62.27,395.40  '/>	<g transform="translate(62.27,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.01</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M139.65,404.40 L139.65,395.40  '/>	<g transform="translate(139.65,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M217.03,404.40 L217.03,395.40  '/>	<g transform="translate(217.03,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M294.42,404.40 L294.42,395.40  '/>	<g transform="translate(294.42,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.04</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M371.80,404.40 L371.80,395.40  '/>	<g transform="translate(371.80,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.05</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M449.18,404.40 L449.18,395.40  '/>	<g transform="translate(449.18,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.06</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M526.57,404.40 L526.57,395.40  '/>	<g transform="translate(526.57,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.07</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M603.95,404.40 L603.95,395.40  '/>	<g transform="translate(603.95,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.08</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M681.33,404.40 L681.33,395.40  '/>	<g transform="translate(681.33,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.09</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M758.71,404.40 L758.71,395.40  '/>	<g transform="translate(758.71,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.1</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M758.71,74.98 L758.71,83.98  '/>	<g transform="translate(762.61,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >1e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M532.06,74.98 L532.06,83.98  '/>	<g transform="translate(535.96,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >2e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M431.66,74.98 L431.66,83.98  '/>	<g transform="translate(435.56,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >3e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M371.80,74.98 L371.80,83.98  '/>	<g transform="translate(375.70,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >4e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M330.95,74.98 L330.95,83.98  '/>	<g transform="translate(334.85,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >5e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M229.59,74.98 L229.59,83.98  '/>	<g transform="translate(233.49,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >1e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M157.92,74.98 L157.92,83.98  '/>	<g transform="translate(161.82,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >2e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M126.17,74.98 L126.17,83.98  '/>	<g transform="translate(130.07,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >3e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M107.24,74.98 L107.24,83.98  '/>	<g transform="translate(111.14,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >4e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M94.32,74.98 L94.32,83.98  '/>	<g transform="translate(98.22,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >5e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M62.27,74.98 L62.27,83.98  '/>	<g transform="translate(66.17,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >1e+04</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,74.98 L54.53,404.40 L774.19,404.40 L774.19,74.98 L54.53,74.98 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(10.18,239.69) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(782.59,239.69) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,453.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >K</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">-1/2</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,18.63)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >K</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
	<g id="gnuplot_plot_1" ><title>mean ± 1σ</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<g transform="translate(859.31,225.59)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >mean ± 1</tspan><tspan font-family="Arial" >σ</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(  0, 158, 115)'  d='M808.36,221.69 L850.92,221.69 M808.36,217.19 L808.36,226.19 M850.92,217.19 L850.92,226.19  '/>	</g>
	<path stroke='rgb(  0, 158, 115)'  d='M758.71,315.39 L758.71,173.56 M754.21,315.39 L763.21,315.39 M754.21,173.56 L763.21,173.56 M532.06,297.34 L532.06,205.77
		M527.56,297.34 L536.56,297.34 M527.56,205.77 L536.56,205.77 M431.66,295.71 L431.66,215.31 M427.16,295.71 L436.16,295.71
		M427.16,215.31 L436.16,215.31 M371.80,294.58 L371.80,219.84 M367.30,294.58 L376.30,294.58 M367.30,219.84 L376.30,219.84
		M330.95,287.40 L330.95,220.03 M326.45,287.40 L335.45,287.40 M326.45,220.03 L335.45,220.03 M300.80,287.89 L300.80,221.88
		M296.30,287.89 L305.30,287.89 M296.30,221.88 L305.30,221.88 M277.36,285.21 L277.36,226.40 M272.86,285.21 L281.86,285.21
		M272.86,226.40 L281.86,226.40 M258.47,286.14 L258.47,227.78 M253.97,286.14 L262.97,286.14 M253.97,227.78 L262.97,227.78
		M242.83,286.85 L242.83,229.95 M238.33,286.85 L247.33,286.85 M238.33,229.95 L247.33,229.95 M229.59,283.34 L229.59,231.49
		M225.09,283.34 L234.09,283.34 M225.09,231.49 L234.09,231.49 M218.20,282.90 L218.20,233.20 M213.70,282.90 L222.70,282.90
		M213.70,233.20 L222.70,233.20 M208.27,282.17 L208.27,233.45 M203.77,282.17 L212.77,282.17 M203.77,233.45 L212.77,233.45
		M199.51,281.42 L199.51,234.99 M195.01,281.42 L204.01,281.42 M195.01,234.99 L204.01,234.99 M191.70,278.84 L191.70,236.95
		M187.20,278.84 L196.20,278.84 M187.20,236.95 L196.20,236.95 M184.69,278.45 L184.69,237.37 M180.19,278.45 L189.19,278.45
		M180.19,237.37 L189.19,237.37 M178.34,277.80 L178.34,238.51 M173.84,277.80 L182.84,277.80 M173.84,238.51 L182.84,238.51
		M172.57,276.69 L172.57,239.15 M168.07,276.69 L177.07,276.69 M168.07,239.15 L177.07,239.15 M167.28,275.68 L167.28,239.59
		M162.78,275.68 L171.78,275.68 M162.78,239.59 L171.78,239.59 M162.41,274.55 L162.41,239.16 M157.91,274.55 L166.91,274.55
		M157.91,239.16 L166.91,239.16 M157.92,273.63 L157.92,239.36 M153.42,273.63 L162.42,273.63 M153.42,239.36 L162.42,239.36
		M153.75,273.18 L153.75,240.10 M149.25,273.18 L158.25,273.18 M149.25,240.10 L158.25,240.10 M149.87,273.38 L149.87,240.41
		M145.37,273.38 L154.37,273.38 M145.37,240.41 L154.37,240.41 M146.24,272.61 L146.24,240.40 M141.74,272.61 L150.74,272.61
		M141.74,240.40 L150.74,240.40 M142.84,272.22 L142.84,240.95 M138.34,272.22 L147.34,272.22 M138.34,240.95 L147.34,240.95
		M139.65,271.54 L139.65,240.37 M135.15,271.54 L144.15,271.54 M135.15,240.37 L144.15,240.37 M136.65,271.40 L136.65,240.90
		M132.15,271.40 L141.15,271.40 M132.15,240.90 L141.15,240.90 M133.81,270.90 L133.81,241.96 M129.31,270.90 L138.31,270.90
		M129.31,241.96 L138.31,241.96 M131.13,270.28 L131.13,242.59 M126.63,270.28 L135.63,270.28 M126.63,242.59 L135.63,242.59
		M128.58,270.63 L128.58,242.85 M124.08,270.63 L133.08,270.63 M124.08,242.85 L133.08,242.85 M126.17,270.02 L126.17,242.50
		M121.67,270.02 L130.67,270.02 M121.67,242.50 L130.67,242.50 M123.87,270.21 L123.87,242.83 M119.37,270.21 L128.37,270.21
		M119.37,242.83 L128.37,242.83 M121.68,270.03 L121.68,242.75 M117.18,270.03 L126.18,270.03 M117.18,242.75 L126.18,242.75
		M119.59,269.91 L119.59,242.40 M115.09,269.91 L124.09,269.91 M115.09,242.40 L124.09,242.40 M117.60,269.80 L117.60,242.47
		M113.10,269.80 L122.10,269.80 M113.10,242.47 L122.10,242.47 M115.69,269.27 L115.69,242.78 M111.19,269.27 L120.19,269.27
		M111.19,242.78 L120.19,242.78 M113.86,268.65 L113.86,242.88 M109.36,268.65 L118.36,268.65 M109.36,242.88 L118.36,242.88
		M112.10,268.73 L112.10,242.88 M107.60,268.73 L116.60,268.73 M107.60,242.88 L116.60,242.88 M110.42,269.00 L110.42,242.85
		M105.92,269.00 L114.92,269.00 M105.92,242.85 L114.92,242.85 M108.80,268.90 L108.80,243.21 M104.30,268.90 L113.30,268.90
		M104.30,243.21 L113.30,243.21 M107.24,268.46 L107.24,243.10 M102.74,268.46 L111.74,268.46 M102.74,243.10 L111.74,243.10
		M105.74,268.44 L105.74,243.54 M101.24,268.44 L110.24,268.44 M101.24,243.54 L110.24,243.54 M104.29,268.34 L104.29,244.38
		M99.79,268.34 L108.79,268.34 M99.79,244.38 L108.79,244.38 M102.89,268.53 L102.89,244.35 M98.39,268.53 L107.39,268.53
		M98.39,244.35 L107.39,244.35 M101.54,268.47 L101.54,245.02 M97.04,268.47 L106.04,268.47 M97.04,245.02 L106.04,245.02
		M100.24,268.24 L100.24,245.13 M95.74,268.24 L104.74,268.24 M95.74,245.13 L104.74,245.13 M98.98,268.00 L98.98,245.11
		M94.48,268.00 L103.48,268.00 M94.48,245.11 L103.48,245.11 M97.76,268.04 L97.76,245.46 M93.26,268.04 L102.26,268.04
		M93.26,245.46 L102.26,245.46 M96.58,267.86 L96.58,245.32 M92.08,267.86 L101.08,267.86 M92.08,245.32 L101.08,245.32
		M95.43,267.72 L95.43,245.25 M90.93,267.72 L99.93,267.72 M90.93,245.25 L99.93,245.25 M94.32,267.59 L94.32,245.31
		M89.82,267.59 L98.82,267.59 M89.82,245.31 L98.82,245.31 M93.24,267.50 L93.24,244.94 M88.74,267.50 L97.74,267.50
		M88.74,244.94 L97.74,244.94 M92.20,267.59 L92.20,245.11 M87.70,267.59 L96.70,267.59 M87.70,245.11 L96.70,245.11
		M91.18,267.53 L91.18,245.35 M86.68,267.53 L95.68,267.53 M86.68,245.35 L95.68,245.35 M90.19,267.55 L90.19,245.36
		M85.69,267.55 L94.69,267.55 M85.69,245.36 L94.69,245.36 M89.23,267.35 L89.23,245.11 M84.73,267.35 L93.73,267.35
		M84.73,245.11 L93.73,245.11 M88.29,267.45 L88.29,245.11 M83.79,267.45 L92.79,267.45 M83.79,245.11 L92.79,245.11
		M87.38,267.23 L87.38,245.26 M82.88,267.23 L91.88,267.23 M82.88,245.26 L91.88,245.26 M86.49,267.12 L86.49,245.37
		M81.99,267.12 L90.99,267.12 M81.99,245.37 L90.99,245.37 M85.63,266.85 L85.63,245.55 M81.13,266.85 L90.13,266.85
		M81.13,245.55 L90.13,245.55 M84.79,266.54 L84.79,245.78 M80.29,266.54 L89.29,266.54 M80.29,245.78 L89.29,245.78
		M83.96,266.64 L83.96,246.02 M79.46,266.64 L88.46,266.64 M79.46,246.02 L88.46,246.02 M83.16,266.65 L83.16,245.85
		M78.66,266.65 L87.66,266.65 M78.66,245.85 L87.66,245.85 M82.38,266.31 L82.38,245.88 M77.88,266.31 L86.88,266.31
		M77.88,245.88 L86.88,245.88 M81.61,266.18 L81.61,246.22 M77.11,266.18 L86.11,266.18 M77.11,246.22 L86.11,246.22
		M80.87,266.08 L80.87,246.17 M76.37,266.08 L85.37,266.08 M76.37,246.17 L85.37,246.17 M80.14,265.93 L80.14,245.89
		M75.64,265.93 L84.64,265.93 M75.64,245.89 L84.64,245.89 M79.42,265.76 L79.42,245.74 M74.92,265.76 L83.92,265.76
		M74.92,245.74 L83.92,245.74 M78.73,265.56 L78.73,246.00 M74.23,265.56 L83.23,265.56 M74.23,246.00 L83.23,246.00
		M78.04,265.61 L78.04,246.06 M73.54,265.61 L82.54,265.61 M73.54,246.06 L82.54,246.06 M77.38,265.75 L77.38,246.07
		M72.88,265.75 L81.88,265.75 M72.88,246.07 L81.88,246.07 M76.72,265.77 L76.72,246.03 M72.22,265.77 L81.22,265.77
		M72.22,246.03 L81.22,246.03 M76.08,265.68 L76.08,246.08 M71.58,265.68 L80.58,265.68 M71.58,246.08 L80.58,246.08
		M75.46,265.54 L75.46,246.17 M70.96,265.54 L79.96,265.54 M70.96,246.17 L79.96,246.17 M74.84,265.38 L74.84,246.41
		M70.34,265.38 L79.34,265.38 M70.34,246.41 L79.34,246.41 M74.24,265.25 L74.24,246.58 M69.74,265.25 L78.74,265.25
		M69.74,246.58 L78.74,246.58 M73.65,265.29 L73.65,246.54 M69.15,265.29 L78.15,265.29 M69.15,246.54 L78.15,246.54
		M73.07,265.23 L73.07,246.59 M68.57,265.23 L77.57,265.23 M68.57,246.59 L77.57,246.59 M72.50,265.17 L72.50,246.61
		M68.00,265.17 L77.00,265.17 M68.00,246.61 L77.00,246.61 M71.95,264.97 L71.95,246.84 M67.45,264.97 L76.45,264.97
		M67.45,246.84 L76.45,246.84 M71.40,264.83 L71.40,246.81 M66.90,264.83 L75.90,264.83 M66.90,246.81 L75.90,246.81
		M70.87,264.62 L70.87,246.76 M66.37,264.62 L75.37,264.62 M66.37,246.76 L75.37,246.76 M70.34,264.51 L70.34,246.60
		M65.84,264.51 L74.84,264.51 M65.84,246.60 L74.84,246.60 M69.82,264.22 L69.82,246.69 M65.32,264.22 L74.32,264.22
		M65.32,246.69 L74.32,246.69 M69.32,263.82 L69.32,246.73 M64.82,263.82 L73.82,263.82 M64.82,246.73 L73.82,246.73
		M68.82,263.80 L68.82,246.78 M64.32,263.80 L73.32,263.80 M64.32,246.78 L73.32,246.78 M68.33,263.71 L68.33,247.01
		M63.83,263.71 L72.83,263.71  '/>	<path stroke='rgb(  0, 158, 115)'  d='M63.83,247.01 L72.83,247.01 M67.85,263.54 L67.85,247.18 M63.35,263.54 L72.35,263.54 M63.35,247.18 L72.35,247.18
		M67.38,263.63 L67.38,247.28 M62.88,263.63 L71.88,263.63 M62.88,247.28 L71.88,247.28 M66.91,263.43 L66.91,247.39
		M62.41,263.43 L71.41,263.43 M62.41,247.39 L71.41,247.39 M66.45,263.51 L66.45,247.42 M61.95,263.51 L70.95,263.51
		M61.95,247.42 L70.95,247.42 M66.00,263.49 L66.00,247.49 M61.50,263.49 L70.50,263.49 M61.50,247.49 L70.50,247.49
		M65.56,263.33 L65.56,247.36 M61.06,263.33 L70.06,263.33 M61.06,247.36 L70.06,247.36 M65.13,263.19 L65.13,247.38
		M60.63,263.19 L69.63,263.19 M60.63,247.38 L69.63,247.38 M64.70,262.98 L64.70,247.39 M60.20,262.98 L69.20,262.98
		M60.20,247.39 L69.20,247.39 M64.28,263.13 L64.28,247.32 M59.78,263.13 L68.78,263.13 M59.78,247.32 L68.78,247.32
		M63.86,262.94 L63.86,247.34 M59.36,262.94 L68.36,262.94 M59.36,247.34 L68.36,247.34 M63.46,262.99 L63.46,247.54
		M58.96,262.99 L67.96,262.99 M58.96,247.54 L67.96,247.54 M63.05,262.95 L63.05,247.52 M58.55,262.95 L67.55,262.95
		M58.55,247.52 L67.55,247.52 M62.66,262.80 L62.66,247.71 M58.16,262.80 L67.16,262.80 M58.16,247.71 L67.16,247.71
		M62.27,262.78 L62.27,247.70 M57.77,262.78 L66.77,262.78 M57.77,247.70 L66.77,247.70  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<use xlink:href='#gpPt0' transform='translate(758.71,244.48) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(532.06,251.56) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(431.66,255.51) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(371.80,257.21) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(330.95,253.72) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(300.80,254.89) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(277.36,255.80) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(258.47,256.96) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(242.83,258.40) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(229.59,257.41) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(218.20,258.05) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(208.27,257.81) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(199.51,258.21) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(191.70,257.89) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(184.69,257.91) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(178.34,258.15) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(172.57,257.92) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(167.28,257.64) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(162.41,256.86) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(157.92,256.49) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(153.75,256.64) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(149.87,256.90) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(146.24,256.51) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(142.84,256.58) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(139.65,255.95) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(136.65,256.15) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(133.81,256.43) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(131.13,256.43) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(128.58,256.74) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(126.17,256.26) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(123.87,256.52) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(121.68,256.39) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(119.59,256.15) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(117.60,256.13) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(115.69,256.02) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(113.86,255.76) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(112.10,255.81) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(110.42,255.93) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(108.80,256.06) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(107.24,255.78) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(105.74,255.99) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(104.29,256.36) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(102.89,256.44) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(101.54,256.75) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(100.24,256.68) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(98.98,256.56) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(97.76,256.75) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(96.58,256.59) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(95.43,256.48) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(94.32,256.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(93.24,256.22) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(92.20,256.35) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(91.18,256.44) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(90.19,256.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(89.23,256.23) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(88.29,256.28) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(87.38,256.25) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(86.49,256.24) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(85.63,256.20) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(84.79,256.16) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(83.96,256.33) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(83.16,256.25) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(82.38,256.10) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(81.61,256.20) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(80.87,256.13) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(80.14,255.91) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(79.42,255.75) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(78.73,255.78) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(78.04,255.83) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(77.38,255.91) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(76.72,255.90) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(76.08,255.88) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(75.46,255.85) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(74.84,255.89) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(74.24,255.91) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(73.65,255.91) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(73.07,255.91) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(72.50,255.89) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(71.95,255.91) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(71.40,255.82) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(70.87,255.69) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(70.34,255.55) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(69.82,255.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(69.32,255.28) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(68.82,255.29) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(68.33,255.36) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(67.85,255.36) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(67.38,255.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(66.91,255.41) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(66.45,255.47) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(66.00,255.49) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(65.56,255.35) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(65.13,255.29) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(64.70,255.19) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(64.28,255.23) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(63.86,255.14) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(63.46,255.26) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(63.05,255.23) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(62.66,255.26) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(62.27,255.24) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<use xlink:href='#gpPt0' transform='translate(829.64,221.69) scale(4.50)' color='rgb(  0, 158, 115)'/>
	</g>
</g>
	</g>
	<g id="gnuplot_plot_2" ><title>maxval</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_2_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_2')">
	<g transform="translate(859.31,243.59)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >maxval</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(148,   0, 211)'  d='M808.36,239.69 L850.92,239.69  '/>	</g>
	<path stroke='rgb(148,   0, 211)'  d='M758.71,89.96 L532.06,136.82 L431.66,179.85 L371.80,162.98 L330.95,181.63 L300.80,167.91 L277.36,180.05 L258.47,180.54
		L242.83,190.36 L229.59,190.80 L218.20,203.12 L208.27,200.80 L199.51,207.41 L191.70,210.02 L184.69,217.83 L178.34,219.72
		L172.57,220.23 L167.28,221.62 L162.41,216.68 L157.92,217.33 L153.75,224.32 L149.87,223.08 L146.24,219.74 L142.84,223.36
		L139.65,222.72 L136.65,224.11 L133.81,224.40 L131.13,223.59 L128.58,224.54 L126.17,226.14 L123.87,223.11 L121.68,223.98
		L119.59,224.65 L117.60,223.73 L115.69,222.98 L113.86,223.50 L112.10,223.39 L110.42,223.55 L108.80,223.13 L107.24,221.83
		L105.74,220.43 L104.29,221.81 L102.89,221.80 L101.54,222.19 L100.24,226.26 L98.98,225.29 L97.76,225.69 L96.58,227.54
		L95.43,227.88 L94.32,228.61 L93.24,229.13 L92.20,230.43 L91.18,231.06 L90.19,231.83 L89.23,231.50 L88.29,230.85
		L87.38,230.61 L86.49,233.86 L85.63,234.77 L84.79,233.70 L83.96,233.79 L83.16,231.59 L82.38,231.92 L81.61,231.68
		L80.87,233.53 L80.14,233.73 L79.42,232.90 L78.73,233.47 L78.04,235.40 L77.38,235.83 L76.72,235.58 L76.08,233.52
		L75.46,232.92 L74.84,233.41 L74.24,235.84 L73.65,235.51 L73.07,235.18 L72.50,234.76 L71.95,235.20 L71.40,235.72
		L70.87,235.48 L70.34,236.04 L69.82,236.91 L69.32,236.80 L68.82,237.32 L68.33,237.56 L67.85,237.47 L67.38,237.50
		L66.91,238.13 L66.45,238.72 L66.00,238.99 L65.56,237.96 L65.13,237.57 L64.70,237.07 L64.28,236.36 L63.86,235.43
		L63.46,235.70 L63.05,237.36 L62.66,238.74 L62.27,238.72  '/></g>
	</g>
	<g id="gnuplot_plot_3" ><title>minval</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_3_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_3')">
	<g transform="translate(859.31,261.59)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >minval</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb( 86, 180, 233)'  d='M808.36,257.69 L850.92,257.69  '/>	</g>
	<path stroke='rgb( 86, 180, 233)'  d='M758.71,397.39 L532.06,385.52 L431.66,379.98 L371.80,340.35 L330.95,323.09 L300.80,319.13 L277.36,318.63 L258.47,328.39
		L242.83,323.95 L229.59,312.89 L218.20,316.46 L208.27,314.89 L199.51,308.30 L191.70,308.58 L184.69,307.38 L178.34,299.96
		L172.57,301.00 L167.28,298.64 L162.41,297.10 L157.92,297.34 L153.75,294.42 L149.87,291.06 L146.24,290.92 L142.84,287.79
		L139.65,288.70 L136.65,286.84 L133.81,285.15 L131.13,283.55 L128.58,286.90 L126.17,287.13 L123.87,286.66 L121.68,287.45
		L119.59,289.80 L117.60,288.66 L115.69,290.25 L113.86,285.85 L112.10,288.79 L110.42,287.38 L108.80,284.92 L107.24,285.41
		L105.74,284.16 L104.29,285.06 L102.89,285.15 L101.54,285.47 L100.24,286.90 L98.98,286.21 L97.76,284.23 L96.58,284.93
		L95.43,286.04 L94.32,284.98 L93.24,285.31 L92.20,285.25 L91.18,284.88 L90.19,286.60 L89.23,285.82 L88.29,284.15
		L87.38,282.53 L86.49,281.87 L85.63,281.30 L84.79,280.68 L83.96,280.17 L83.16,278.60 L82.38,277.91 L81.61,277.58
		L80.87,277.89 L80.14,277.46 L79.42,277.14 L78.73,276.91 L78.04,277.83 L77.38,278.60 L76.72,278.50 L76.08,278.48
		L75.46,277.56 L74.84,277.48 L74.24,278.29 L73.65,278.15 L73.07,278.23 L72.50,277.78 L71.95,277.34 L71.40,276.04
		L70.87,276.20 L70.34,275.72 L69.82,275.45 L69.32,273.85 L68.82,274.99 L68.33,275.88 L67.85,275.50 L67.38,275.15
		L66.91,274.54 L66.45,273.85 L66.00,273.89 L65.56,273.40 L65.13,272.88 L64.70,272.48 L64.28,273.89 L63.86,273.58
		L63.46,273.56 L63.05,273.79 L62.66,273.48 L62.27,273.55  '/></g>
	</g>
<g fill="none" color="white" stroke="rgb( 86, 180, 233)" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="black" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,74.98 L54.53,404.40 L774.19,404.40 L774.19,74.98 L54.53,74.98 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>

<script type="text/javascript"><![CDATA[
// plot boundaries and axis scaling information for mousing 
gnuplot_svg.plot_term_xmax = 960;
gnuplot_svg.plot_term_ymax = 480;
gnuplot_svg.plot_xmin = 54.5;
gnuplot_svg.plot_xmax = 774.2;
gnuplot_svg.plot_ybot = 404.4;
gnuplot_svg.plot_ytop = 75.0;
gnuplot_svg.plot_width = 719.7;
gnuplot_svg.plot_height = 329.4;
gnuplot_svg.plot_axis_xmin = 0.009;
gnuplot_svg.plot_axis_xmax = 0.102;
gnuplot_svg.plot_axis_ymin = 0.74;
gnuplot_svg.plot_axis_ymax = 0.84;
gnuplot_svg.polar_mode = false;
gnuplot_svg.plot_axis_x2min = 12345.7;
gnuplot_svg.plot_axis_x2max = 96.1169;
gnuplot_svg.plot_axis_y2min = "none";
gnuplot_svg.plot_logaxis_x = 0;
gnuplot_svg.plot_logaxis_y = 0;
gnuplot_svg.plot_timeaxis_x = "";
gnuplot_svg.plot_timeaxis_y = "";
gnuplot_svg.hypertext_fontSize = 0;
gnuplot_svg.hypertext_fontName = null;
gnuplot_svg.hypertext_fontStyle = null;
gnuplot_svg.hypertext_fontWeight = null;
]]>
</script>
</g>

  <text id="coord_text" text-anchor="start" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <rect id="hypertextbox" class="hypertextbox" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="16" visibility="hidden" />

  <text id="hypertext" class="hypertext" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <image id="hyperimage" class="hyperimage" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="200" width="300" visibility="hidden" />
</svg>

