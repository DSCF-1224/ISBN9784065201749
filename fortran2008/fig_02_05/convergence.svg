<?xml version="1.0" encoding="utf-8"  standalone="no"?>
<svg  onload="if (typeof(gnuplot_svg)!='undefined') gnuplot_svg.Init(evt)" 
 width="960" height="480"
 viewBox="0 0 960 480"
 xmlns="http://www.w3.org/2000/svg"
 xmlns:xlink="http://www.w3.org/1999/xlink"
>

<title>Gnuplot</title>
<desc>Produced by GNUPLOT 5.4 patchlevel 2 </desc>

<script type="text/javascript" > <![CDATA[
// From:	Marko Karjalainen <markokarjalainen@kolumbus.fi>
// Date:	27 Aug 2018
// Experimental gnuplot plugin for svg
//
// All svg elements on page get own gnuplot plugin attached by js, so no conflict with global variables.
//
// Javascript variables are read from second script tag and converted to json for import to plugin.
// Inline events are removed from xml and new ones are attached with addEventListener function.
// Inline events should be removed from xml and xml should have better id/class names to attach events from js.
//
// Improved mouseover text and image handling
//   content changed to xml only if it really changed and bouncing is calculated once.
//
// Convert functions are same as before, maybe renamed better.
//
// Javascript routines for mouse and keyboard interaction with
// SVG documents produced by gnuplot SVG terminal driver.

// TODO do not create inline events to svg and give id or classes for getting elements
// TODO make own svg layer x/y range sized for coordinates?

if (window) {
    window.addEventListener('load', function () {
        // Find svg elements
        var svg = document.querySelectorAll('svg');
        for (var i = 0; i < svg.length; i++) {
            // Init plugin
            if (!svg[i].gnuplot) {
                // Check if gnuplot generated svg
                if(svg[i].getElementById('gnuplot_canvas')){
                    svg[i].gnuplot = new gnuplot_svg(svg[i]);
                }
            }
        }
    });
}

gnuplot_svg = function (svgElement) {

    var version = '09 April 2019';

    var settings = {};

    var viewBoxResetValue = [];

    var drag = {
        'enabled': false,
        'offset': { 'x': 0, 'y': 0 },
        'change': svgElement.createSVGPoint(),
        'timeout': null
    };

    var coordinateText = {
        'enabled': false,
        'element': svgElement.getElementById('coord_text')
    };

    var popoverContainer = {
        'element': null,
        'content': null,
    };

    var popoverImage = {
        'element': null,
        'content': null,
        'width': 300,
        'height': 200,
        'defaultWidth': 300,
        'defaultHeight': 200,
    };

    var popoverText = {
        'element': null,
        'content': null,
        'width': 11,
        'height': 16,
        'defaultWidth': 11,
        'defaultHeight': 16,
    };

    var point = svgElement.createSVGPoint();

    var axisDate = new Date();

    var gridEnabled = false;

    // Get plot boundaries and axis scaling information for mousing from current object script tag
    // TODO add these to svg xml custom attribute for reading(json format)
    var parseSettings = function () {
        var script = svgElement.querySelectorAll('script');
        if (script && script[1]) {
            var scriptText = script[1].firstChild.nodeValue;
            // Remove inline comments
            scriptText = scriptText.replace(/^\s*\/\/.*\n/g, '');
            // Change prefix to "
            scriptText = scriptText.replace(/gnuplot_svg\./g, '"');
            // Change = to " :
            scriptText = scriptText.replace(/ = /g, '" : ');
            // Change line endings to comma
            scriptText = scriptText.replace(/;\n|\n/g, ',');
            // Remove last comma
            scriptText = scriptText.replace(/,+$/, '');
            // Parse as json string
            settings = JSON.parse("{\n" + scriptText + "\n}");
        }
    };

    // Add interactive events
    var addEvents = function () {
        var i;

        // Get keyentry elements
        var toggleVisibility = svgElement.querySelectorAll('g[id$="_keyentry"]');
        for (i = 0; i < toggleVisibility.length; i++) {
            // ------- Remove inline events
            toggleVisibility[i].removeAttribute('onclick');
            // -------

            // Add keyentry event to toggle visibility
            toggleVisibility[i].addEventListener('click', key.bind(null, toggleVisibility[i].getAttribute('id'), null));
        }

        // ------- Remove inline events from bounding box
        var boundingBox = svgElement.querySelector('rect[onclick^="gnuplot_svg.toggleCoordBox"]');
        if (boundingBox) {
            boundingBox.removeAttribute('onclick');
            boundingBox.removeAttribute('onmousemove');
        }
        // ------- Remove inline events from canvas
        var canvas = svgElement.getElementById('gnuplot_canvas');
        if (canvas) {
            canvas.removeAttribute('onclick');
            canvas.removeAttribute('onmousemove');
        }
        // -------

        // Get grid image
        var toggleGrid = svgElement.querySelector('image[onclick^="gnuplot_svg.toggleGrid"]');
        if (toggleGrid) {
            // ------- Remove inline events
            toggleGrid.removeAttribute('onclick');
            // -------

            // Add Toggle grid image event
            toggleGrid.addEventListener('click', function (evt) {
                grid();
                evt.preventDefault();
                evt.stopPropagation();
            });
        }

        // Get hypertexts
        var hyperText = svgElement.querySelectorAll('g[onmousemove^="gnuplot_svg.showHypertext"]');

        // Set view element variables
        if (hyperText.length) {
            popoverContainer.element = svgElement.getElementById('hypertextbox');
            popoverText.element = svgElement.getElementById('hypertext');
            popoverImage.element = svgElement.getElementById('hyperimage');
            popoverImage.defaultWidth = popoverImage.element.getAttribute('width');
            popoverImage.defaultHeight = popoverImage.element.getAttribute('height');
        }

        for (i = 0; i < hyperText.length; i++) {
            // Get text from attr uggly way, svg has empty title element
            var text = hyperText[i].getAttribute('onmousemove').substr(31).slice(0, -2);

            // ------- Remove inline events
            hyperText[i].removeAttribute('onmousemove');
            hyperText[i].removeAttribute('onmouseout');
            // -------

            // Add event
            hyperText[i].addEventListener('mousemove', popover.bind(null, text, true));
            hyperText[i].addEventListener('mouseout', popover.bind(null, null, false));
        }

        // Toggle coordinates visibility on left click on boundingBox element
        svgElement.addEventListener('click', function (evt) {
            if (!drag.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                coordinate();
                setCoordinateLabel(evt);
            }
        });

        // Save move start position, enable drag after delay
        svgElement.addEventListener('mousedown', function (evt) {

            drag.offset = { 'x': evt.clientX, 'y': evt.clientY };

            // Delay for moving, so not move accidentally if only click
            drag.timeout = setTimeout(function () {
                drag.enabled = true;
            }, 250);

            // Cancel draggable
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Disable drag
        svgElement.addEventListener('mouseup', function (evt) {
            drag.enabled = false;
            clearTimeout(drag.timeout);
        });

        // Mouse move
        svgElement.addEventListener('mousemove', function (evt) {

            // Drag svg element
            if (evt.buttons == 1 && drag.enabled) {

                // Position change
                drag.change.x = evt.clientX - drag.offset.x;
                drag.change.y = evt.clientY - drag.offset.y;

                // Set current mouse position
                drag.offset.x = evt.clientX;
                drag.offset.y = evt.clientY;

                // Convert to svg position
                drag.change.matrixTransform(svgElement.getScreenCTM().inverse());

                var viewBoxValues = getViewBox();

                viewBoxValues[0] -= drag.change.x;
                viewBoxValues[1] -= drag.change.y;

                setViewBox(viewBoxValues);
            }

            // View coordinates on mousemove over svg element
            if (coordinateText.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                setCoordinateLabel(evt);
            }

        });

        // Zoom with wheel
        svgElement.addEventListener('wheel', function (evt) {
            // x or y scroll zoom both axels
            var delta = Math.max(-1, Math.min(1, (evt.deltaY || evt.deltaX)));

            if (delta > 0) {
                setViewBox(zoom('in'));
            }
            else {
                setViewBox(zoom('out'));
            }

            // Disable scroll the entire webpage
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Reset on right click or hold tap
        svgElement.addEventListener('contextmenu', function (evt) {

            setViewBox(viewBoxResetValue);

            // Disable native context menu
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Keyboard actions, old svg version not support key events so must listen window
        window.addEventListener('keydown', function (evt) {

            // Not capture event from inputs
            // body = svg inline in page, svg = plain svg file, window = delegated events to object
            if (evt.target.nodeName != 'BODY' && evt.target.nodeName != 'svg' && evt.target != window) {
                return true;
            }

            var viewBoxValues = [];

            switch (evt.key) {
                // Move, Edge sends without Arrow word
                case 'ArrowLeft':
                case 'Left':
                case 'ArrowRight':
                case 'Right':
                case 'ArrowUp':
                case 'Up':
                case 'ArrowDown':
                case 'Down':
                    viewBoxValues = pan(evt.key.replace('Arrow', '').toLowerCase());
                    break;
                // Zoom in
                case '+':
                case 'Add':
                    viewBoxValues = zoom('in');
                    break;
                // Zoom out
                case '-':
                case 'Subtract':
                    viewBoxValues = zoom('out');
                    break;
                // Reset
                case 'Home':
                    viewBoxValues = viewBoxResetValue;
                    break;
                // Toggle grid
                case '#':
                    grid();
                    break;
            }

            if (viewBoxValues.length) {
                setViewBox(viewBoxValues);
            }
        });
    };

    // Get svg viewbox details
    var getViewBox = function () {
        var viewBoxValues = svgElement.getAttribute('viewBox').split(' ');
        viewBoxValues[0] = parseFloat(viewBoxValues[0]);
        viewBoxValues[1] = parseFloat(viewBoxValues[1]);
        viewBoxValues[2] = parseFloat(viewBoxValues[2]);
        viewBoxValues[3] = parseFloat(viewBoxValues[3]);
        return viewBoxValues;
    };

    // Set svg viewbox details
    var setViewBox = function (viewBoxValues) {
        svgElement.setAttribute('viewBox', viewBoxValues.join(' '));
    };

    // Set coordinate label position and text
    var setCoordinateLabel = function (evt) {
        var position = convertDOMToSVG({ 'x': evt.clientX, 'y': evt.clientY });

        // Set coordinate label position
        coordinateText.element.setAttribute('x', position.x);
        coordinateText.element.setAttribute('y', position.y);

        // Convert svg position to plot coordinates
        var plotcoord = convertSVGToPlot(position);

        // Parse label to view
        var label = parseCoordinateLabel(plotcoord);

        // Set coordinate label text
        coordinateText.element.textContent = label.x + ' ' + label.y;
    };

    // Convert position DOM to SVG
    var convertDOMToSVG = function (position) {
        point.x = position.x;
        point.y = position.y;
        return point.matrixTransform(svgElement.getScreenCTM().inverse());
    };

    // Convert position SVG to Plot
    var convertSVGToPlot = function (position) {
        var plotcoord = {};
        var plotx = position.x - settings.plot_xmin;
        var ploty = position.y - settings.plot_ybot;
        var x, y;

        if (settings.plot_logaxis_x !== 0) {
            x = Math.log(settings.plot_axis_xmax)
                - Math.log(settings.plot_axis_xmin);
            x = x * (plotx / (settings.plot_xmax - settings.plot_xmin))
                + Math.log(settings.plot_axis_xmin);
            x = Math.exp(x);
        } else {
            x = settings.plot_axis_xmin + (plotx / (settings.plot_xmax - settings.plot_xmin)) * (settings.plot_axis_xmax - settings.plot_axis_xmin);
        }

        if (settings.plot_logaxis_y !== 0) {
            y = Math.log(settings.plot_axis_ymax)
                - Math.log(settings.plot_axis_ymin);
            y = y * (ploty / (settings.plot_ytop - settings.plot_ybot))
                + Math.log(settings.plot_axis_ymin);
            y = Math.exp(y);
        } else {
            y = settings.plot_axis_ymin + (ploty / (settings.plot_ytop - settings.plot_ybot)) * (settings.plot_axis_ymax - settings.plot_axis_ymin);
        }

        plotcoord.x = x;
        plotcoord.y = y;
        return plotcoord;
    };

    // Parse plot x/y values to label
    var parseCoordinateLabel = function (plotcoord) {
        var label = { 'x': 0, 'y': 0 };

        if (settings.plot_timeaxis_x == 'DMS' || settings.plot_timeaxis_y == 'DMS') {
            if (settings.plot_timeaxis_x == 'DMS') {
                label.x = convertToDMS(plotcoord.x);
            }
            else {
                label.x = plotcoord.x.toFixed(2);
            }

            if (settings.plot_timeaxis_y == 'DMS') {
                label.y = convertToDMS(plotcoord.y);
            }
            else {
                label.y = plotcoord.y.toFixed(2);
            }

        } else if (settings.polar_mode) {
            polar = convertToPolar(plotcoord.x, plotcoord.y);
            label.x = 'ang= ' + polar.ang.toPrecision(4);
            label.y = 'R= ' + polar.r.toPrecision(4);

        } else if (settings.plot_timeaxis_x == 'Date') {
            axisDate.setTime(1000 * plotcoord.x);
            var year = axisDate.getUTCFullYear();
            var month = axisDate.getUTCMonth();
            var date = axisDate.getUTCDate();
            label.x = (' ' + date).slice(-2) + '/' + ('0' + (month + 1)).slice(-2) + '/' + year;
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'Time') {
            axisDate.setTime(1000 * plotcoord.x);
            var hour = axisDate.getUTCHours();
            var minute = axisDate.getUTCMinutes();
            var second = axisDate.getUTCSeconds();
            label.x = ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2) + ':' + ('0' + second).slice(-2);
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'DateTime') {
            axisDate.setTime(1000 * plotcoord.x);
            label.x = axisDate.toUTCString();
            label.y = plotcoord.y.toFixed(2);
        } else {
            label.x = plotcoord.x.toFixed(2);
            label.y = plotcoord.y.toFixed(2);
        }

        return label;
    };

    // Convert position to Polar
    var convertToPolar = function (x, y) {
        polar = {};
        var phi, r;
        phi = Math.atan2(y, x);
        if (settings.plot_logaxis_r) {
            r = Math.exp((x / Math.cos(phi) + Math.log(settings.plot_axis_rmin) / Math.LN10) * Math.LN10);
        }
        else if (settings.plot_axis_rmin > settings.plot_axis_rmax) {
            r = settings.plot_axis_rmin - x / Math.cos(phi);
        } else {
            r = settings.plot_axis_rmin + x / Math.cos(phi);
        }
        phi = phi * (180 / Math.PI);
        if (settings.polar_sense < 0) {
            phi = -phi;
        }
        if (settings.polar_theta0 !== undefined) {
            phi = phi + settings.polar_theta0;
        }
        if (phi > 180) { phi = phi - 360; }
        polar.r = r;
        polar.ang = phi;
        return polar;
    };

    // Convert position to DMS
    var convertToDMS = function (x) {
        var dms = { d: 0, m: 0, s: 0 };
        var deg = Math.abs(x);
        dms.d = Math.floor(deg);
        dms.m = Math.floor((deg - dms.d) * 60);
        dms.s = Math.floor((deg - dms.d) * 3600 - dms.m * 60);
        fmt = ((x < 0) ? '-' : ' ') + dms.d.toFixed(0) + '°' + dms.m.toFixed(0) + '"' + dms.s.toFixed(0) + "'";
        return fmt;
    };

    // Set popover text to show
    var setPopoverText = function (content) {

        // Minimum length
        popoverText.width = popoverText.defaultWidth;

        // Remove old texts
        while (null !== popoverText.element.firstChild) {
            popoverText.element.removeChild(popoverText.element.firstChild);
        }

        var lines = content.split(/\n|\\n/g);

        // Single line
        if (lines.length <= 1) {
            popoverText.element.textContent = content;
            popoverText.width = popoverText.element.getComputedTextLength() + 8;
        }
        // Multiple lines
        else {
            var lineWidth = 0;
            var tspanElement;

            for (var l = 0; l < lines.length; l++) {
                tspanElement = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
                // Y relative position
                if (l > 0) {
                    tspanElement.setAttribute('dy', popoverText.defaultHeight);
                }
                // Append text
                tspanElement.appendChild(document.createTextNode(lines[l]));
                popoverText.element.appendChild(tspanElement);

                // Max line width
                lineWidth = tspanElement.getComputedTextLength() + 8;
                if (popoverText.width < lineWidth) {
                    popoverText.width = lineWidth;
                }
            }
        }

        // Box Height
        popoverText.height = 2 + popoverText.defaultHeight * lines.length;
        popoverContainer.element.setAttribute('height', popoverText.height);

        // Box Width
        popoverContainer.element.setAttribute('width', popoverText.width);
    };

    // Set popover image to show
    var setPopoverImage = function (content) {

        // Set default image size
        popoverImage.width = popoverImage.defaultWidth;
        popoverImage.height = popoverImage.defaultHeight;

        // Pick up height and width from image(width,height):name
        if (content.charAt(5) == '(') {
            popoverImage.width = parseInt(content.slice(6));
            popoverImage.height = parseInt(content.slice(content.indexOf(',') + 1));
        }

        popoverImage.element.setAttribute('width', popoverImage.width);
        popoverImage.element.setAttribute('height', popoverImage.height);
        popoverImage.element.setAttribute('preserveAspectRatio', 'none');

        // attach image URL as a link
        content = content.slice(content.indexOf(':') + 1);
        popoverImage.element.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', content);
    };

    // Show popover text in given position
    var showPopoverText = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverText.height + 16 > domRect.y) {
            position.y = domRect.y - popoverText.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverText.width + 14 > domRect.x) {
            position.x = domRect.x - popoverText.width - 14;
        }

        // Change Box position
        popoverContainer.element.setAttribute('x', position.x + 10);
        popoverContainer.element.setAttribute('y', position.y + 4);
        popoverContainer.element.setAttribute('visibility', 'visible');

        // Change Text position
        popoverText.element.setAttribute('x', position.x + 14);
        popoverText.element.setAttribute('y', position.y + 18);
        popoverText.element.setAttribute('visibility', 'visible');

        // Change multiline text position
        var tspan = popoverText.element.querySelectorAll('tspan');
        for (var i = 0; i < tspan.length; i++) {
            tspan[i].setAttribute('x', position.x + 14);
        }

        // Font properties
        if (settings.hypertext_fontFamily != null)
            popoverText.element.setAttribute('font-family', settings.hypertext_fontFamily);
        if (settings.hypertext_fontStyle != null)
            popoverText.element.setAttribute('font-style', settings.hypertext_fontStyle);
        if (settings.hypertext_fontWeight != null)
            popoverText.element.setAttribute('font-weight', settings.hypertext_fontWeight);
        if (settings.hypertext_fontSize > 0)
            popoverText.element.setAttribute('font-size', settings.hypertext_fontSize);
    };

    // Show popover image in given position
    var showPopoverImage = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverImage.height + 16 > domRect.y) {
            position.y = domRect.y - popoverImage.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverImage.width + 14 > domRect.x) {
            position.x = domRect.x - popoverImage.width - 14;
        }

        popoverImage.element.setAttribute('x', position.x);
        popoverImage.element.setAttribute('y', position.y);
        popoverImage.element.setAttribute('visibility', 'visible');
    };

    // Hide all popovers
    var hidePopover = function () {
        popoverContainer.element.setAttribute('visibility', 'hidden');
        popoverText.element.setAttribute('visibility', 'hidden');
        popoverImage.element.setAttribute('visibility', 'hidden');
    };

    // Zoom svg inside viewbox
    var zoom = function (direction) {
        var zoomRate = 1.1;
        var viewBoxValues = getViewBox();

        var widthBefore = viewBoxValues[2];
        var heightBefore = viewBoxValues[3];

        if (direction == 'in') {
            viewBoxValues[2] /= zoomRate;
            viewBoxValues[3] /= zoomRate;
            // Pan to center
            viewBoxValues[0] -= (viewBoxValues[2] - widthBefore) / 2;
            viewBoxValues[1] -= (viewBoxValues[3] - heightBefore) / 2;
        }
        else if (direction == 'out') {
            viewBoxValues[2] *= zoomRate;
            viewBoxValues[3] *= zoomRate;
            // Pan to center
            viewBoxValues[0] += (widthBefore - viewBoxValues[2]) / 2;
            viewBoxValues[1] += (heightBefore - viewBoxValues[3]) / 2;
        }

        return viewBoxValues;
    };

    // Pan svg inside viewbox
    var pan = function (direction) {
        var panRate = 10;
        var viewBoxValues = getViewBox();

        switch (direction) {
            case 'left':
                viewBoxValues[0] += panRate;
                break;
            case 'right':
                viewBoxValues[0] -= panRate;
                break;
            case 'up':
                viewBoxValues[1] += panRate;
                break;
            case 'down':
                viewBoxValues[1] -= panRate;
                break;
        }

        return viewBoxValues;
    };

    // Toggle key and chart on/off or set manually to wanted
    var key = function (id, set, evt) {
        var visibility = null;

        // Chart element
        var chartElement = svgElement.getElementById(id.replace('_keyentry', ''));
        if (chartElement) {
            // Set on/off
            if (set === true || set === false) {
                visibility = set ? 'visible' : 'hidden';
            }
            // Toggle
            else {
                visibility = chartElement.getAttribute('visibility') == 'hidden' ? 'visible' : 'hidden';
            }
            chartElement.setAttribute('visibility', visibility);
        }

        // Key element
        var keyElement = svgElement.getElementById(id);
        if (keyElement && visibility) {
            keyElement.setAttribute('style', visibility == 'hidden' ? 'filter:url(#greybox)' : 'none');
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Toggle coordinates on/off or set manually to wanted
    var coordinate = function (set) {
        if (coordinateText.element) {
            // Set on/off
            if (set === true || set === false) {
                coordinateText.enabled = set;
            }
            // Toggle
            else {
                coordinateText.enabled = coordinateText.element.getAttribute('visibility') == 'hidden' ? true : false;
            }
            coordinateText.element.setAttribute('visibility', coordinateText.enabled ? 'visible' : 'hidden');
        }
    };

    // Toggle grid on/off or set manually to wanted
    var grid = function (set) {
        var grid = svgElement.getElementsByClassName('gridline');

        // Set on/off
        if (set === true || set === false) {
            gridEnabled = set;
        }
        // Toggle, get state from first element
        else if (grid.length) {
            gridEnabled = grid[0].getAttribute('visibility') == 'hidden' ? true : false;
        }

        for (i = 0; i < grid.length; i++) {
            grid[i].setAttribute('visibility', gridEnabled ? 'visible' : 'hidden');
        }
    };

    // Show popover text or image
    var popover = function (content, set, evt) {

        // Hide popover
        if (set === false) {
            hidePopover();

            if (evt !== undefined) {
                evt.stopPropagation();
                evt.preventDefault();
            }

            return;
        }

        var position = null;

        // Change content only if changed
        if (popoverContainer.content != content) {

            // Set current text
            popoverContainer.content = content;

            popoverImage.content = '';
            popoverText.content = content;

            // If text starts with image: process it as an xlinked bitmap
            if (content.substring(0, 5) == 'image') {
                var lines = content.split(/\n|\\n/g);
                var nameindex = lines[0].indexOf(':');
                if (nameindex > 0) {
                    popoverImage.content = lines.shift();
                    popoverText.content = '';

                    // Additional text lines
                    if (lines !== undefined && lines.length > 0) {
                        popoverText.content = lines.join('\n');
                    }
                }
            }

            // Set image content
            if(popoverImage.content){
                setPopoverImage(popoverImage.content);
            }

            // Set text content
            if(popoverText.content){
                setPopoverText(popoverText.content);
            }
        }

        if(popoverImage.content || popoverText.content){
            position = convertDOMToSVG({'x': evt.clientX, 'y': evt.clientY });
        }

        // Show popover image on mouse position
        if(popoverImage.content){
            showPopoverImage(position);
        }

        // Show popover on mouse position
        if(popoverText.content){
            showPopoverText(position);
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Parse plot settings
    parseSettings();

    // viewBox initial position and size
    viewBoxResetValue = getViewBox();

    // Set focusable for event focusing, not work on old svg version
    svgElement.setAttribute('focusable', true);

    // Disable native draggable
    svgElement.setAttribute('draggable', false);

    // Add events
    addEvents();

    // Return functions to outside use
    return {
        zoom: function (direction) {
            setViewBox(zoom(direction));
            return this;
        },
        pan: function (direction) {
            setViewBox(pan(direction));
            return this;
        },
        reset: function () {
            setViewBox(viewBoxResetValue);
            return this;
        },
        key: function (id, set) {
            key(id, set);
            return this;
        },
        coordinate: function (set) {
            coordinate(set);
            return this;
        },
        grid: function (set) {
            grid(set);
            return this;
        }
    };
};

// Old init function, remove when svg inline events removed
gnuplot_svg.Init = function() { };
]]>
</script>

<!-- Tie mousing to entire bounding box of the plot -->
<rect x="0" y="0" width="960" height="480" fill="#ffffff" stroke="black" stroke-width="1"
onclick="gnuplot_svg.toggleCoordBox(evt)"  onmousemove="gnuplot_svg.moveCoordBox(evt)"/>

<!-- Also track mouse when it is on a plot element -->
<g id="gnuplot_canvas" onclick="gnuplot_svg.toggleCoordBox(evt)" onmousemove="gnuplot_svg.moveCoordBox(evt)">

<defs>

	<circle id='gpDot' r='0.5' stroke-width='0.5' stroke='currentColor'/>
	<path id='gpPt0' stroke-width='0.222' stroke='currentColor' d='M-1,0 h2 M0,-1 v2'/>
	<path id='gpPt1' stroke-width='0.222' stroke='currentColor' d='M-1,-1 L1,1 M1,-1 L-1,1'/>
	<path id='gpPt2' stroke-width='0.222' stroke='currentColor' d='M-1,0 L1,0 M0,-1 L0,1 M-1,-1 L1,1 M-1,1 L1,-1'/>
	<rect id='gpPt3' stroke-width='0.222' stroke='currentColor' x='-1' y='-1' width='2' height='2'/>
	<rect id='gpPt4' stroke-width='0.222' stroke='currentColor' fill='currentColor' x='-1' y='-1' width='2' height='2'/>
	<circle id='gpPt5' stroke-width='0.222' stroke='currentColor' cx='0' cy='0' r='1'/>
	<use xlink:href='#gpPt5' id='gpPt6' fill='currentColor' stroke='none'/>
	<path id='gpPt7' stroke-width='0.222' stroke='currentColor' d='M0,-1.33 L-1.33,0.67 L1.33,0.67 z'/>
	<use xlink:href='#gpPt7' id='gpPt8' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt7' id='gpPt9' stroke='currentColor' transform='rotate(180)'/>
	<use xlink:href='#gpPt9' id='gpPt10' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt3' id='gpPt11' stroke='currentColor' transform='rotate(45)'/>
	<use xlink:href='#gpPt11' id='gpPt12' fill='currentColor' stroke='none'/>
	<path id='gpPt13' stroke-width='0.222' stroke='currentColor' d='M0,1.330 L1.265,0.411 L0.782,-1.067 L-0.782,-1.076 L-1.265,0.411 z'/>
	<use xlink:href='#gpPt13' id='gpPt14' fill='currentColor' stroke='none'/>
	<filter id='textbox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='white' flood-opacity='1' result='bgnd'/>
	  <feComposite in='SourceGraphic' in2='bgnd' operator='atop'/>
	</filter>
	<filter id='greybox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='lightgrey' flood-opacity='1' result='grey'/>
	  <feComposite in='SourceGraphic' in2='grey' operator='atop'/>
	</filter>
</defs>
<g fill="none" color="white" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,404.40 L63.53,404.40 M774.19,404.40 L765.19,404.40  '/>	<g transform="translate(46.14,408.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.68</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,371.46 L63.53,371.46 M774.19,371.46 L765.19,371.46  '/>	<g transform="translate(46.14,375.36)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.70</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,338.52 L63.53,338.52 M774.19,338.52 L765.19,338.52  '/>	<g transform="translate(46.14,342.42)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.72</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,305.57 L63.53,305.57 M774.19,305.57 L765.19,305.57  '/>	<g transform="translate(46.14,309.47)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.74</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,272.63 L63.53,272.63 M774.19,272.63 L765.19,272.63  '/>	<g transform="translate(46.14,276.53)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.76</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,239.69 L63.53,239.69 M774.19,239.69 L765.19,239.69  '/>	<g transform="translate(46.14,243.59)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.78</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,206.75 L63.53,206.75 M774.19,206.75 L765.19,206.75  '/>	<g transform="translate(46.14,210.65)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.80</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,173.81 L63.53,173.81 M774.19,173.81 L765.19,173.81  '/>	<g transform="translate(46.14,177.71)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.82</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,140.86 L63.53,140.86 M774.19,140.86 L765.19,140.86  '/>	<g transform="translate(46.14,144.76)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.84</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,107.92 L63.53,107.92 M774.19,107.92 L765.19,107.92  '/>	<g transform="translate(46.14,111.82)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.86</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,74.98 L63.53,74.98 M774.19,74.98 L765.19,74.98  '/>	<g transform="translate(46.14,78.88)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.88</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M62.27,404.40 L62.27,395.40  '/>	<g transform="translate(62.27,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.01</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M139.65,404.40 L139.65,395.40  '/>	<g transform="translate(139.65,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M217.03,404.40 L217.03,395.40  '/>	<g transform="translate(217.03,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M294.42,404.40 L294.42,395.40  '/>	<g transform="translate(294.42,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.04</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M371.80,404.40 L371.80,395.40  '/>	<g transform="translate(371.80,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.05</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M449.18,404.40 L449.18,395.40  '/>	<g transform="translate(449.18,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.06</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M526.57,404.40 L526.57,395.40  '/>	<g transform="translate(526.57,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.07</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M603.95,404.40 L603.95,395.40  '/>	<g transform="translate(603.95,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.08</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M681.33,404.40 L681.33,395.40  '/>	<g transform="translate(681.33,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.09</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M758.71,404.40 L758.71,395.40  '/>	<g transform="translate(758.71,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.1</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M758.71,74.98 L758.71,83.98  '/>	<g transform="translate(762.61,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >1e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M532.06,74.98 L532.06,83.98  '/>	<g transform="translate(535.96,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >2e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M431.66,74.98 L431.66,83.98  '/>	<g transform="translate(435.56,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >3e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M371.80,74.98 L371.80,83.98  '/>	<g transform="translate(375.70,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >4e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M330.95,74.98 L330.95,83.98  '/>	<g transform="translate(334.85,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >5e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M229.59,74.98 L229.59,83.98  '/>	<g transform="translate(233.49,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >1e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M157.92,74.98 L157.92,83.98  '/>	<g transform="translate(161.82,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >2e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M126.17,74.98 L126.17,83.98  '/>	<g transform="translate(130.07,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >3e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M107.24,74.98 L107.24,83.98  '/>	<g transform="translate(111.14,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >4e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M94.32,74.98 L94.32,83.98  '/>	<g transform="translate(98.22,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >5e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M62.27,74.98 L62.27,83.98  '/>	<g transform="translate(66.17,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >1e+04</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,74.98 L54.53,404.40 L774.19,404.40 L774.19,74.98 L54.53,74.98 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(10.18,239.69) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(782.59,239.69) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,453.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >K</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">-1/2</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,18.63)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >K</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
	<g id="gnuplot_plot_1" ><title>mean ± 1σ</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<g transform="translate(859.31,225.59)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >mean ± 1</tspan><tspan font-family="Arial" >σ</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(  0, 158, 115)'  d='M808.36,221.69 L850.92,221.69 M808.36,217.19 L808.36,226.19 M850.92,217.19 L850.92,226.19  '/>	</g>
	<path stroke='rgb(  0, 158, 115)'  d='M758.71,282.29 L758.71,166.79 M754.21,282.29 L763.21,282.29 M754.21,166.79 L763.21,166.79 M532.06,276.17 L532.06,183.93
		M527.56,276.17 L536.56,276.17 M527.56,183.93 L536.56,183.93 M431.66,268.98 L431.66,187.34 M427.16,268.98 L436.16,268.98
		M427.16,187.34 L436.16,187.34 M371.80,266.19 L371.80,195.73 M367.30,266.19 L376.30,266.19 M367.30,195.73 L376.30,195.73
		M330.95,263.10 L330.95,197.71 M326.45,263.10 L335.45,263.10 M326.45,197.71 L335.45,197.71 M300.80,260.00 L300.80,201.87
		M296.30,260.00 L305.30,260.00 M296.30,201.87 L305.30,201.87 M277.36,257.17 L277.36,205.74 M272.86,257.17 L281.86,257.17
		M272.86,205.74 L281.86,205.74 M258.47,255.86 L258.47,207.75 M253.97,255.86 L262.97,255.86 M253.97,207.75 L262.97,207.75
		M242.83,254.82 L242.83,207.98 M238.33,254.82 L247.33,254.82 M238.33,207.98 L247.33,207.98 M229.59,253.91 L229.59,206.89
		M225.09,253.91 L234.09,253.91 M225.09,206.89 L234.09,206.89 M218.20,254.23 L218.20,207.81 M213.70,254.23 L222.70,254.23
		M213.70,207.81 L222.70,207.81 M208.27,253.10 L208.27,208.82 M203.77,253.10 L212.77,253.10 M203.77,208.82 L212.77,208.82
		M199.51,252.78 L199.51,208.53 M195.01,252.78 L204.01,252.78 M195.01,208.53 L204.01,208.53 M191.70,250.97 L191.70,210.90
		M187.20,250.97 L196.20,250.97 M187.20,210.90 L196.20,210.90 M184.69,249.95 L184.69,211.26 M180.19,249.95 L189.19,249.95
		M180.19,211.26 L189.19,211.26 M178.34,250.02 L178.34,212.15 M173.84,250.02 L182.84,250.02 M173.84,212.15 L182.84,212.15
		M172.57,249.18 L172.57,212.26 M168.07,249.18 L177.07,249.18 M168.07,212.26 L177.07,212.26 M167.28,247.62 L167.28,212.93
		M162.78,247.62 L171.78,247.62 M162.78,212.93 L171.78,212.93 M162.41,247.85 L162.41,213.26 M157.91,247.85 L166.91,247.85
		M157.91,213.26 L166.91,213.26 M157.92,246.85 L157.92,214.05 M153.42,246.85 L162.42,246.85 M153.42,214.05 L162.42,214.05
		M153.75,246.15 L153.75,215.14 M149.25,246.15 L158.25,246.15 M149.25,215.14 L158.25,215.14 M149.87,246.99 L149.87,216.52
		M145.37,246.99 L154.37,246.99 M145.37,216.52 L154.37,216.52 M146.24,246.63 L146.24,216.92 M141.74,246.63 L150.74,246.63
		M141.74,216.92 L150.74,216.92 M142.84,246.10 L142.84,217.45 M138.34,246.10 L147.34,246.10 M138.34,217.45 L147.34,217.45
		M139.65,246.06 L139.65,217.20 M135.15,246.06 L144.15,246.06 M135.15,217.20 L144.15,217.20 M136.65,246.41 L136.65,216.89
		M132.15,246.41 L141.15,246.41 M132.15,216.89 L141.15,216.89 M133.81,246.21 L133.81,217.20 M129.31,246.21 L138.31,246.21
		M129.31,217.20 L138.31,217.20 M131.13,246.00 L131.13,217.31 M126.63,246.00 L135.63,246.00 M126.63,217.31 L135.63,217.31
		M128.58,245.70 L128.58,217.36 M124.08,245.70 L133.08,245.70 M124.08,217.36 L133.08,217.36 M126.17,245.47 L126.17,218.24
		M121.67,245.47 L130.67,245.47 M121.67,218.24 L130.67,218.24 M123.87,245.36 L123.87,218.20 M119.37,245.36 L128.37,245.36
		M119.37,218.20 L128.37,218.20 M121.68,245.13 L121.68,218.67 M117.18,245.13 L126.18,245.13 M117.18,218.67 L126.18,218.67
		M119.59,244.47 L119.59,218.86 M115.09,244.47 L124.09,244.47 M115.09,218.86 L124.09,218.86 M117.60,244.21 L117.60,218.84
		M113.10,244.21 L122.10,244.21 M113.10,218.84 L122.10,218.84 M115.69,244.60 L115.69,218.69 M111.19,244.60 L120.19,244.60
		M111.19,218.69 L120.19,218.69 M113.86,244.19 L113.86,218.86 M109.36,244.19 L118.36,244.19 M109.36,218.86 L118.36,218.86
		M112.10,243.73 L112.10,218.96 M107.60,243.73 L116.60,243.73 M107.60,218.96 L116.60,218.96 M110.42,243.57 L110.42,219.14
		M105.92,243.57 L114.92,243.57 M105.92,219.14 L114.92,219.14 M108.80,243.50 L108.80,219.41 M104.30,243.50 L113.30,243.50
		M104.30,219.41 L113.30,219.41 M107.24,243.50 L107.24,219.74 M102.74,243.50 L111.74,243.50 M102.74,219.74 L111.74,219.74
		M105.74,243.12 L105.74,219.65 M101.24,243.12 L110.24,243.12 M101.24,219.65 L110.24,219.65 M104.29,242.67 L104.29,219.49
		M99.79,242.67 L108.79,242.67 M99.79,219.49 L108.79,219.49 M102.89,242.50 L102.89,219.65 M98.39,242.50 L107.39,242.50
		M98.39,219.65 L107.39,219.65 M101.54,242.54 L101.54,220.13 M97.04,242.54 L106.04,242.54 M97.04,220.13 L106.04,220.13
		M100.24,242.51 L100.24,220.37 M95.74,242.51 L104.74,242.51 M95.74,220.37 L104.74,220.37 M98.98,242.28 L98.98,220.27
		M94.48,242.28 L103.48,242.28 M94.48,220.27 L103.48,220.27 M97.76,241.93 L97.76,220.41 M93.26,241.93 L102.26,241.93
		M93.26,220.41 L102.26,220.41 M96.58,241.86 L96.58,220.48 M92.08,241.86 L101.08,241.86 M92.08,220.48 L101.08,220.48
		M95.43,241.59 L95.43,220.75 M90.93,241.59 L99.93,241.59 M90.93,220.75 L99.93,220.75 M94.32,241.37 L94.32,220.91
		M89.82,241.37 L98.82,241.37 M89.82,220.91 L98.82,220.91 M93.24,241.36 L93.24,220.94 M88.74,241.36 L97.74,241.36
		M88.74,220.94 L97.74,220.94 M92.20,240.92 L92.20,220.81 M87.70,240.92 L96.70,240.92 M87.70,220.81 L96.70,220.81
		M91.18,240.82 L91.18,221.22 M86.68,240.82 L95.68,240.82 M86.68,221.22 L95.68,221.22 M90.19,241.04 L90.19,221.27
		M85.69,241.04 L94.69,241.04 M85.69,221.27 L94.69,221.27 M89.23,241.00 L89.23,221.43 M84.73,241.00 L93.73,241.00
		M84.73,221.43 L93.73,221.43 M88.29,240.95 L88.29,221.62 M83.79,240.95 L92.79,240.95 M83.79,221.62 L92.79,221.62
		M87.38,240.87 L87.38,221.76 M82.88,240.87 L91.88,240.87 M82.88,221.76 L91.88,221.76 M86.49,240.79 L86.49,221.84
		M81.99,240.79 L90.99,240.79 M81.99,221.84 L90.99,221.84 M85.63,240.82 L85.63,222.07 M81.13,240.82 L90.13,240.82
		M81.13,222.07 L90.13,222.07 M84.79,240.95 L84.79,221.98 M80.29,240.95 L89.29,240.95 M80.29,221.98 L89.29,221.98
		M83.96,240.99 L83.96,222.03 M79.46,240.99 L88.46,240.99 M79.46,222.03 L88.46,222.03 M83.16,240.71 L83.16,222.08
		M78.66,240.71 L87.66,240.71 M78.66,222.08 L87.66,222.08 M82.38,240.68 L82.38,222.11 M77.88,240.68 L86.88,240.68
		M77.88,222.11 L86.88,222.11 M81.61,240.56 L81.61,222.13 M77.11,240.56 L86.11,240.56 M77.11,222.13 L86.11,222.13
		M80.87,240.34 L80.87,222.17 M76.37,240.34 L85.37,240.34 M76.37,222.17 L85.37,222.17 M80.14,240.27 L80.14,222.46
		M75.64,240.27 L84.64,240.27 M75.64,222.46 L84.64,222.46 M79.42,240.20 L79.42,222.49 M74.92,240.20 L83.92,240.20
		M74.92,222.49 L83.92,222.49 M78.73,240.32 L78.73,222.53 M74.23,240.32 L83.23,240.32 M74.23,222.53 L83.23,222.53
		M78.04,240.24 L78.04,222.70 M73.54,240.24 L82.54,240.24 M73.54,222.70 L82.54,222.70 M77.38,240.12 L77.38,222.96
		M72.88,240.12 L81.88,240.12 M72.88,222.96 L81.88,222.96 M76.72,239.84 L76.72,223.13 M72.22,239.84 L81.22,239.84
		M72.22,223.13 L81.22,223.13 M76.08,239.83 L76.08,223.10 M71.58,239.83 L80.58,239.83 M71.58,223.10 L80.58,223.10
		M75.46,239.83 L75.46,223.36 M70.96,239.83 L79.96,239.83 M70.96,223.36 L79.96,223.36 M74.84,239.70 L74.84,223.38
		M70.34,239.70 L79.34,239.70 M70.34,223.38 L79.34,223.38 M74.24,239.58 L74.24,223.53 M69.74,239.58 L78.74,239.58
		M69.74,223.53 L78.74,223.53 M73.65,239.47 L73.65,223.55 M69.15,239.47 L78.15,239.47 M69.15,223.55 L78.15,223.55
		M73.07,239.52 L73.07,223.64 M68.57,239.52 L77.57,239.52 M68.57,223.64 L77.57,223.64 M72.50,239.46 L72.50,223.71
		M68.00,239.46 L77.00,239.46 M68.00,223.71 L77.00,223.71 M71.95,239.24 L71.95,223.73 M67.45,239.24 L76.45,239.24
		M67.45,223.73 L76.45,223.73 M71.40,239.08 L71.40,224.03 M66.90,239.08 L75.90,239.08 M66.90,224.03 L75.90,224.03
		M70.87,238.81 L70.87,224.00 M66.37,238.81 L75.37,238.81 M66.37,224.00 L75.37,224.00 M70.34,238.73 L70.34,224.05
		M65.84,238.73 L74.84,238.73 M65.84,224.05 L74.84,224.05 M69.82,238.74 L69.82,224.09 M65.32,238.74 L74.32,238.74
		M65.32,224.09 L74.32,224.09 M69.32,238.75 L69.32,224.24 M64.82,238.75 L73.82,238.75 M64.82,224.24 L73.82,224.24
		M68.82,238.70 L68.82,224.24 M64.32,238.70 L73.32,238.70 M64.32,224.24 L73.32,224.24 M68.33,238.49 L68.33,224.11
		M63.83,238.49 L72.83,238.49  '/>	<path stroke='rgb(  0, 158, 115)'  d='M63.83,224.11 L72.83,224.11 M67.85,238.38 L67.85,224.13 M63.35,238.38 L72.35,238.38 M63.35,224.13 L72.35,224.13
		M67.38,238.34 L67.38,224.35 M62.88,238.34 L71.88,238.34 M62.88,224.35 L71.88,224.35 M66.91,238.29 L66.91,224.60
		M62.41,238.29 L71.41,238.29 M62.41,224.60 L71.41,224.60 M66.45,238.32 L66.45,224.61 M61.95,238.32 L70.95,238.32
		M61.95,224.61 L70.95,224.61 M66.00,238.14 L66.00,224.55 M61.50,238.14 L70.50,238.14 M61.50,224.55 L70.50,224.55
		M65.56,238.19 L65.56,224.75 M61.06,238.19 L70.06,238.19 M61.06,224.75 L70.06,224.75 M65.13,238.13 L65.13,224.75
		M60.63,238.13 L69.63,238.13 M60.63,224.75 L69.63,224.75 M64.70,238.04 L64.70,224.72 M60.20,238.04 L69.20,238.04
		M60.20,224.72 L69.20,224.72 M64.28,238.06 L64.28,224.83 M59.78,238.06 L68.78,238.06 M59.78,224.83 L68.78,224.83
		M63.86,238.03 L63.86,224.88 M59.36,238.03 L68.36,238.03 M59.36,224.88 L68.36,224.88 M63.46,237.95 L63.46,224.83
		M58.96,237.95 L67.96,237.95 M58.96,224.83 L67.96,224.83 M63.05,238.05 L63.05,224.76 M58.55,238.05 L67.55,238.05
		M58.55,224.76 L67.55,224.76 M62.66,238.04 L62.66,224.86 M58.16,238.04 L67.16,238.04 M58.16,224.86 L67.16,224.86
		M62.27,238.04 L62.27,224.81 M57.77,238.04 L66.77,238.04 M57.77,224.81 L66.77,224.81  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<use xlink:href='#gpPt0' transform='translate(758.71,224.54) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(532.06,230.05) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(431.66,228.16) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(371.80,230.96) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(330.95,230.40) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(300.80,230.93) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(277.36,231.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(258.47,231.80) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(242.83,231.40) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(229.59,230.40) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(218.20,231.02) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(208.27,230.96) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(199.51,230.66) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(191.70,230.94) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(184.69,230.61) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(178.34,231.08) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(172.57,230.72) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(167.28,230.27) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(162.41,230.55) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(157.92,230.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(153.75,230.65) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(149.87,231.75) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(146.24,231.78) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(142.84,231.78) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(139.65,231.63) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(136.65,231.65) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(133.81,231.70) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(131.13,231.65) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(128.58,231.53) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(126.17,231.86) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(123.87,231.78) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(121.68,231.90) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(119.59,231.66) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(117.60,231.53) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(115.69,231.65) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(113.86,231.53) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(112.10,231.34) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(110.42,231.35) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(108.80,231.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(107.24,231.62) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(105.74,231.39) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(104.29,231.08) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(102.89,231.07) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(101.54,231.33) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(100.24,231.44) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(98.98,231.28) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(97.76,231.17) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(96.58,231.17) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(95.43,231.17) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(94.32,231.14) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(93.24,231.15) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(92.20,230.86) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(91.18,231.02) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(90.19,231.16) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(89.23,231.21) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(88.29,231.28) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(87.38,231.32) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(86.49,231.31) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(85.63,231.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(84.79,231.46) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(83.96,231.51) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(83.16,231.40) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(82.38,231.39) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(81.61,231.34) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(80.87,231.25) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(80.14,231.36) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(79.42,231.35) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(78.73,231.43) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(78.04,231.47) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(77.38,231.54) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(76.72,231.48) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(76.08,231.46) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(75.46,231.60) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(74.84,231.54) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(74.24,231.55) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(73.65,231.51) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(73.07,231.58) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(72.50,231.58) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(71.95,231.48) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(71.40,231.55) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(70.87,231.41) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(70.34,231.39) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(69.82,231.41) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(69.32,231.49) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(68.82,231.47) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(68.33,231.30) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(67.85,231.25) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(67.38,231.35) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(66.91,231.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(66.45,231.46) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(66.00,231.35) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(65.56,231.47) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(65.13,231.44) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(64.70,231.38) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(64.28,231.44) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(63.86,231.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(63.46,231.39) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(63.05,231.40) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(62.66,231.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(62.27,231.43) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<use xlink:href='#gpPt0' transform='translate(829.64,221.69) scale(4.50)' color='rgb(  0, 158, 115)'/>
	</g>
</g>
	</g>
	<g id="gnuplot_plot_2" ><title>maxval</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_2_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_2')">
	<g transform="translate(859.31,243.59)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >maxval</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(148,   0, 211)'  d='M808.36,239.69 L850.92,239.69  '/>	</g>
	<path stroke='rgb(148,   0, 211)'  d='M758.71,91.45 L532.06,140.86 L431.66,129.88 L371.80,140.86 L330.95,154.04 L300.80,146.35 L277.36,157.34 L258.47,173.81
		L242.83,181.13 L229.59,180.39 L218.20,187.28 L208.27,188.90 L199.51,189.01 L191.70,190.28 L184.69,188.08 L178.34,188.22
		L172.57,181.56 L167.28,182.96 L162.41,188.54 L157.92,183.69 L153.75,182.43 L149.87,183.54 L146.24,189.56 L142.84,197.14
		L139.65,196.21 L136.65,195.98 L133.81,195.16 L131.13,199.69 L128.58,200.50 L126.17,203.45 L123.87,204.62 L121.68,204.69
		L119.59,204.75 L117.60,203.84 L115.69,201.57 L113.86,198.97 L112.10,198.29 L110.42,201.11 L108.80,201.26 L107.24,203.04
		L105.74,202.73 L104.29,200.87 L102.89,200.24 L101.54,199.26 L100.24,200.53 L98.98,201.02 L97.76,201.14 L96.58,199.89
		L95.43,202.38 L94.32,203.45 L93.24,202.87 L92.20,202.00 L91.18,202.71 L90.19,202.78 L89.23,203.75 L88.29,205.57
		L87.38,205.01 L86.49,205.90 L85.63,205.91 L84.79,206.75 L83.96,207.29 L83.16,204.89 L82.38,204.13 L81.61,204.69
		L80.87,205.48 L80.14,203.50 L79.42,202.08 L78.73,200.69 L78.04,201.97 L77.38,203.45 L76.72,202.34 L76.08,200.80
		L75.46,202.91 L74.84,203.63 L74.24,204.11 L73.65,203.71 L73.07,204.40 L72.50,205.27 L71.95,205.91 L71.40,207.57
		L70.87,207.97 L70.34,207.95 L69.82,207.94 L69.32,207.34 L68.82,207.91 L68.33,207.13 L67.85,206.75 L67.38,206.00
		L66.91,207.30 L66.45,207.30 L66.00,206.93 L65.56,206.75 L65.13,207.63 L64.70,208.50 L64.28,209.70 L63.86,210.18
		L63.46,211.33 L63.05,211.45 L62.66,211.91 L62.27,211.85  '/></g>
	</g>
	<g id="gnuplot_plot_3" ><title>minval</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_3_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_3')">
	<g transform="translate(859.31,261.59)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >minval</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb( 86, 180, 233)'  d='M808.36,257.69 L850.92,257.69  '/>	</g>
	<path stroke='rgb( 86, 180, 233)'  d='M758.71,387.93 L532.06,354.99 L431.66,311.06 L371.80,317.93 L330.95,305.57 L300.80,308.32 L277.36,310.28 L258.47,305.57
		L242.83,281.78 L229.59,279.22 L218.20,284.61 L208.27,286.36 L199.51,285.30 L191.70,282.04 L184.69,279.22 L178.34,281.90
		L172.57,283.29 L167.28,279.95 L162.41,281.30 L157.92,276.75 L153.75,273.42 L149.87,273.38 L146.24,273.35 L142.84,271.26
		L139.65,270.66 L136.65,270.73 L133.81,273.24 L131.13,269.69 L128.58,268.09 L126.17,266.59 L123.87,266.26 L121.68,266.97
		L119.59,264.15 L117.60,264.40 L115.69,265.10 L113.86,261.65 L112.10,259.72 L110.42,257.89 L108.80,259.12 L107.24,257.81
		L105.74,256.16 L104.29,254.98 L102.89,256.54 L101.54,255.04 L100.24,254.33 L98.98,254.01 L97.76,254.41 L96.58,255.13
		L95.43,254.14 L94.32,252.87 L93.24,250.67 L92.20,251.09 L91.18,252.43 L90.19,252.20 L89.23,251.07 L88.29,250.57
		L87.38,250.67 L86.49,252.19 L85.63,250.58 L84.79,253.69 L83.96,255.08 L83.16,254.83 L82.38,256.42 L81.61,256.42
		L80.87,256.92 L80.14,257.66 L79.42,258.13 L78.73,257.86 L78.04,257.59 L77.38,256.40 L76.72,255.47 L76.08,255.02
		L75.46,253.68 L74.84,252.82 L74.24,252.43 L73.65,251.61 L73.07,251.24 L72.50,250.46 L71.95,249.49 L71.40,248.95
		L70.87,249.25 L70.34,250.14 L69.82,250.01 L69.32,249.89 L68.82,251.12 L68.33,250.42 L67.85,251.43 L67.38,251.48
		L66.91,250.79 L66.45,250.30 L66.00,250.01 L65.56,249.36 L65.13,250.14 L64.70,249.85 L64.28,250.96 L63.86,249.98
		L63.46,249.54 L63.05,249.94 L62.66,250.34 L62.27,251.22  '/></g>
	</g>
<g fill="none" color="white" stroke="rgb( 86, 180, 233)" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="black" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,74.98 L54.53,404.40 L774.19,404.40 L774.19,74.98 L54.53,74.98 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>

<script type="text/javascript"><![CDATA[
// plot boundaries and axis scaling information for mousing 
gnuplot_svg.plot_term_xmax = 960;
gnuplot_svg.plot_term_ymax = 480;
gnuplot_svg.plot_xmin = 54.5;
gnuplot_svg.plot_xmax = 774.2;
gnuplot_svg.plot_ybot = 404.4;
gnuplot_svg.plot_ytop = 75.0;
gnuplot_svg.plot_width = 719.7;
gnuplot_svg.plot_height = 329.4;
gnuplot_svg.plot_axis_xmin = 0.009;
gnuplot_svg.plot_axis_xmax = 0.102;
gnuplot_svg.plot_axis_ymin = 0.68;
gnuplot_svg.plot_axis_ymax = 0.88;
gnuplot_svg.polar_mode = false;
gnuplot_svg.plot_axis_x2min = 12345.7;
gnuplot_svg.plot_axis_x2max = 96.1169;
gnuplot_svg.plot_axis_y2min = "none";
gnuplot_svg.plot_logaxis_x = 0;
gnuplot_svg.plot_logaxis_y = 0;
gnuplot_svg.plot_timeaxis_x = "";
gnuplot_svg.plot_timeaxis_y = "";
gnuplot_svg.hypertext_fontSize = 0;
gnuplot_svg.hypertext_fontName = null;
gnuplot_svg.hypertext_fontStyle = null;
gnuplot_svg.hypertext_fontWeight = null;
]]>
</script>
</g>

  <text id="coord_text" text-anchor="start" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <rect id="hypertextbox" class="hypertextbox" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="16" visibility="hidden" />

  <text id="hypertext" class="hypertext" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <image id="hyperimage" class="hyperimage" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="200" width="300" visibility="hidden" />
</svg>

