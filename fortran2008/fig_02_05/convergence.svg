<?xml version="1.0" encoding="utf-8"  standalone="no"?>
<svg  onload="if (typeof(gnuplot_svg)!='undefined') gnuplot_svg.Init(evt)" 
 width="960" height="480"
 viewBox="0 0 960 480"
 xmlns="http://www.w3.org/2000/svg"
 xmlns:xlink="http://www.w3.org/1999/xlink"
>

<title>Gnuplot</title>
<desc>Produced by GNUPLOT 5.4 patchlevel 2 </desc>

<script type="text/javascript" > <![CDATA[
// From:	Marko Karjalainen <markokarjalainen@kolumbus.fi>
// Date:	27 Aug 2018
// Experimental gnuplot plugin for svg
//
// All svg elements on page get own gnuplot plugin attached by js, so no conflict with global variables.
//
// Javascript variables are read from second script tag and converted to json for import to plugin.
// Inline events are removed from xml and new ones are attached with addEventListener function.
// Inline events should be removed from xml and xml should have better id/class names to attach events from js.
//
// Improved mouseover text and image handling
//   content changed to xml only if it really changed and bouncing is calculated once.
//
// Convert functions are same as before, maybe renamed better.
//
// Javascript routines for mouse and keyboard interaction with
// SVG documents produced by gnuplot SVG terminal driver.

// TODO do not create inline events to svg and give id or classes for getting elements
// TODO make own svg layer x/y range sized for coordinates?

if (window) {
    window.addEventListener('load', function () {
        // Find svg elements
        var svg = document.querySelectorAll('svg');
        for (var i = 0; i < svg.length; i++) {
            // Init plugin
            if (!svg[i].gnuplot) {
                // Check if gnuplot generated svg
                if(svg[i].getElementById('gnuplot_canvas')){
                    svg[i].gnuplot = new gnuplot_svg(svg[i]);
                }
            }
        }
    });
}

gnuplot_svg = function (svgElement) {

    var version = '09 April 2019';

    var settings = {};

    var viewBoxResetValue = [];

    var drag = {
        'enabled': false,
        'offset': { 'x': 0, 'y': 0 },
        'change': svgElement.createSVGPoint(),
        'timeout': null
    };

    var coordinateText = {
        'enabled': false,
        'element': svgElement.getElementById('coord_text')
    };

    var popoverContainer = {
        'element': null,
        'content': null,
    };

    var popoverImage = {
        'element': null,
        'content': null,
        'width': 300,
        'height': 200,
        'defaultWidth': 300,
        'defaultHeight': 200,
    };

    var popoverText = {
        'element': null,
        'content': null,
        'width': 11,
        'height': 16,
        'defaultWidth': 11,
        'defaultHeight': 16,
    };

    var point = svgElement.createSVGPoint();

    var axisDate = new Date();

    var gridEnabled = false;

    // Get plot boundaries and axis scaling information for mousing from current object script tag
    // TODO add these to svg xml custom attribute for reading(json format)
    var parseSettings = function () {
        var script = svgElement.querySelectorAll('script');
        if (script && script[1]) {
            var scriptText = script[1].firstChild.nodeValue;
            // Remove inline comments
            scriptText = scriptText.replace(/^\s*\/\/.*\n/g, '');
            // Change prefix to "
            scriptText = scriptText.replace(/gnuplot_svg\./g, '"');
            // Change = to " :
            scriptText = scriptText.replace(/ = /g, '" : ');
            // Change line endings to comma
            scriptText = scriptText.replace(/;\n|\n/g, ',');
            // Remove last comma
            scriptText = scriptText.replace(/,+$/, '');
            // Parse as json string
            settings = JSON.parse("{\n" + scriptText + "\n}");
        }
    };

    // Add interactive events
    var addEvents = function () {
        var i;

        // Get keyentry elements
        var toggleVisibility = svgElement.querySelectorAll('g[id$="_keyentry"]');
        for (i = 0; i < toggleVisibility.length; i++) {
            // ------- Remove inline events
            toggleVisibility[i].removeAttribute('onclick');
            // -------

            // Add keyentry event to toggle visibility
            toggleVisibility[i].addEventListener('click', key.bind(null, toggleVisibility[i].getAttribute('id'), null));
        }

        // ------- Remove inline events from bounding box
        var boundingBox = svgElement.querySelector('rect[onclick^="gnuplot_svg.toggleCoordBox"]');
        if (boundingBox) {
            boundingBox.removeAttribute('onclick');
            boundingBox.removeAttribute('onmousemove');
        }
        // ------- Remove inline events from canvas
        var canvas = svgElement.getElementById('gnuplot_canvas');
        if (canvas) {
            canvas.removeAttribute('onclick');
            canvas.removeAttribute('onmousemove');
        }
        // -------

        // Get grid image
        var toggleGrid = svgElement.querySelector('image[onclick^="gnuplot_svg.toggleGrid"]');
        if (toggleGrid) {
            // ------- Remove inline events
            toggleGrid.removeAttribute('onclick');
            // -------

            // Add Toggle grid image event
            toggleGrid.addEventListener('click', function (evt) {
                grid();
                evt.preventDefault();
                evt.stopPropagation();
            });
        }

        // Get hypertexts
        var hyperText = svgElement.querySelectorAll('g[onmousemove^="gnuplot_svg.showHypertext"]');

        // Set view element variables
        if (hyperText.length) {
            popoverContainer.element = svgElement.getElementById('hypertextbox');
            popoverText.element = svgElement.getElementById('hypertext');
            popoverImage.element = svgElement.getElementById('hyperimage');
            popoverImage.defaultWidth = popoverImage.element.getAttribute('width');
            popoverImage.defaultHeight = popoverImage.element.getAttribute('height');
        }

        for (i = 0; i < hyperText.length; i++) {
            // Get text from attr uggly way, svg has empty title element
            var text = hyperText[i].getAttribute('onmousemove').substr(31).slice(0, -2);

            // ------- Remove inline events
            hyperText[i].removeAttribute('onmousemove');
            hyperText[i].removeAttribute('onmouseout');
            // -------

            // Add event
            hyperText[i].addEventListener('mousemove', popover.bind(null, text, true));
            hyperText[i].addEventListener('mouseout', popover.bind(null, null, false));
        }

        // Toggle coordinates visibility on left click on boundingBox element
        svgElement.addEventListener('click', function (evt) {
            if (!drag.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                coordinate();
                setCoordinateLabel(evt);
            }
        });

        // Save move start position, enable drag after delay
        svgElement.addEventListener('mousedown', function (evt) {

            drag.offset = { 'x': evt.clientX, 'y': evt.clientY };

            // Delay for moving, so not move accidentally if only click
            drag.timeout = setTimeout(function () {
                drag.enabled = true;
            }, 250);

            // Cancel draggable
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Disable drag
        svgElement.addEventListener('mouseup', function (evt) {
            drag.enabled = false;
            clearTimeout(drag.timeout);
        });

        // Mouse move
        svgElement.addEventListener('mousemove', function (evt) {

            // Drag svg element
            if (evt.buttons == 1 && drag.enabled) {

                // Position change
                drag.change.x = evt.clientX - drag.offset.x;
                drag.change.y = evt.clientY - drag.offset.y;

                // Set current mouse position
                drag.offset.x = evt.clientX;
                drag.offset.y = evt.clientY;

                // Convert to svg position
                drag.change.matrixTransform(svgElement.getScreenCTM().inverse());

                var viewBoxValues = getViewBox();

                viewBoxValues[0] -= drag.change.x;
                viewBoxValues[1] -= drag.change.y;

                setViewBox(viewBoxValues);
            }

            // View coordinates on mousemove over svg element
            if (coordinateText.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                setCoordinateLabel(evt);
            }

        });

        // Zoom with wheel
        svgElement.addEventListener('wheel', function (evt) {
            // x or y scroll zoom both axels
            var delta = Math.max(-1, Math.min(1, (evt.deltaY || evt.deltaX)));

            if (delta > 0) {
                setViewBox(zoom('in'));
            }
            else {
                setViewBox(zoom('out'));
            }

            // Disable scroll the entire webpage
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Reset on right click or hold tap
        svgElement.addEventListener('contextmenu', function (evt) {

            setViewBox(viewBoxResetValue);

            // Disable native context menu
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Keyboard actions, old svg version not support key events so must listen window
        window.addEventListener('keydown', function (evt) {

            // Not capture event from inputs
            // body = svg inline in page, svg = plain svg file, window = delegated events to object
            if (evt.target.nodeName != 'BODY' && evt.target.nodeName != 'svg' && evt.target != window) {
                return true;
            }

            var viewBoxValues = [];

            switch (evt.key) {
                // Move, Edge sends without Arrow word
                case 'ArrowLeft':
                case 'Left':
                case 'ArrowRight':
                case 'Right':
                case 'ArrowUp':
                case 'Up':
                case 'ArrowDown':
                case 'Down':
                    viewBoxValues = pan(evt.key.replace('Arrow', '').toLowerCase());
                    break;
                // Zoom in
                case '+':
                case 'Add':
                    viewBoxValues = zoom('in');
                    break;
                // Zoom out
                case '-':
                case 'Subtract':
                    viewBoxValues = zoom('out');
                    break;
                // Reset
                case 'Home':
                    viewBoxValues = viewBoxResetValue;
                    break;
                // Toggle grid
                case '#':
                    grid();
                    break;
            }

            if (viewBoxValues.length) {
                setViewBox(viewBoxValues);
            }
        });
    };

    // Get svg viewbox details
    var getViewBox = function () {
        var viewBoxValues = svgElement.getAttribute('viewBox').split(' ');
        viewBoxValues[0] = parseFloat(viewBoxValues[0]);
        viewBoxValues[1] = parseFloat(viewBoxValues[1]);
        viewBoxValues[2] = parseFloat(viewBoxValues[2]);
        viewBoxValues[3] = parseFloat(viewBoxValues[3]);
        return viewBoxValues;
    };

    // Set svg viewbox details
    var setViewBox = function (viewBoxValues) {
        svgElement.setAttribute('viewBox', viewBoxValues.join(' '));
    };

    // Set coordinate label position and text
    var setCoordinateLabel = function (evt) {
        var position = convertDOMToSVG({ 'x': evt.clientX, 'y': evt.clientY });

        // Set coordinate label position
        coordinateText.element.setAttribute('x', position.x);
        coordinateText.element.setAttribute('y', position.y);

        // Convert svg position to plot coordinates
        var plotcoord = convertSVGToPlot(position);

        // Parse label to view
        var label = parseCoordinateLabel(plotcoord);

        // Set coordinate label text
        coordinateText.element.textContent = label.x + ' ' + label.y;
    };

    // Convert position DOM to SVG
    var convertDOMToSVG = function (position) {
        point.x = position.x;
        point.y = position.y;
        return point.matrixTransform(svgElement.getScreenCTM().inverse());
    };

    // Convert position SVG to Plot
    var convertSVGToPlot = function (position) {
        var plotcoord = {};
        var plotx = position.x - settings.plot_xmin;
        var ploty = position.y - settings.plot_ybot;
        var x, y;

        if (settings.plot_logaxis_x !== 0) {
            x = Math.log(settings.plot_axis_xmax)
                - Math.log(settings.plot_axis_xmin);
            x = x * (plotx / (settings.plot_xmax - settings.plot_xmin))
                + Math.log(settings.plot_axis_xmin);
            x = Math.exp(x);
        } else {
            x = settings.plot_axis_xmin + (plotx / (settings.plot_xmax - settings.plot_xmin)) * (settings.plot_axis_xmax - settings.plot_axis_xmin);
        }

        if (settings.plot_logaxis_y !== 0) {
            y = Math.log(settings.plot_axis_ymax)
                - Math.log(settings.plot_axis_ymin);
            y = y * (ploty / (settings.plot_ytop - settings.plot_ybot))
                + Math.log(settings.plot_axis_ymin);
            y = Math.exp(y);
        } else {
            y = settings.plot_axis_ymin + (ploty / (settings.plot_ytop - settings.plot_ybot)) * (settings.plot_axis_ymax - settings.plot_axis_ymin);
        }

        plotcoord.x = x;
        plotcoord.y = y;
        return plotcoord;
    };

    // Parse plot x/y values to label
    var parseCoordinateLabel = function (plotcoord) {
        var label = { 'x': 0, 'y': 0 };

        if (settings.plot_timeaxis_x == 'DMS' || settings.plot_timeaxis_y == 'DMS') {
            if (settings.plot_timeaxis_x == 'DMS') {
                label.x = convertToDMS(plotcoord.x);
            }
            else {
                label.x = plotcoord.x.toFixed(2);
            }

            if (settings.plot_timeaxis_y == 'DMS') {
                label.y = convertToDMS(plotcoord.y);
            }
            else {
                label.y = plotcoord.y.toFixed(2);
            }

        } else if (settings.polar_mode) {
            polar = convertToPolar(plotcoord.x, plotcoord.y);
            label.x = 'ang= ' + polar.ang.toPrecision(4);
            label.y = 'R= ' + polar.r.toPrecision(4);

        } else if (settings.plot_timeaxis_x == 'Date') {
            axisDate.setTime(1000 * plotcoord.x);
            var year = axisDate.getUTCFullYear();
            var month = axisDate.getUTCMonth();
            var date = axisDate.getUTCDate();
            label.x = (' ' + date).slice(-2) + '/' + ('0' + (month + 1)).slice(-2) + '/' + year;
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'Time') {
            axisDate.setTime(1000 * plotcoord.x);
            var hour = axisDate.getUTCHours();
            var minute = axisDate.getUTCMinutes();
            var second = axisDate.getUTCSeconds();
            label.x = ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2) + ':' + ('0' + second).slice(-2);
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'DateTime') {
            axisDate.setTime(1000 * plotcoord.x);
            label.x = axisDate.toUTCString();
            label.y = plotcoord.y.toFixed(2);
        } else {
            label.x = plotcoord.x.toFixed(2);
            label.y = plotcoord.y.toFixed(2);
        }

        return label;
    };

    // Convert position to Polar
    var convertToPolar = function (x, y) {
        polar = {};
        var phi, r;
        phi = Math.atan2(y, x);
        if (settings.plot_logaxis_r) {
            r = Math.exp((x / Math.cos(phi) + Math.log(settings.plot_axis_rmin) / Math.LN10) * Math.LN10);
        }
        else if (settings.plot_axis_rmin > settings.plot_axis_rmax) {
            r = settings.plot_axis_rmin - x / Math.cos(phi);
        } else {
            r = settings.plot_axis_rmin + x / Math.cos(phi);
        }
        phi = phi * (180 / Math.PI);
        if (settings.polar_sense < 0) {
            phi = -phi;
        }
        if (settings.polar_theta0 !== undefined) {
            phi = phi + settings.polar_theta0;
        }
        if (phi > 180) { phi = phi - 360; }
        polar.r = r;
        polar.ang = phi;
        return polar;
    };

    // Convert position to DMS
    var convertToDMS = function (x) {
        var dms = { d: 0, m: 0, s: 0 };
        var deg = Math.abs(x);
        dms.d = Math.floor(deg);
        dms.m = Math.floor((deg - dms.d) * 60);
        dms.s = Math.floor((deg - dms.d) * 3600 - dms.m * 60);
        fmt = ((x < 0) ? '-' : ' ') + dms.d.toFixed(0) + '°' + dms.m.toFixed(0) + '"' + dms.s.toFixed(0) + "'";
        return fmt;
    };

    // Set popover text to show
    var setPopoverText = function (content) {

        // Minimum length
        popoverText.width = popoverText.defaultWidth;

        // Remove old texts
        while (null !== popoverText.element.firstChild) {
            popoverText.element.removeChild(popoverText.element.firstChild);
        }

        var lines = content.split(/\n|\\n/g);

        // Single line
        if (lines.length <= 1) {
            popoverText.element.textContent = content;
            popoverText.width = popoverText.element.getComputedTextLength() + 8;
        }
        // Multiple lines
        else {
            var lineWidth = 0;
            var tspanElement;

            for (var l = 0; l < lines.length; l++) {
                tspanElement = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
                // Y relative position
                if (l > 0) {
                    tspanElement.setAttribute('dy', popoverText.defaultHeight);
                }
                // Append text
                tspanElement.appendChild(document.createTextNode(lines[l]));
                popoverText.element.appendChild(tspanElement);

                // Max line width
                lineWidth = tspanElement.getComputedTextLength() + 8;
                if (popoverText.width < lineWidth) {
                    popoverText.width = lineWidth;
                }
            }
        }

        // Box Height
        popoverText.height = 2 + popoverText.defaultHeight * lines.length;
        popoverContainer.element.setAttribute('height', popoverText.height);

        // Box Width
        popoverContainer.element.setAttribute('width', popoverText.width);
    };

    // Set popover image to show
    var setPopoverImage = function (content) {

        // Set default image size
        popoverImage.width = popoverImage.defaultWidth;
        popoverImage.height = popoverImage.defaultHeight;

        // Pick up height and width from image(width,height):name
        if (content.charAt(5) == '(') {
            popoverImage.width = parseInt(content.slice(6));
            popoverImage.height = parseInt(content.slice(content.indexOf(',') + 1));
        }

        popoverImage.element.setAttribute('width', popoverImage.width);
        popoverImage.element.setAttribute('height', popoverImage.height);
        popoverImage.element.setAttribute('preserveAspectRatio', 'none');

        // attach image URL as a link
        content = content.slice(content.indexOf(':') + 1);
        popoverImage.element.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', content);
    };

    // Show popover text in given position
    var showPopoverText = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverText.height + 16 > domRect.y) {
            position.y = domRect.y - popoverText.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverText.width + 14 > domRect.x) {
            position.x = domRect.x - popoverText.width - 14;
        }

        // Change Box position
        popoverContainer.element.setAttribute('x', position.x + 10);
        popoverContainer.element.setAttribute('y', position.y + 4);
        popoverContainer.element.setAttribute('visibility', 'visible');

        // Change Text position
        popoverText.element.setAttribute('x', position.x + 14);
        popoverText.element.setAttribute('y', position.y + 18);
        popoverText.element.setAttribute('visibility', 'visible');

        // Change multiline text position
        var tspan = popoverText.element.querySelectorAll('tspan');
        for (var i = 0; i < tspan.length; i++) {
            tspan[i].setAttribute('x', position.x + 14);
        }

        // Font properties
        if (settings.hypertext_fontFamily != null)
            popoverText.element.setAttribute('font-family', settings.hypertext_fontFamily);
        if (settings.hypertext_fontStyle != null)
            popoverText.element.setAttribute('font-style', settings.hypertext_fontStyle);
        if (settings.hypertext_fontWeight != null)
            popoverText.element.setAttribute('font-weight', settings.hypertext_fontWeight);
        if (settings.hypertext_fontSize > 0)
            popoverText.element.setAttribute('font-size', settings.hypertext_fontSize);
    };

    // Show popover image in given position
    var showPopoverImage = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverImage.height + 16 > domRect.y) {
            position.y = domRect.y - popoverImage.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverImage.width + 14 > domRect.x) {
            position.x = domRect.x - popoverImage.width - 14;
        }

        popoverImage.element.setAttribute('x', position.x);
        popoverImage.element.setAttribute('y', position.y);
        popoverImage.element.setAttribute('visibility', 'visible');
    };

    // Hide all popovers
    var hidePopover = function () {
        popoverContainer.element.setAttribute('visibility', 'hidden');
        popoverText.element.setAttribute('visibility', 'hidden');
        popoverImage.element.setAttribute('visibility', 'hidden');
    };

    // Zoom svg inside viewbox
    var zoom = function (direction) {
        var zoomRate = 1.1;
        var viewBoxValues = getViewBox();

        var widthBefore = viewBoxValues[2];
        var heightBefore = viewBoxValues[3];

        if (direction == 'in') {
            viewBoxValues[2] /= zoomRate;
            viewBoxValues[3] /= zoomRate;
            // Pan to center
            viewBoxValues[0] -= (viewBoxValues[2] - widthBefore) / 2;
            viewBoxValues[1] -= (viewBoxValues[3] - heightBefore) / 2;
        }
        else if (direction == 'out') {
            viewBoxValues[2] *= zoomRate;
            viewBoxValues[3] *= zoomRate;
            // Pan to center
            viewBoxValues[0] += (widthBefore - viewBoxValues[2]) / 2;
            viewBoxValues[1] += (heightBefore - viewBoxValues[3]) / 2;
        }

        return viewBoxValues;
    };

    // Pan svg inside viewbox
    var pan = function (direction) {
        var panRate = 10;
        var viewBoxValues = getViewBox();

        switch (direction) {
            case 'left':
                viewBoxValues[0] += panRate;
                break;
            case 'right':
                viewBoxValues[0] -= panRate;
                break;
            case 'up':
                viewBoxValues[1] += panRate;
                break;
            case 'down':
                viewBoxValues[1] -= panRate;
                break;
        }

        return viewBoxValues;
    };

    // Toggle key and chart on/off or set manually to wanted
    var key = function (id, set, evt) {
        var visibility = null;

        // Chart element
        var chartElement = svgElement.getElementById(id.replace('_keyentry', ''));
        if (chartElement) {
            // Set on/off
            if (set === true || set === false) {
                visibility = set ? 'visible' : 'hidden';
            }
            // Toggle
            else {
                visibility = chartElement.getAttribute('visibility') == 'hidden' ? 'visible' : 'hidden';
            }
            chartElement.setAttribute('visibility', visibility);
        }

        // Key element
        var keyElement = svgElement.getElementById(id);
        if (keyElement && visibility) {
            keyElement.setAttribute('style', visibility == 'hidden' ? 'filter:url(#greybox)' : 'none');
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Toggle coordinates on/off or set manually to wanted
    var coordinate = function (set) {
        if (coordinateText.element) {
            // Set on/off
            if (set === true || set === false) {
                coordinateText.enabled = set;
            }
            // Toggle
            else {
                coordinateText.enabled = coordinateText.element.getAttribute('visibility') == 'hidden' ? true : false;
            }
            coordinateText.element.setAttribute('visibility', coordinateText.enabled ? 'visible' : 'hidden');
        }
    };

    // Toggle grid on/off or set manually to wanted
    var grid = function (set) {
        var grid = svgElement.getElementsByClassName('gridline');

        // Set on/off
        if (set === true || set === false) {
            gridEnabled = set;
        }
        // Toggle, get state from first element
        else if (grid.length) {
            gridEnabled = grid[0].getAttribute('visibility') == 'hidden' ? true : false;
        }

        for (i = 0; i < grid.length; i++) {
            grid[i].setAttribute('visibility', gridEnabled ? 'visible' : 'hidden');
        }
    };

    // Show popover text or image
    var popover = function (content, set, evt) {

        // Hide popover
        if (set === false) {
            hidePopover();

            if (evt !== undefined) {
                evt.stopPropagation();
                evt.preventDefault();
            }

            return;
        }

        var position = null;

        // Change content only if changed
        if (popoverContainer.content != content) {

            // Set current text
            popoverContainer.content = content;

            popoverImage.content = '';
            popoverText.content = content;

            // If text starts with image: process it as an xlinked bitmap
            if (content.substring(0, 5) == 'image') {
                var lines = content.split(/\n|\\n/g);
                var nameindex = lines[0].indexOf(':');
                if (nameindex > 0) {
                    popoverImage.content = lines.shift();
                    popoverText.content = '';

                    // Additional text lines
                    if (lines !== undefined && lines.length > 0) {
                        popoverText.content = lines.join('\n');
                    }
                }
            }

            // Set image content
            if(popoverImage.content){
                setPopoverImage(popoverImage.content);
            }

            // Set text content
            if(popoverText.content){
                setPopoverText(popoverText.content);
            }
        }

        if(popoverImage.content || popoverText.content){
            position = convertDOMToSVG({'x': evt.clientX, 'y': evt.clientY });
        }

        // Show popover image on mouse position
        if(popoverImage.content){
            showPopoverImage(position);
        }

        // Show popover on mouse position
        if(popoverText.content){
            showPopoverText(position);
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Parse plot settings
    parseSettings();

    // viewBox initial position and size
    viewBoxResetValue = getViewBox();

    // Set focusable for event focusing, not work on old svg version
    svgElement.setAttribute('focusable', true);

    // Disable native draggable
    svgElement.setAttribute('draggable', false);

    // Add events
    addEvents();

    // Return functions to outside use
    return {
        zoom: function (direction) {
            setViewBox(zoom(direction));
            return this;
        },
        pan: function (direction) {
            setViewBox(pan(direction));
            return this;
        },
        reset: function () {
            setViewBox(viewBoxResetValue);
            return this;
        },
        key: function (id, set) {
            key(id, set);
            return this;
        },
        coordinate: function (set) {
            coordinate(set);
            return this;
        },
        grid: function (set) {
            grid(set);
            return this;
        }
    };
};

// Old init function, remove when svg inline events removed
gnuplot_svg.Init = function() { };
]]>
</script>

<!-- Tie mousing to entire bounding box of the plot -->
<rect x="0" y="0" width="960" height="480" fill="#ffffff" stroke="black" stroke-width="1"
onclick="gnuplot_svg.toggleCoordBox(evt)"  onmousemove="gnuplot_svg.moveCoordBox(evt)"/>

<!-- Also track mouse when it is on a plot element -->
<g id="gnuplot_canvas" onclick="gnuplot_svg.toggleCoordBox(evt)" onmousemove="gnuplot_svg.moveCoordBox(evt)">

<defs>

	<circle id='gpDot' r='0.5' stroke-width='0.5' stroke='currentColor'/>
	<path id='gpPt0' stroke-width='0.222' stroke='currentColor' d='M-1,0 h2 M0,-1 v2'/>
	<path id='gpPt1' stroke-width='0.222' stroke='currentColor' d='M-1,-1 L1,1 M1,-1 L-1,1'/>
	<path id='gpPt2' stroke-width='0.222' stroke='currentColor' d='M-1,0 L1,0 M0,-1 L0,1 M-1,-1 L1,1 M-1,1 L1,-1'/>
	<rect id='gpPt3' stroke-width='0.222' stroke='currentColor' x='-1' y='-1' width='2' height='2'/>
	<rect id='gpPt4' stroke-width='0.222' stroke='currentColor' fill='currentColor' x='-1' y='-1' width='2' height='2'/>
	<circle id='gpPt5' stroke-width='0.222' stroke='currentColor' cx='0' cy='0' r='1'/>
	<use xlink:href='#gpPt5' id='gpPt6' fill='currentColor' stroke='none'/>
	<path id='gpPt7' stroke-width='0.222' stroke='currentColor' d='M0,-1.33 L-1.33,0.67 L1.33,0.67 z'/>
	<use xlink:href='#gpPt7' id='gpPt8' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt7' id='gpPt9' stroke='currentColor' transform='rotate(180)'/>
	<use xlink:href='#gpPt9' id='gpPt10' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt3' id='gpPt11' stroke='currentColor' transform='rotate(45)'/>
	<use xlink:href='#gpPt11' id='gpPt12' fill='currentColor' stroke='none'/>
	<path id='gpPt13' stroke-width='0.222' stroke='currentColor' d='M0,1.330 L1.265,0.411 L0.782,-1.067 L-0.782,-1.076 L-1.265,0.411 z'/>
	<use xlink:href='#gpPt13' id='gpPt14' fill='currentColor' stroke='none'/>
	<filter id='textbox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='white' flood-opacity='1' result='bgnd'/>
	  <feComposite in='SourceGraphic' in2='bgnd' operator='atop'/>
	</filter>
	<filter id='greybox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='lightgrey' flood-opacity='1' result='grey'/>
	  <feComposite in='SourceGraphic' in2='grey' operator='atop'/>
	</filter>
</defs>
<g fill="none" color="white" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,404.40 L63.53,404.40 M774.19,404.40 L765.19,404.40  '/>	<g transform="translate(46.14,408.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.65</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,338.52 L63.53,338.52 M774.19,338.52 L765.19,338.52  '/>	<g transform="translate(46.14,342.42)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.70</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,272.63 L63.53,272.63 M774.19,272.63 L765.19,272.63  '/>	<g transform="translate(46.14,276.53)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.75</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,206.75 L63.53,206.75 M774.19,206.75 L765.19,206.75  '/>	<g transform="translate(46.14,210.65)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.80</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,140.86 L63.53,140.86 M774.19,140.86 L765.19,140.86  '/>	<g transform="translate(46.14,144.76)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.85</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,74.98 L63.53,74.98 M774.19,74.98 L765.19,74.98  '/>	<g transform="translate(46.14,78.88)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" >0.90</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M62.27,404.40 L62.27,395.40  '/>	<g transform="translate(62.27,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.01</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M139.65,404.40 L139.65,395.40  '/>	<g transform="translate(139.65,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M217.03,404.40 L217.03,395.40  '/>	<g transform="translate(217.03,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M294.42,404.40 L294.42,395.40  '/>	<g transform="translate(294.42,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.04</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M371.80,404.40 L371.80,395.40  '/>	<g transform="translate(371.80,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.05</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M449.18,404.40 L449.18,395.40  '/>	<g transform="translate(449.18,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.06</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M526.57,404.40 L526.57,395.40  '/>	<g transform="translate(526.57,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.07</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M603.95,404.40 L603.95,395.40  '/>	<g transform="translate(603.95,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.08</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M681.33,404.40 L681.33,395.40  '/>	<g transform="translate(681.33,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.09</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M758.71,404.40 L758.71,395.40  '/>	<g transform="translate(758.71,426.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.1</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M758.71,74.98 L758.71,83.98  '/>	<g transform="translate(762.61,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >1e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M532.06,74.98 L532.06,83.98  '/>	<g transform="translate(535.96,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >2e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M431.66,74.98 L431.66,83.98  '/>	<g transform="translate(435.56,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >3e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M371.80,74.98 L371.80,83.98  '/>	<g transform="translate(375.70,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >4e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M330.95,74.98 L330.95,83.98  '/>	<g transform="translate(334.85,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >5e+02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M229.59,74.98 L229.59,83.98  '/>	<g transform="translate(233.49,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >1e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M157.92,74.98 L157.92,83.98  '/>	<g transform="translate(161.82,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >2e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M126.17,74.98 L126.17,83.98  '/>	<g transform="translate(130.07,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >3e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M107.24,74.98 L107.24,83.98  '/>	<g transform="translate(111.14,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >4e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M94.32,74.98 L94.32,83.98  '/>	<g transform="translate(98.22,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >5e+03</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M62.27,74.98 L62.27,83.98  '/>	<g transform="translate(66.17,66.59) rotate(-90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >1e+04</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,74.98 L54.53,404.40 L774.19,404.40 L774.19,74.98 L54.53,74.98 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(10.18,239.69) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(782.59,239.69) rotate(270)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,453.30)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >K</tspan><tspan font-family="Arial"  font-size="9.6" dy="-6.00px">-1/2</tspan><tspan font-size="12.0" dy="6.00"></tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,18.63)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" >K</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
	<g id="gnuplot_plot_1" ><title>mean ± 1σ</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<g transform="translate(859.31,225.59)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >mean ± 1</tspan><tspan font-family="Arial" >σ</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(  0, 158, 115)'  d='M808.36,221.69 L850.92,221.69 M808.36,217.19 L808.36,226.19 M850.92,217.19 L850.92,226.19  '/>	</g>
	<path stroke='rgb(  0, 158, 115)'  d='M758.71,272.45 L758.71,157.91 M754.21,272.45 L763.21,272.45 M754.21,157.91 L763.21,157.91 M532.06,255.74 L532.06,176.07
		M527.56,255.74 L536.56,255.74 M527.56,176.07 L536.56,176.07 M431.66,249.39 L431.66,188.43 M427.16,249.39 L436.16,249.39
		M427.16,188.43 L436.16,188.43 M371.80,246.22 L371.80,195.27 M367.30,246.22 L376.30,246.22 M367.30,195.27 L376.30,195.27
		M330.95,245.54 L330.95,198.69 M326.45,245.54 L335.45,245.54 M326.45,198.69 L335.45,198.69 M300.80,244.71 L300.80,200.59
		M296.30,244.71 L305.30,244.71 M296.30,200.59 L305.30,200.59 M277.36,245.08 L277.36,204.86 M272.86,245.08 L281.86,245.08
		M272.86,204.86 L281.86,204.86 M258.47,245.00 L258.47,206.75 M253.97,245.00 L262.97,245.00 M253.97,206.75 L262.97,206.75
		M242.83,244.72 L242.83,206.87 M238.33,244.72 L247.33,244.72 M238.33,206.87 L247.33,206.87 M229.59,243.26 L229.59,207.37
		M225.09,243.26 L234.09,243.26 M225.09,207.37 L234.09,207.37 M218.20,242.07 L218.20,207.85 M213.70,242.07 L222.70,242.07
		M213.70,207.85 L222.70,207.85 M208.27,241.09 L208.27,209.46 M203.77,241.09 L212.77,241.09 M203.77,209.46 L212.77,209.46
		M199.51,240.14 L199.51,210.98 M195.01,240.14 L204.01,240.14 M195.01,210.98 L204.01,210.98 M191.70,240.31 L191.70,211.42
		M187.20,240.31 L196.20,240.31 M187.20,211.42 L196.20,211.42 M184.69,239.43 L184.69,213.08 M180.19,239.43 L189.19,239.43
		M180.19,213.08 L189.19,213.08 M178.34,239.67 L178.34,213.87 M173.84,239.67 L182.84,239.67 M173.84,213.87 L182.84,213.87
		M172.57,239.17 L172.57,213.16 M168.07,239.17 L177.07,239.17 M168.07,213.16 L177.07,213.16 M167.28,238.50 L167.28,213.84
		M162.78,238.50 L171.78,238.50 M162.78,213.84 L171.78,213.84 M162.41,237.85 L162.41,213.94 M157.91,237.85 L166.91,237.85
		M157.91,213.94 L166.91,213.94 M157.92,237.35 L157.92,214.84 M153.42,237.35 L162.42,237.35 M153.42,214.84 L162.42,214.84
		M153.75,237.24 L153.75,215.12 M149.25,237.24 L158.25,237.24 M149.25,215.12 L158.25,215.12 M149.87,236.89 L149.87,215.87
		M145.37,236.89 L154.37,236.89 M145.37,215.87 L154.37,215.87 M146.24,236.72 L146.24,215.95 M141.74,236.72 L150.74,236.72
		M141.74,215.95 L150.74,215.95 M142.84,236.75 L142.84,215.86 M138.34,236.75 L147.34,236.75 M138.34,215.86 L147.34,215.86
		M139.65,236.04 L139.65,215.89 M135.15,236.04 L144.15,236.04 M135.15,215.89 L144.15,215.89 M136.65,235.44 L136.65,216.27
		M132.15,235.44 L141.15,235.44 M132.15,216.27 L141.15,216.27 M133.81,235.18 L133.81,216.63 M129.31,235.18 L138.31,235.18
		M129.31,216.63 L138.31,216.63 M131.13,235.49 L131.13,216.63 M126.63,235.49 L135.63,235.49 M126.63,216.63 L135.63,216.63
		M128.58,235.17 L128.58,216.58 M124.08,235.17 L133.08,235.17 M124.08,216.58 L133.08,216.58 M126.17,234.82 L126.17,216.82
		M121.67,234.82 L130.67,234.82 M121.67,216.82 L130.67,216.82 M123.87,234.95 L123.87,216.65 M119.37,234.95 L128.37,234.95
		M119.37,216.65 L128.37,216.65 M121.68,234.63 L121.68,216.79 M117.18,234.63 L126.18,234.63 M117.18,216.79 L126.18,216.79
		M119.59,234.58 L119.59,216.91 M115.09,234.58 L124.09,234.58 M115.09,216.91 L124.09,216.91 M117.60,234.32 L117.60,217.15
		M113.10,234.32 L122.10,234.32 M113.10,217.15 L122.10,217.15 M115.69,233.98 L115.69,217.76 M111.19,233.98 L120.19,233.98
		M111.19,217.76 L120.19,217.76 M113.86,233.86 L113.86,217.69 M109.36,233.86 L118.36,233.86 M109.36,217.69 L118.36,217.69
		M112.10,234.06 L112.10,217.74 M107.60,234.06 L116.60,234.06 M107.60,217.74 L116.60,217.74 M110.42,233.99 L110.42,217.91
		M105.92,233.99 L114.92,233.99 M105.92,217.91 L114.92,217.91 M108.80,233.73 L108.80,217.89 M104.30,233.73 L113.30,233.73
		M104.30,217.89 L113.30,217.89 M107.24,233.50 L107.24,217.86 M102.74,233.50 L111.74,233.50 M102.74,217.86 L111.74,217.86
		M105.74,233.33 L105.74,217.88 M101.24,233.33 L110.24,233.33 M101.24,217.88 L110.24,217.88 M104.29,232.88 L104.29,217.89
		M99.79,232.88 L108.79,232.88 M99.79,217.89 L108.79,217.89 M102.89,232.51 L102.89,217.86 M98.39,232.51 L107.39,232.51
		M98.39,217.86 L107.39,217.86 M101.54,232.68 L101.54,217.85 M97.04,232.68 L106.04,232.68 M97.04,217.85 L106.04,217.85
		M100.24,232.97 L100.24,217.78 M95.74,232.97 L104.74,232.97 M95.74,217.78 L104.74,217.78 M98.98,233.05 L98.98,217.77
		M94.48,233.05 L103.48,233.05 M94.48,217.77 L103.48,217.77 M97.76,232.79 L97.76,217.68 M93.26,232.79 L102.26,232.79
		M93.26,217.68 L102.26,217.68 M96.58,232.89 L96.58,217.97 M92.08,232.89 L101.08,232.89 M92.08,217.97 L101.08,217.97
		M95.43,232.74 L95.43,217.96 M90.93,232.74 L99.93,232.74 M90.93,217.96 L99.93,217.96 M94.32,232.54 L94.32,217.74
		M89.82,232.54 L98.82,232.54 M89.82,217.74 L98.82,217.74 M93.24,232.39 L93.24,217.80 M88.74,232.39 L97.74,232.39
		M88.74,217.80 L97.74,217.80 M92.20,232.32 L92.20,217.98 M87.70,232.32 L96.70,232.32 M87.70,217.98 L96.70,217.98
		M91.18,232.36 L91.18,218.24 M86.68,232.36 L95.68,232.36 M86.68,218.24 L95.68,218.24 M90.19,232.27 L90.19,218.58
		M85.69,232.27 L94.69,232.27 M85.69,218.58 L94.69,218.58 M89.23,232.47 L89.23,218.62 M84.73,232.47 L93.73,232.47
		M84.73,218.62 L93.73,218.62 M88.29,232.27 L88.29,218.44 M83.79,232.27 L92.79,232.27 M83.79,218.44 L92.79,218.44
		M87.38,232.23 L87.38,218.34 M82.88,232.23 L91.88,232.23 M82.88,218.34 L91.88,218.34 M86.49,232.03 L86.49,218.34
		M81.99,232.03 L90.99,232.03 M81.99,218.34 L90.99,218.34 M85.63,231.75 L85.63,218.45 M81.13,231.75 L90.13,231.75
		M81.13,218.45 L90.13,218.45 M84.79,231.70 L84.79,218.55 M80.29,231.70 L89.29,231.70 M80.29,218.55 L89.29,218.55
		M83.96,231.72 L83.96,218.82 M79.46,231.72 L88.46,231.72 M79.46,218.82 L88.46,218.82 M83.16,231.88 L83.16,219.11
		M78.66,231.88 L87.66,231.88 M78.66,219.11 L87.66,219.11 M82.38,231.68 L82.38,219.25 M77.88,231.68 L86.88,231.68
		M77.88,219.25 L86.88,219.25 M81.61,231.45 L81.61,219.22 M77.11,231.45 L86.11,231.45 M77.11,219.22 L86.11,219.22
		M80.87,231.44 L80.87,219.33 M76.37,231.44 L85.37,231.44 M76.37,219.33 L85.37,219.33 M80.14,231.14 L80.14,219.30
		M75.64,231.14 L84.64,231.14 M75.64,219.30 L84.64,219.30 M79.42,230.96 L79.42,219.11 M74.92,230.96 L83.92,230.96
		M74.92,219.11 L83.92,219.11 M78.73,231.00 L78.73,219.28 M74.23,231.00 L83.23,231.00 M74.23,219.28 L83.23,219.28
		M78.04,230.87 L78.04,219.44 M73.54,230.87 L82.54,230.87 M73.54,219.44 L82.54,219.44 M77.38,230.97 L77.38,219.41
		M72.88,230.97 L81.88,230.97 M72.88,219.41 L81.88,219.41 M76.72,231.00 L76.72,219.49 M72.22,231.00 L81.22,231.00
		M72.22,219.49 L81.22,219.49 M76.08,230.66 L76.08,219.42 M71.58,230.66 L80.58,230.66 M71.58,219.42 L80.58,219.42
		M75.46,230.71 L75.46,219.55 M70.96,230.71 L79.96,230.71 M70.96,219.55 L79.96,219.55 M74.84,230.78 L74.84,219.64
		M70.34,230.78 L79.34,230.78 M70.34,219.64 L79.34,219.64 M74.24,230.79 L74.24,219.66 M69.74,230.79 L78.74,230.79
		M69.74,219.66 L78.74,219.66 M73.65,230.89 L73.65,219.85 M69.15,230.89 L78.15,230.89 M69.15,219.85 L78.15,219.85
		M73.07,230.93 L73.07,219.98 M68.57,230.93 L77.57,230.93 M68.57,219.98 L77.57,219.98 M72.50,230.79 L72.50,219.93
		M68.00,230.79 L77.00,230.79 M68.00,219.93 L77.00,219.93 M71.95,230.80 L71.95,219.76 M67.45,230.80 L76.45,230.80
		M67.45,219.76 L76.45,219.76 M71.40,230.78 L71.40,219.79 M66.90,230.78 L75.90,230.78 M66.90,219.79 L75.90,219.79
		M70.87,230.78 L70.87,219.93 M66.37,230.78 L75.37,230.78 M66.37,219.93 L75.37,219.93 M70.34,230.70 L70.34,220.00
		M65.84,230.70 L74.84,230.70 M65.84,220.00 L74.84,220.00 M69.82,230.62 L69.82,220.12 M65.32,230.62 L74.32,230.62
		M65.32,220.12 L74.32,220.12 M69.32,230.65 L69.32,220.24 M64.82,230.65 L73.82,230.65 M64.82,220.24 L73.82,220.24
		M68.82,230.47 L68.82,220.34 M64.32,230.47 L73.32,230.47 M64.32,220.34 L73.32,220.34 M68.33,230.39 L68.33,220.43
		M63.83,230.39 L72.83,230.39  '/>	<path stroke='rgb(  0, 158, 115)'  d='M63.83,220.43 L72.83,220.43 M67.85,230.43 L67.85,220.39 M63.35,230.43 L72.35,230.43 M63.35,220.39 L72.35,220.39
		M67.38,230.53 L67.38,220.47 M62.88,230.53 L71.88,230.53 M62.88,220.47 L71.88,220.47 M66.91,230.49 L66.91,220.48
		M62.41,230.49 L71.41,230.49 M62.41,220.48 L71.41,220.48 M66.45,230.57 L66.45,220.43 M61.95,230.57 L70.95,230.57
		M61.95,220.43 L70.95,220.43 M66.00,230.70 L66.00,220.46 M61.50,230.70 L70.50,230.70 M61.50,220.46 L70.50,220.46
		M65.56,230.57 L65.56,220.64 M61.06,230.57 L70.06,230.57 M61.06,220.64 L70.06,220.64 M65.13,230.69 L65.13,220.82
		M60.63,230.69 L69.63,230.69 M60.63,220.82 L69.63,220.82 M64.70,230.75 L64.70,220.80 M60.20,230.75 L69.20,230.75
		M60.20,220.80 L69.20,220.80 M64.28,230.49 L64.28,220.86 M59.78,230.49 L68.78,230.49 M59.78,220.86 L68.78,220.86
		M63.86,230.47 L63.86,220.84 M59.36,230.47 L68.36,230.47 M59.36,220.84 L68.36,220.84 M63.46,230.53 L63.46,220.88
		M58.96,230.53 L67.96,230.53 M58.96,220.88 L67.96,220.88 M63.05,230.59 L63.05,220.93 M58.55,230.59 L67.55,230.59
		M58.55,220.93 L67.55,220.93 M62.66,230.56 L62.66,221.02 M58.16,230.56 L67.16,230.56 M58.16,221.02 L67.16,221.02
		M62.27,230.48 L62.27,220.96 M57.77,230.48 L66.77,230.48 M57.77,220.96 L66.77,220.96  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<use xlink:href='#gpPt0' transform='translate(758.71,215.18) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(532.06,215.91) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(431.66,218.91) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(371.80,220.75) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(330.95,222.11) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(300.80,222.65) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(277.36,224.97) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(258.47,225.87) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(242.83,225.80) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(229.59,225.31) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(218.20,224.96) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(208.27,225.27) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(199.51,225.56) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(191.70,225.86) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(184.69,226.26) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(178.34,226.77) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(172.57,226.16) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(167.28,226.17) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(162.41,225.90) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(157.92,226.09) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(153.75,226.18) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(149.87,226.38) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(146.24,226.34) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(142.84,226.30) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(139.65,225.97) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(136.65,225.85) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(133.81,225.90) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(131.13,226.06) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(128.58,225.88) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(126.17,225.82) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(123.87,225.80) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(121.68,225.71) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(119.59,225.75) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(117.60,225.73) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(115.69,225.87) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(113.86,225.78) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(112.10,225.90) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(110.42,225.95) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(108.80,225.81) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(107.24,225.68) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(105.74,225.60) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(104.29,225.38) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(102.89,225.19) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(101.54,225.26) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(100.24,225.37) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(98.98,225.41) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(97.76,225.24) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(96.58,225.43) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(95.43,225.35) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(94.32,225.14) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(93.24,225.09) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(92.20,225.15) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(91.18,225.30) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(90.19,225.42) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(89.23,225.54) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(88.29,225.36) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(87.38,225.29) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(86.49,225.19) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(85.63,225.10) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(84.79,225.13) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(83.96,225.27) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(83.16,225.50) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(82.38,225.46) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(81.61,225.33) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(80.87,225.38) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(80.14,225.22) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(79.42,225.03) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(78.73,225.14) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(78.04,225.15) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(77.38,225.19) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(76.72,225.25) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(76.08,225.04) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(75.46,225.13) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(74.84,225.21) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(74.24,225.22) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(73.65,225.37) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(73.07,225.45) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(72.50,225.36) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(71.95,225.28) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(71.40,225.29) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(70.87,225.36) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(70.34,225.35) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(69.82,225.37) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(69.32,225.44) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(68.82,225.41) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(68.33,225.41) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(67.85,225.41) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(67.38,225.50) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(66.91,225.48) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(66.45,225.50) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(66.00,225.58) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(65.56,225.61) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(65.13,225.76) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(64.70,225.78) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(64.28,225.68) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(63.86,225.66) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(63.46,225.70) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(63.05,225.76) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(62.66,225.79) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<use xlink:href='#gpPt0' transform='translate(62.27,225.72) scale(4.50)' color='rgb(  0, 158, 115)'/>
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<use xlink:href='#gpPt0' transform='translate(829.64,221.69) scale(4.50)' color='rgb(  0, 158, 115)'/>
	</g>
</g>
	</g>
	<g id="gnuplot_plot_2" ><title>maxval</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_2_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_2')">
	<g transform="translate(859.31,243.59)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >maxval</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(148,   0, 211)'  d='M808.36,239.69 L850.92,239.69  '/>	</g>
	<path stroke='rgb(148,   0, 211)'  d='M758.71,74.98 L532.06,127.69 L431.66,154.04 L371.80,150.75 L330.95,159.31 L300.80,167.22 L277.36,159.69 L258.47,165.57
		L242.83,183.32 L229.59,185.67 L218.20,192.37 L208.27,192.47 L199.51,193.57 L191.70,192.63 L184.69,190.94 L178.34,187.81
		L172.57,185.82 L167.28,183.32 L162.41,192.18 L157.92,197.52 L153.75,193.57 L149.87,195.37 L146.24,194.14 L142.84,192.47
		L139.65,195.15 L136.65,196.61 L133.81,196.99 L131.13,193.57 L128.58,196.75 L126.17,198.40 L123.87,198.25 L121.68,198.10
		L119.59,198.76 L117.60,199.38 L115.69,202.61 L113.86,202.36 L112.10,203.90 L110.42,205.01 L108.80,205.40 L107.24,204.77
		L105.74,202.57 L104.29,203.61 L102.89,204.91 L101.54,203.75 L100.24,203.23 L98.98,203.60 L97.76,203.10 L96.58,203.18
		L95.43,203.79 L94.32,202.53 L93.24,203.13 L92.20,202.95 L91.18,203.52 L90.19,204.06 L89.23,204.59 L88.29,204.39
		L87.38,205.36 L86.49,204.93 L85.63,204.96 L84.79,204.55 L83.96,205.45 L83.16,205.26 L82.38,205.07 L81.61,205.92
		L80.87,206.14 L80.14,206.75 L79.42,208.52 L78.73,208.30 L78.04,208.28 L77.38,209.38 L76.72,208.98 L76.08,208.21
		L75.46,208.55 L74.84,208.71 L74.24,207.98 L73.65,207.79 L73.07,207.60 L72.50,207.93 L71.95,207.58 L71.40,209.22
		L70.87,210.00 L70.34,211.09 L69.82,211.19 L69.32,211.61 L68.82,211.86 L68.33,212.42 L67.85,211.59 L67.38,211.99
		L66.91,210.89 L66.45,210.70 L66.00,209.64 L65.56,209.90 L65.13,209.44 L64.70,209.41 L64.28,209.94 L63.86,211.55
		L63.46,210.69 L63.05,211.19 L62.66,211.14 L62.27,211.89  '/></g>
	</g>
	<g id="gnuplot_plot_3" ><title>minval</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_3_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_3')">
	<g transform="translate(859.31,261.59)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="start">
		<text><tspan font-family="Arial" >minval</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb( 86, 180, 233)'  d='M808.36,257.69 L850.92,257.69  '/>	</g>
	<path stroke='rgb( 86, 180, 233)'  d='M758.71,351.69 L532.06,318.75 L431.66,298.99 L371.80,285.81 L330.95,275.27 L300.80,277.02 L277.36,261.34 L258.47,266.04
		L242.83,269.70 L229.59,273.95 L218.20,275.03 L208.27,263.85 L199.51,268.58 L191.70,256.63 L184.69,255.06 L178.34,253.69
		L172.57,254.80 L167.28,254.33 L162.41,253.91 L157.92,252.87 L153.75,252.55 L149.87,251.07 L146.24,250.86 L142.84,251.77
		L139.65,250.49 L136.65,249.83 L133.81,250.67 L131.13,251.45 L128.58,252.19 L126.17,251.99 L123.87,250.95 L121.68,251.22
		L119.59,250.67 L117.60,250.15 L115.69,247.03 L113.86,246.64 L112.10,245.92 L110.42,245.58 L108.80,244.93 L107.24,245.62
		L105.74,244.03 L104.29,242.51 L102.89,240.15 L101.54,240.29 L100.24,241.30 L98.98,242.27 L97.76,241.79 L96.58,242.16
		L95.43,240.90 L94.32,241.27 L93.24,242.40 L92.20,242.98 L91.18,244.04 L90.19,242.62 L89.23,244.12 L88.29,245.10
		L87.38,246.74 L86.49,246.05 L85.63,243.82 L84.79,242.98 L83.96,241.31 L83.16,242.67 L82.38,241.68 L81.61,243.40
		L80.87,243.24 L80.14,243.28 L79.42,242.74 L78.73,242.40 L78.04,241.89 L77.38,242.70 L76.72,242.75 L76.08,241.70
		L75.46,241.77 L74.84,241.11 L74.24,241.36 L73.65,240.73 L73.07,240.63 L72.50,239.01 L71.95,239.77 L71.40,239.85
		L70.87,239.28 L70.34,238.73 L69.82,239.77 L69.32,239.69 L68.82,238.53 L68.33,236.93 L67.85,237.49 L67.38,237.74
		L66.91,238.14 L66.45,238.67 L66.00,238.17 L65.56,237.83 L65.13,237.49 L64.70,236.47 L64.28,236.43 L63.86,236.40
		L63.46,236.36 L63.05,235.66 L62.66,235.90 L62.27,236.00  '/></g>
	</g>
<g fill="none" color="white" stroke="rgb( 86, 180, 233)" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="black" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M54.53,74.98 L54.53,404.40 L774.19,404.40 L774.19,74.98 L54.53,74.98 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g transform="translate(414.36,78.88)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>

<script type="text/javascript"><![CDATA[
// plot boundaries and axis scaling information for mousing 
gnuplot_svg.plot_term_xmax = 960;
gnuplot_svg.plot_term_ymax = 480;
gnuplot_svg.plot_xmin = 54.5;
gnuplot_svg.plot_xmax = 774.2;
gnuplot_svg.plot_ybot = 404.4;
gnuplot_svg.plot_ytop = 75.0;
gnuplot_svg.plot_width = 719.7;
gnuplot_svg.plot_height = 329.4;
gnuplot_svg.plot_axis_xmin = 0.009;
gnuplot_svg.plot_axis_xmax = 0.102;
gnuplot_svg.plot_axis_ymin = 0.65;
gnuplot_svg.plot_axis_ymax = 0.9;
gnuplot_svg.polar_mode = false;
gnuplot_svg.plot_axis_x2min = 12345.7;
gnuplot_svg.plot_axis_x2max = 96.1169;
gnuplot_svg.plot_axis_y2min = "none";
gnuplot_svg.plot_logaxis_x = 0;
gnuplot_svg.plot_logaxis_y = 0;
gnuplot_svg.plot_timeaxis_x = "";
gnuplot_svg.plot_timeaxis_y = "";
gnuplot_svg.hypertext_fontSize = 0;
gnuplot_svg.hypertext_fontName = null;
gnuplot_svg.hypertext_fontStyle = null;
gnuplot_svg.hypertext_fontWeight = null;
]]>
</script>
</g>

  <text id="coord_text" text-anchor="start" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <rect id="hypertextbox" class="hypertextbox" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="16" visibility="hidden" />

  <text id="hypertext" class="hypertext" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <image id="hyperimage" class="hyperimage" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="200" width="300" visibility="hidden" />
</svg>

